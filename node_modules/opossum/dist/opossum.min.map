{"version":3,"file":"opossum.min.js","mappings":"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","sources":["webpack://circuitBreaker/webpack/universalModuleDefinition","webpack://circuitBreaker/./node_modules/events/events.js","webpack://circuitBreaker/./index.js","webpack://circuitBreaker/./lib/cache.js","webpack://circuitBreaker/./lib/circuit.js","webpack://circuitBreaker/./lib/semaphore.js","webpack://circuitBreaker/./lib/status.js","webpack://circuitBreaker/webpack/bootstrap","webpack://circuitBreaker/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"circuitBreaker\"] = factory();\n\telse\n\t\troot[\"circuitBreaker\"] = factory();\n})(self, () => {\nreturn ","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","'use strict';\n\nmodule.exports = exports = require('./lib/circuit');\n","/**\n * Simple in-memory cache implementation\n * @class MemoryCache\n * @property {Map} cache Cache map\n */\nclass MemoryCache {\n  constructor (maxEntries) {\n    this.cache = new Map();\n    this.maxEntries = maxEntries ?? 2 ** 24 - 1; // Max size for Map is 2^24.\n  }\n\n  /**\n   * Get cache value by key\n   * @param {string} key Cache key\n   * @return {any} Response from cache\n   */\n  get (key) {\n    const cached = this.cache.get(key);\n    if (cached) {\n      if (cached.expiresAt > Date.now() || cached.expiresAt === 0) {\n        return cached.value;\n      }\n      this.cache.delete(key);\n    }\n    return undefined;\n  }\n\n  /**\n   * Set cache key with value and ttl\n   * @param {string} key Cache key\n   * @param {any} value Value to cache\n   * @param {number} ttl Time to live in milliseconds\n   * @return {void}\n   */\n  set (key, value, ttl) {\n    // Evict first entry when at capacity - only when it's a new key.\n    if (this.cache.size === this.maxEntries && this.get(key) === undefined) {\n      this.cache.delete(this.cache.keys().next().value);\n    }\n\n    this.cache.set(key, {\n      expiresAt: ttl,\n      value\n    });\n  }\n\n  /**\n   * Clear cache\n   * @returns {void}\n   */\n  flush () {\n    this.cache.clear();\n  }\n}\n\nmodule.exports = exports = MemoryCache;\n","'use strict';\n\nconst EventEmitter = require('events');\nconst Status = require('./status');\nconst Semaphore = require('./semaphore');\nconst MemoryCache = require('./cache');\n\nconst STATE = Symbol('state');\nconst OPEN = Symbol('open');\nconst CLOSED = Symbol('closed');\nconst HALF_OPEN = Symbol('half-open');\nconst PENDING_CLOSE = Symbol('pending-close');\nconst SHUTDOWN = Symbol('shutdown');\nconst FALLBACK_FUNCTION = Symbol('fallback');\nconst STATUS = Symbol('status');\nconst NAME = Symbol('name');\nconst GROUP = Symbol('group');\nconst ENABLED = Symbol('Enabled');\nconst WARMING_UP = Symbol('warming-up');\nconst VOLUME_THRESHOLD = Symbol('volume-threshold');\nconst OUR_ERROR = Symbol('our-error');\nconst RESET_TIMEOUT = Symbol('reset-timeout');\nconst WARMUP_TIMEOUT = Symbol('warmup-timeout');\nconst LAST_TIMER_AT = Symbol('last-timer-at');\nconst deprecation = `options.maxFailures is deprecated. \\\nPlease use options.errorThresholdPercentage`;\n\n/**\n * Constructs a {@link CircuitBreaker}.\n *\n * @class CircuitBreaker\n * @extends EventEmitter\n * @param {Function} action The action to fire for this {@link CircuitBreaker}\n * @param {Object} options Options for the {@link CircuitBreaker}\n * @param {Status} options.status A {@link Status} object that might\n *   have pre-prime stats\n * @param {Number} options.timeout The time in milliseconds that action should\n * be allowed to execute before timing out. Timeout can be disabled by setting\n * this to `false`. Default 10000 (10 seconds)\n * @param {Number} options.maxFailures (Deprecated) The number of times the\n * circuit can fail before opening. Default 10.\n * @param {Number} options.resetTimeout The time in milliseconds to wait before\n * setting the breaker to `halfOpen` state, and trying the action again.\n * Default: 30000 (30 seconds)\n * @param {Number} options.rollingCountTimeout Sets the duration of the\n * statistical rolling window, in milliseconds. This is how long Opossum keeps\n * metrics for the circuit breaker to use and for publishing. Default: 10000\n * @param {Number} options.rollingCountBuckets Sets the number of buckets the\n * rolling statistical window is divided into. So, if\n * options.rollingCountTimeout is 10000, and options.rollingCountBuckets is 10,\n * then the statistical window will be 1000/1 second snapshots in the\n * statistical window. Default: 10\n * @param {String} options.name the circuit name to use when reporting stats.\n * Default: the name of the function this circuit controls.\n * @param {boolean} options.rollingPercentilesEnabled This property indicates\n * whether execution latencies should be tracked and calculated as percentiles.\n * If they are disabled, all summary statistics (mean, percentiles) are\n * returned as -1. Default: true\n * @param {Number} options.capacity the number of concurrent requests allowed.\n * If the number currently executing function calls is equal to\n * options.capacity, further calls to `fire()` are rejected until at least one\n * of the current requests completes. Default: `Number.MAX_SAFE_INTEGER`.\n * @param {Number} options.errorThresholdPercentage the error percentage at\n * which to open the circuit and start short-circuiting requests to fallback.\n * Default: 50\n * @param {boolean} options.enabled whether this circuit is enabled upon\n * construction. Default: true\n * @param {boolean} options.allowWarmUp determines whether to allow failures\n * without opening the circuit during a brief warmup period (this is the\n * `rollingCountTimeout` property). Default: false\n * This can help in situations where no matter what your\n * `errorThresholdPercentage` is, if the first execution times out or fails,\n * the circuit immediately opens.\n * @param {Number} options.volumeThreshold the minimum number of requests within\n * the rolling statistical window that must exist before the circuit breaker\n * can open. This is similar to `options.allowWarmUp` in that no matter how many\n * failures there are, if the number of requests within the statistical window\n * does not exceed this threshold, the circuit will remain closed. Default: 0\n * @param {Function} options.errorFilter an optional function that will be\n * called when the circuit's function fails (returns a rejected Promise). If\n * this function returns truthy, the circuit's failPure statistics will not be\n * incremented. This is useful, for example, when you don't want HTTP 404 to\n * trip the circuit, but still want to handle it as a failure case.\n * @param {boolean} options.cache whether the return value of the first\n * successful execution of the circuit's function will be cached. Once a value\n * has been cached that value will be returned for every subsequent execution:\n * the cache can be cleared using `clearCache`. (The metrics `cacheHit` and\n * `cacheMiss` reflect cache activity.) Default: false\n * @param {Number} options.cacheTTL the time to live for the cache\n * in milliseconds. Set 0 for infinity cache. Default: 0 (no TTL)\n * @param {Number} options.cacheSize the max amount of entries in the internal\n * cache. Only used when cacheTransport is not defined.\n * Default: max size of JS map (2^24).\n * @param {Function} options.cacheGetKey function that returns the key to use\n * when caching the result of the circuit's fire.\n * Better to use custom one, because `JSON.stringify` is not good\n * from performance perspective.\n * Default: `(...args) => JSON.stringify(args)`\n * @param {CacheTransport} options.cacheTransport custom cache transport\n * should implement `get`, `set` and `flush` methods.\n * @param {boolean} options.coalesce  If true, this provides coalescing of\n * requests to this breaker, in other words: the promise will be cached.\n * Only one action (with same cache key) is executed at a time, and the other\n * pending actions wait for the result. Performance will improve when rapidly\n * firing the circuitbreaker with the same request, especially on a slower\n * action (e.g. multiple end-users fetching same data from remote).\n * Will use internal cache only. Can be used in combination with options.cache.\n * The metrics `coalesceCacheHit` and `coalesceCacheMiss` are available.\n * Default: false\n * @param {Number} options.coalesceTTL the time to live for the coalescing\n * in milliseconds. Set 0 for infinity cache. Default: same as options.timeout\n * @param {Number} options.coalesceSize the max amount of entries in the\n * coalescing cache. Default: max size of JS map (2^24).\n * @param {AbortController} options.abortController this allows Opossum to\n * signal upon timeout and properly abort your on going requests instead of\n * leaving it in the background\n * @param {boolean} options.enableSnapshots whether to enable the rolling\n * stats snapshots that opossum emits at the bucketInterval. Disable this\n * as an optimization if you don't listen to the 'snapshot' event to reduce\n * the number of timers opossum initiates.\n * @param {EventEmitter} options.rotateBucketController if you have multiple\n * breakers in your app, the number of timers across breakers can get costly.\n * This option allows you to provide an EventEmitter that rotates the buckets\n * so you can have one global timer in your app. Make sure that you are\n * emitting a 'rotate' event from this EventEmitter\n * @param {boolean} options.autoRenewAbortController Automatically recreates\n * the instance of AbortController whenever the circuit transitions to\n * 'halfOpen' or 'closed' state. This ensures that new requests are not\n * impacted by previous signals that were triggered when the circuit was 'open'.\n * Default: false\n *\n *\n * @fires CircuitBreaker#halfOpen\n * @fires CircuitBreaker#close\n * @fires CircuitBreaker#open\n * @fires CircuitBreaker#fire\n * @fires CircuitBreaker#cacheHit\n * @fires CircuitBreaker#cacheMiss\n * @fires CircuitBreaker#coalesceCacheHit\n * @fires CircuitBreaker#coalesceCacheMiss\n * @fires CircuitBreaker#reject\n * @fires CircuitBreaker#timeout\n * @fires CircuitBreaker#success\n * @fires CircuitBreaker#semaphoreLocked\n * @fires CircuitBreaker#healthCheckFailed\n * @fires CircuitBreaker#fallback\n * @fires CircuitBreaker#failure\n */\nclass CircuitBreaker extends EventEmitter {\n  /**\n   * Returns true if the provided error was generated here. It will be false\n   * if the error came from the action itself.\n   * @param {Error} error The Error to check.\n   * @returns {Boolean} true if the error was generated here\n   */\n  static isOurError (error) {\n    return !!error[OUR_ERROR];\n  }\n\n  /**\n  * Create a new Status object,\n  * helpful when you need to prime a breaker with stats\n  * @param {Object} options -\n  * @param {Number} options.rollingCountBuckets number of buckets in the window\n  * @param {Number} options.rollingCountTimeout the duration of the window\n  * @param {Boolean} options.rollingPercentilesEnabled whether to calculate\n  * @param {Object} options.stats user supplied stats\n  * @returns {Status} a new {@link Status} object\n  */\n  static newStatus (options) {\n    return new Status(options);\n  }\n\n  constructor (action, options = {}) {\n    super();\n    this.options = options;\n    this.options.timeout = options.timeout ?? 10000;\n    this.options.resetTimeout = options.resetTimeout ?? 30000;\n    this.options.errorThresholdPercentage =\n      options.errorThresholdPercentage ?? 50;\n    this.options.rollingCountTimeout = options.rollingCountTimeout ?? 10000;\n    this.options.rollingCountBuckets = options.rollingCountBuckets ?? 10;\n    this.options.rollingPercentilesEnabled =\n      options.rollingPercentilesEnabled !== false;\n    this.options.capacity = Number.isInteger(options.capacity)\n      ? options.capacity\n      : Number.MAX_SAFE_INTEGER;\n    this.options.errorFilter = options.errorFilter || (_ => false);\n    this.options.cacheTTL = options.cacheTTL ?? 0;\n    this.options.cacheGetKey = options.cacheGetKey ??\n      ((...args) => JSON.stringify(args));\n    this.options.enableSnapshots = options.enableSnapshots !== false;\n    this.options.rotateBucketController = options.rotateBucketController;\n    this.options.coalesce = !!options.coalesce;\n    this.options.coalesceTTL = options.coalesceTTL ?? this.options.timeout;\n\n    // Set default cache transport if not provided\n    if (this.options.cache) {\n      if (this.options.cacheTransport === undefined) {\n        this.options.cacheTransport = new MemoryCache(options.cacheSize);\n      } else if (typeof this.options.cacheTransport !== 'object' ||\n        !this.options.cacheTransport.get ||\n        !this.options.cacheTransport.set ||\n        !this.options.cacheTransport.flush\n      ) {\n        throw new TypeError(\n          'options.cacheTransport should be an object with `get`, `set` and `flush` methods'\n        );\n      }\n    }\n\n    if (this.options.coalesce) {\n      this.options.coalesceCache = new MemoryCache(options.coalesceSize);\n    }\n\n    this.semaphore = new Semaphore(this.options.capacity);\n\n    // check if action is defined\n    if (!action) {\n      throw new TypeError(\n        'No action provided. Cannot construct a CircuitBreaker without an invocable action.'\n      );\n    }\n\n    if (options.autoRenewAbortController && !options.abortController) {\n      options.abortController = new AbortController();\n    }\n\n    if (options.abortController && typeof options.abortController.abort !== 'function') {\n      throw new TypeError(\n        'AbortController does not contain `abort()` method'\n      );\n    }\n\n    this[VOLUME_THRESHOLD] = Number.isInteger(options.volumeThreshold)\n      ? options.volumeThreshold\n      : 0;\n    this[WARMING_UP] = options.allowWarmUp === true;\n\n    // The user can pass in a Status object to initialize the Status/stats\n    if (this.options.status) {\n      // Do a check that this is a Status Object,\n      if (this.options.status instanceof Status) {\n        this[STATUS] = this.options.status;\n      } else {\n        this[STATUS] = new Status({ stats: this.options.status });\n      }\n    } else {\n      this[STATUS] = new Status(this.options);\n    }\n\n    this[STATE] = CLOSED;\n\n    if (options.state) {\n      this[ENABLED] = options.state.enabled !== false;\n      this[WARMING_UP] = options.state.warmUp || this[WARMING_UP];\n      // Closed if nothing is passed in\n      this[CLOSED] = options.state.closed !== false;\n      // These should be in sync\n      this[HALF_OPEN] = this[PENDING_CLOSE] = options.state.halfOpen || false;\n      // Open should be the opposite of closed,\n      // but also the opposite of half_open\n      this[OPEN] = !this[CLOSED] && !this[HALF_OPEN];\n      this[SHUTDOWN] = options.state.shutdown || false;\n    } else {\n      this[PENDING_CLOSE] = false;\n      this[ENABLED] = options.enabled !== false;\n    }\n\n    this[FALLBACK_FUNCTION] = null;\n    this[NAME] = options.name || action.name || nextName();\n    this[GROUP] = options.group || this[NAME];\n\n    if (this[WARMING_UP]) {\n      const timer = this[WARMUP_TIMEOUT] = setTimeout(\n        _ => (this[WARMING_UP] = false),\n        this.options.rollingCountTimeout\n      );\n      if (typeof timer.unref === 'function') {\n        timer.unref();\n      }\n    }\n\n    if (typeof action !== 'function') {\n      this.action = _ => Promise.resolve(action);\n    } else this.action = action;\n\n    if (options.maxFailures) console.error(deprecation);\n\n    const increment = property =>\n      (result, runTime) => this[STATUS].increment(property, runTime);\n\n    this.on('success', increment('successes'));\n    this.on('failure', increment('failures'));\n    this.on('fallback', increment('fallbacks'));\n    this.on('timeout', increment('timeouts'));\n    this.on('fire', increment('fires'));\n    this.on('reject', increment('rejects'));\n    this.on('cacheHit', increment('cacheHits'));\n    this.on('cacheMiss', increment('cacheMisses'));\n    this.on('coalesceCacheHit', increment('coalesceCacheHits'));\n    this.on('coalesceCacheMiss', increment('coalesceCacheMisses'));\n    this.on('open', _ => this[STATUS].open());\n    this.on('close', _ => this[STATUS].close());\n    this.on('semaphoreLocked', increment('semaphoreRejections'));\n\n    /**\n     * @param {CircuitBreaker} circuit This current circuit\n     * @returns {function(): void} A bound reset callback\n     * @private\n     */\n    function _startTimer (circuit) {\n      circuit[LAST_TIMER_AT] = Date.now();\n      return _ => {\n        const timer = circuit[RESET_TIMEOUT] = setTimeout(() => {\n          _halfOpen(circuit);\n        }, circuit.options.resetTimeout);\n        if (typeof timer.unref === 'function') {\n          timer.unref();\n        }\n      };\n    }\n\n    /**\n     * Sets the circuit breaker to half open\n     * @private\n     * @param {CircuitBreaker} circuit The current circuit breaker\n     * @returns {void}\n     */\n    function _halfOpen (circuit) {\n      circuit[STATE] = HALF_OPEN;\n      circuit[PENDING_CLOSE] = true;\n      circuit._renewAbortControllerIfNeeded();\n      /**\n       * Emitted after `options.resetTimeout` has elapsed, allowing for\n       * a single attempt to call the service again. If that attempt is\n       * successful, the circuit will be closed. Otherwise it remains open.\n       *\n       * @event CircuitBreaker#halfOpen\n       * @type {Number} how long the circuit remained open\n       */\n      circuit.emit('halfOpen', circuit.options.resetTimeout);\n    }\n\n    this.on('open', _startTimer(this));\n    this.on('success', _ => {\n      if (this.halfOpen) {\n        this.close();\n      }\n    });\n\n    // Prepopulate the State of the Breaker\n    if (this[SHUTDOWN]) {\n      this[STATE] = SHUTDOWN;\n      this.shutdown();\n    } else if (this[CLOSED]) {\n      this.close();\n    } else if (this[OPEN]) {\n      // If the state being passed in is OPEN but more time has elapsed\n      // than the resetTimeout, then we should be in halfOpen state\n      if (this.options.state.lastTimerAt !== undefined &&\n        (Date.now() - this.options.state.lastTimerAt) >\n        this.options.resetTimeout) {\n        _halfOpen(this);\n      } else {\n        this.open();\n      }\n    } else if (this[HALF_OPEN]) {\n      // Not sure if anything needs to be done here\n      this[STATE] = HALF_OPEN;\n    }\n  }\n\n  /**\n   * Renews the abort controller if needed\n   * @private\n   * @returns {void}\n   */\n  _renewAbortControllerIfNeeded () {\n    if (\n      this.options.autoRenewAbortController &&\n        this.options.abortController &&\n        this.options.abortController.signal.aborted\n    ) {\n      this.options.abortController = new AbortController();\n    }\n  }\n\n  /**\n   * Closes the breaker, allowing the action to execute again\n   * @fires CircuitBreaker#close\n   * @returns {void}\n   */\n  close () {\n    if (this[STATE] !== CLOSED) {\n      if (this[RESET_TIMEOUT]) {\n        clearTimeout(this[RESET_TIMEOUT]);\n      }\n      this[STATE] = CLOSED;\n      this[PENDING_CLOSE] = false;\n      this._renewAbortControllerIfNeeded();\n      /**\n       * Emitted when the breaker is reset allowing the action to execute again\n       * @event CircuitBreaker#close\n       */\n      this.emit('close');\n    }\n  }\n\n  /**\n   * Opens the breaker. Each time the breaker is fired while the circuit is\n   * opened, a failed Promise is returned, or if any fallback function\n   * has been provided, it is invoked.\n   *\n   * If the breaker is already open this call does nothing.\n   * @fires CircuitBreaker#open\n   * @returns {void}\n   */\n  open () {\n    if (this[STATE] !== OPEN) {\n      this[STATE] = OPEN;\n      this[PENDING_CLOSE] = false;\n      /**\n       * Emitted when the breaker opens because the action has\n       * failure percentage greater than `options.errorThresholdPercentage`.\n       * @event CircuitBreaker#open\n       */\n      this.emit('open');\n    }\n  }\n\n  /**\n   * Shuts down this circuit breaker. All subsequent calls to the\n   * circuit will fail, returning a rejected promise.\n   * @returns {void}\n   */\n  shutdown () {\n    /**\n     * Emitted when the circuit breaker has been shut down.\n     * @event CircuitBreaker#shutdown\n     */\n    this.emit('shutdown');\n\n    this.disable();\n    this.removeAllListeners();\n    if (this[RESET_TIMEOUT]) {\n      clearTimeout(this[RESET_TIMEOUT]);\n    }\n    if (this[WARMUP_TIMEOUT]) {\n      clearTimeout(this[WARMUP_TIMEOUT]);\n    }\n    this.status.shutdown();\n    this[STATE] = SHUTDOWN;\n\n    // clear cache on shutdown\n    this.clearCache();\n  }\n\n  /**\n   * Determines if the circuit has been shutdown.\n   * @type {Boolean}\n   */\n  get isShutdown () {\n    return this[STATE] === SHUTDOWN;\n  }\n\n  /**\n   * Gets the name of this circuit\n   * @type {String}\n   */\n  get name () {\n    return this[NAME];\n  }\n\n  /**\n   * Gets the name of this circuit group\n   * @type {String}\n   */\n  get group () {\n    return this[GROUP];\n  }\n\n  /**\n   * Gets whether this circuit is in the `pendingClosed` state\n   * @type {Boolean}\n   */\n  get pendingClose () {\n    return this[PENDING_CLOSE];\n  }\n\n  /**\n   * True if the circuit is currently closed. False otherwise.\n   * @type {Boolean}\n   */\n  get closed () {\n    return this[STATE] === CLOSED;\n  }\n\n  /**\n   * True if the circuit is currently opened. False otherwise.\n   * @type {Boolean}\n   */\n  get opened () {\n    return this[STATE] === OPEN;\n  }\n\n  /**\n   * True if the circuit is currently half opened. False otherwise.\n   * @type {Boolean}\n   */\n  get halfOpen () {\n    return this[STATE] === HALF_OPEN;\n  }\n\n  /**\n   * The current {@link Status} of this {@link CircuitBreaker}\n   * @type {Status}\n   */\n  get status () {\n    return this[STATUS];\n  }\n\n  /**\n   * Get the current stats for the circuit.\n   * @see Status#stats\n   * @type {Object}\n   */\n  get stats () {\n    return this[STATUS].stats;\n  }\n\n  toJSON () {\n    return {\n      state: {\n        name: this.name,\n        enabled: this.enabled,\n        closed: this.closed,\n        open: this.opened,\n        halfOpen: this.halfOpen,\n        warmUp: this.warmUp,\n        shutdown: this.isShutdown,\n        lastTimerAt: this[LAST_TIMER_AT]\n      },\n      status: this.status.stats\n    };\n  }\n\n  /**\n   * Gets whether the circuit is enabled or not\n   * @type {Boolean}\n   */\n  get enabled () {\n    return this[ENABLED];\n  }\n\n  /**\n   * Gets whether the circuit is currently in warm up phase\n   * @type {Boolean}\n   */\n  get warmUp () {\n    return this[WARMING_UP];\n  }\n\n  /**\n   * Gets the volume threshold for this circuit\n   * @type {Boolean}\n   */\n  get volumeThreshold () {\n    return this[VOLUME_THRESHOLD];\n  }\n\n  /**\n   * Provide a fallback function for this {@link CircuitBreaker}. This\n   * function will be executed when the circuit is `fire`d and fails.\n   * It will always be preceded by a `failure` event, and `breaker.fire` returns\n   * a rejected Promise.\n   * @param {Function | CircuitBreaker} func the fallback function to execute\n   * when the breaker has opened or when a timeout or error occurs.\n   * @return {CircuitBreaker} this\n   */\n  fallback (func) {\n    let fb = func;\n    if (func instanceof CircuitBreaker) {\n      fb = (...args) => func.fire(...args);\n    }\n    this[FALLBACK_FUNCTION] = fb;\n    return this;\n  }\n\n  /**\n   * Execute the action for this circuit. If the action fails or times out, the\n   * returned promise will be rejected. If the action succeeds, the promise will\n   * resolve with the resolved value from action. If a fallback function was\n   * provided, it will be invoked in the event of any failure or timeout.\n   *\n   * Any parameters passed to this function will be proxied to the circuit\n   * function.\n   *\n   * @return {Promise<any>} promise resolves with the circuit function's return\n   * value on success or is rejected on failure of the action. Use isOurError()\n   * to determine if a rejection was a result of the circuit breaker or the\n   * action.\n   *\n   * @fires CircuitBreaker#failure\n   * @fires CircuitBreaker#fallback\n   * @fires CircuitBreaker#fire\n   * @fires CircuitBreaker#reject\n   * @fires CircuitBreaker#success\n   * @fires CircuitBreaker#timeout\n   * @fires CircuitBreaker#semaphoreLocked\n   */\n  fire (...args) {\n    return this.call(this.action, ...args);\n  }\n\n  /**\n   * Execute the action for this circuit using `context` as `this`.\n   * If the action fails or times out, the\n   * returned promise will be rejected. If the action succeeds, the promise will\n   * resolve with the resolved value from action. If a fallback function was\n   * provided, it will be invoked in the event of any failure or timeout.\n   *\n   * Any parameters in addition to `context will be passed to the\n   * circuit function.\n   *\n   * @param {any} context the `this` context used for function execution\n   * @param {any} rest the arguments passed to the action\n   *\n   * @return {Promise<any>} promise resolves with the circuit function's return\n   * value on success or is rejected on failure of the action.\n   *\n   * @fires CircuitBreaker#failure\n   * @fires CircuitBreaker#fallback\n   * @fires CircuitBreaker#fire\n   * @fires CircuitBreaker#reject\n   * @fires CircuitBreaker#success\n   * @fires CircuitBreaker#timeout\n   * @fires CircuitBreaker#semaphoreLocked\n   */\n  call (context, ...rest) {\n    if (this.isShutdown) {\n      const err = buildError('The circuit has been shutdown.', 'ESHUTDOWN');\n      return Promise.reject(err);\n    }\n\n    const args = rest.slice();\n\n    /**\n     * Emitted when the circuit breaker action is executed\n     * @event CircuitBreaker#fire\n     * @type {any} the arguments passed to the fired function\n     */\n    this.emit('fire', args);\n\n    // Protection, caches and coalesce disabled.\n    if (!this[ENABLED]) {\n      const result = this.action.apply(context, args);\n      return (typeof result.then === 'function')\n        ? result\n        : Promise.resolve(result);\n    }\n\n    // Generate cachekey only when cache and/or coalesce is enabled.\n    const cacheKey = this.options.cache || this.options.coalesce ? this.options.cacheGetKey.apply(this, rest) : '';\n\n    // If cache is enabled, check if we have a cached value\n    if (this.options.cache) {\n      const cached = this.options.cacheTransport.get(cacheKey);\n      if (cached) {\n        /**\n         * Emitted when the circuit breaker is using the cache\n         * and finds a value.\n         * @event CircuitBreaker#cacheHit\n         */\n        this.emit('cacheHit');\n        return cached;\n      }\n      /**\n       * Emitted when the circuit breaker does not find a value in\n       * the cache, but the cache option is enabled.\n       * @event CircuitBreaker#cacheMiss\n       */\n      this.emit('cacheMiss');\n    }\n\n    /* When coalesce is enabled, check coalesce cache and return\n     promise, if any. */\n    if (this.options.coalesce) {\n      const cachedCall = this.options.coalesceCache.get(cacheKey);\n\n      if (cachedCall) {\n        /**\n         * Emitted when the circuit breaker is using coalesce cache\n         * and finds a cached promise.\n         * @event CircuitBreaker#coalesceCacheHit\n         */\n        this.emit('coalesceCacheHit');\n        return cachedCall;\n      }\n      /**\n       * Emitted when the circuit breaker does not find a value in\n       * coalesce cache, but the coalesce option is enabled.\n       * @event CircuitBreaker#coalesceCacheMiss\n       */\n      this.emit('coalesceCacheMiss');\n    }\n\n    if (!this.closed && !this.pendingClose) {\n      /**\n       * Emitted when the circuit breaker is open and failing fast\n       * @event CircuitBreaker#reject\n       * @type {Error}\n       */\n      const error = buildError('Breaker is open', 'EOPENBREAKER');\n\n      this.emit('reject', error);\n\n      return fallback(this, error, args) ||\n        Promise.reject(error);\n    }\n    this[PENDING_CLOSE] = false;\n\n    let timeout;\n    let timeoutError = false;\n\n    const call = new Promise((resolve, reject) => {\n      const latencyStartTime = Date.now();\n      if (this.semaphore.test()) {\n        if (this.options.timeout) {\n          timeout = setTimeout(\n            () => {\n              timeoutError = true;\n              const error = buildError(\n                `Timed out after ${this.options.timeout}ms`, 'ETIMEDOUT'\n              );\n              const latency = Date.now() - latencyStartTime;\n              this.semaphore.release();\n              /**\n               * Emitted when the circuit breaker action takes longer than\n               * `options.timeout`\n               * @event CircuitBreaker#timeout\n               * @type {Error}\n               */\n              this.emit('timeout', error, latency, args);\n              handleError(error, this, timeout, args, latency, resolve, reject);\n              if (this.options.abortController) {\n                this.options.abortController.abort();\n              }\n            }, this.options.timeout);\n        }\n\n        try {\n          const result = this.action.apply(context, args);\n          const promise = (typeof result.then === 'function')\n            ? result\n            : Promise.resolve(result);\n\n          promise.then(result => {\n            if (!timeoutError) {\n              clearTimeout(timeout);\n              /**\n               * Emitted when the circuit breaker action succeeds\n               * @event CircuitBreaker#success\n               * @type {any} the return value from the circuit\n               */\n              this.emit('success', result, (Date.now() - latencyStartTime));\n              this.semaphore.release();\n              resolve(result);\n              if (this.options.cache) {\n                this.options.cacheTransport.set(\n                  cacheKey,\n                  promise,\n                  this.options.cacheTTL > 0\n                    ? Date.now() + this.options.cacheTTL\n                    : 0\n                );\n              }\n            }\n          })\n            .catch(error => {\n              if (!timeoutError) {\n                this.semaphore.release();\n                const latencyEndTime = Date.now() - latencyStartTime;\n                handleError(\n                  error, this, timeout, args, latencyEndTime, resolve, reject);\n              }\n            });\n        } catch (error) {\n          this.semaphore.release();\n          const latency = Date.now() - latencyStartTime;\n          handleError(error, this, timeout, args, latency, resolve, reject);\n        }\n      } else {\n        const latency = Date.now() - latencyStartTime;\n        const err = buildError('Semaphore locked', 'ESEMLOCKED');\n        /**\n         * Emitted when the rate limit has been reached and there\n         * are no more locks to be obtained.\n         * @event CircuitBreaker#semaphoreLocked\n         * @type {Error}\n         */\n        this.emit('semaphoreLocked', err, latency);\n        handleError(err, this, timeout, args, latency, resolve, reject);\n      }\n    });\n\n    /* When coalesce is enabled, store promise in coalesceCache */\n    if (this.options.coalesce) {\n      this.options.coalesceCache.set(\n        cacheKey,\n        call,\n        this.options.coalesceTTL > 0\n          ? Date.now() + this.options.coalesceTTL\n          : 0\n      );\n    }\n\n    return call;\n  }\n\n  /**\n   * Clears the cache of this {@link CircuitBreaker}\n   * @returns {void}\n   */\n  clearCache () {\n    if (this.options.cache) {\n      this.options.cacheTransport.flush();\n    }\n  }\n\n  /**\n   * Provide a health check function to be called periodically. The function\n   * should return a Promise. If the promise is rejected the circuit will open.\n   * This is in addition to the existing circuit behavior as defined by\n   * `options.errorThresholdPercentage` in the constructor. For example, if the\n   * health check function provided here always returns a resolved promise, the\n   * circuit can still trip and open if there are failures exceeding the\n   * configured threshold. The health check function is executed within the\n   * circuit breaker's execution context, so `this` within the function is the\n   * circuit breaker itself.\n   *\n   * @param {Function} func a health check function which returns a promise.\n   * @param {Number} [interval] the amount of time between calls to the health\n   * check function. Default: 5000 (5 seconds)\n   *\n   * @returns {void}\n   *\n   * @fires CircuitBreaker#healthCheckFailed\n   * @throws {TypeError} if `interval` is supplied but not a number\n   */\n  healthCheck (func, interval) {\n    interval = interval || 5000;\n    if (typeof func !== 'function') {\n      throw new TypeError('Health check function must be a function');\n    }\n    if (isNaN(interval)) {\n      throw new TypeError('Health check interval must be a number');\n    }\n\n    const check = _ => {\n      func.apply(this).catch(e => {\n        /**\n         * Emitted with the user-supplied health check function\n         * returns a rejected promise.\n         * @event CircuitBreaker#healthCheckFailed\n         * @type {Error}\n         */\n        this.emit('healthCheckFailed', e);\n        this.open();\n      });\n    };\n\n    const timer = setInterval(check, interval);\n    if (typeof timer.unref === 'function') {\n      timer.unref();\n    }\n\n    check();\n  }\n\n  /**\n   * Enables this circuit. If the circuit is the  disabled\n   * state, it will be re-enabled. If not, this is essentially\n   * a noop.\n   * @returns {void}\n   */\n  enable () {\n    this[ENABLED] = true;\n    this.status.startListeneningForRotateEvent();\n  }\n\n  /**\n   * Disables this circuit, causing all calls to the circuit's function\n   * to be executed without circuit or fallback protection.\n   * @returns {void}\n   */\n  disable () {\n    this[ENABLED] = false;\n    this.status.removeRotateBucketControllerListener();\n  }\n\n  /**\n   * Retrieves the current AbortSignal from the abortController, if available.\n   * This signal can be used to monitor ongoing requests.\n   * @returns {AbortSignal|undefined} The AbortSignal if present,\n   * otherwise undefined.\n   */\n  getSignal () {\n    if (this.options.abortController && this.options.abortController.signal) {\n      return this.options.abortController.signal;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Retrieves the current AbortController instance.\n   * This controller can be used to manually abort ongoing requests or create\n   * a new signal.\n   * @returns {AbortController|undefined} The AbortController if present,\n   * otherwise undefined.\n   */\n  getAbortController () {\n    return this.options.abortController;\n  }\n}\n\nfunction handleError (error, circuit, timeout, args, latency, resolve, reject) {\n  clearTimeout(timeout);\n\n  if (circuit.options.errorFilter(error, ...args)) {\n    // The error was filtered, so emit 'success'\n    circuit.emit('success', error, latency);\n  } else {\n    // Error was not filtered, so emit 'failure'\n    fail(circuit, error, args, latency);\n\n    // Only call the fallback function if errorFilter doesn't succeed\n    // If the fallback function succeeds, resolve\n    const fb = fallback(circuit, error, args);\n    if (fb) return resolve(fb);\n  }\n  // In all other cases, reject\n  reject(error);\n}\n\nfunction fallback (circuit, err, args) {\n  if (circuit[FALLBACK_FUNCTION]) {\n    try {\n      const result =\n      circuit[FALLBACK_FUNCTION]\n        .apply(circuit[FALLBACK_FUNCTION], [...args, err]);\n      /**\n       * Emitted when the circuit breaker executes a fallback function\n       * @event CircuitBreaker#fallback\n       * @type {any} the return value of the fallback function\n       */\n      circuit.emit('fallback', result, err);\n      if (result instanceof Promise) return result;\n      return Promise.resolve(result);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n}\n\nfunction fail (circuit, err, args, latency) {\n  /**\n   * Emitted when the circuit breaker action fails\n   * @event CircuitBreaker#failure\n   * @type {Error}\n   */\n  circuit.emit('failure', err, latency, args);\n  if (circuit.warmUp) return;\n\n  // check stats to see if the circuit should be opened\n  const stats = circuit.stats;\n  if ((stats.fires < circuit.volumeThreshold) && !circuit.halfOpen) return;\n  const errorRate = stats.failures / stats.fires * 100;\n  if (errorRate > circuit.options.errorThresholdPercentage ||\n    circuit.halfOpen) {\n    circuit.open();\n  }\n}\n\nfunction buildError (msg, code) {\n  const error = new Error(msg);\n  error.code = code;\n  error[OUR_ERROR] = true;\n  return error;\n}\n\n// http://stackoverflow.com/a/2117523\nconst nextName = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n\nmodule.exports = exports = CircuitBreaker;\n","'use strict';\n\nmodule.exports = exports = semaphore;\n\nfunction semaphore (count) {\n  const resolvers = [];\n  let counter = count;\n\n  const sem = {\n    take,\n    release,\n    test\n  };\n\n  Object.defineProperty(sem, 'count', {\n    get: _ => counter,\n    enumerable: true\n  });\n\n  return sem;\n\n  function take (timeout) {\n    if (counter > 0) {\n      --counter;\n      return Promise.resolve(release);\n    }\n    return new Promise((resolve, reject) => {\n      resolvers.push(_ => {\n        --counter;\n        resolve(release);\n      });\n      if (timeout) {\n        setTimeout(_ => {\n          resolvers.shift();\n          const err = new Error(`Timed out after ${timeout}ms`);\n          err.code = 'ETIMEDOUT';\n          reject(err);\n        }, timeout);\n      }\n    });\n  }\n\n  function release () {\n    counter++;\n    if (resolvers.length > 0) {\n      resolvers.shift()();\n    }\n  }\n\n  function test () {\n    if (counter < 1) return false;\n    return take() && true;\n  }\n}\n","'use strict';\n\nconst WINDOW = Symbol('window');\nconst BUCKETS = Symbol('buckets');\nconst TIMEOUT = Symbol('timeout');\nconst PERCENTILES = Symbol('percentiles');\nconst BUCKET_INTERVAL = Symbol('bucket-interval');\nconst SNAPSHOT_INTERVAL = Symbol('snapshot-interval');\nconst ROTATE_EVENT_NAME = Symbol('rotate-event-name');\n\nconst EventEmitter = require('events').EventEmitter;\n\n/**\n * Tracks execution status for a given {@link CircuitBreaker}.\n * A Status instance is created for every {@link CircuitBreaker}\n * and does not typically need to be created by a user.\n *\n * A Status instance will listen for all events on the {@link CircuitBreaker}\n * and track them in a rolling statistical window. The window duration is\n * determined by the `rollingCountTimeout` option provided to the\n * {@link CircuitBreaker}. The window consists of an array of Objects,\n * each representing the counts for a {@link CircuitBreaker}'s events.\n *\n * The array's length is determined by the {@link CircuitBreaker}'s\n * `rollingCountBuckets` option. The duration of each slice of the window\n * is determined by dividing the `rollingCountTimeout` by\n * `rollingCountBuckets`.\n *\n * @class Status\n * @extends EventEmitter\n * @param {Object} options for the status window\n * @param {Number} options.rollingCountBuckets number of buckets in the window\n * @param {Number} options.rollingCountTimeout the duration of the window\n * @param {Boolean} options.rollingPercentilesEnabled whether to calculate\n * percentiles\n * @param {Object} options.stats object of previous stats\n * @example\n * // Creates a 1 second window consisting of ten time slices,\n * // each 100ms long.\n * const circuit = circuitBreaker(fs.readFile,\n *  { rollingCountBuckets: 10, rollingCountTimeout: 1000});\n *\n * // get the cumulative statistics for the last second\n * circuit.status.stats;\n *\n * // get the array of 10, 1 second time slices for the last second\n * circuit.status.window;\n * @fires Status#snapshot\n * @see CircuitBreaker#status\n */\nclass Status extends EventEmitter {\n  constructor (options) {\n    super();\n\n    // Set up our statistical rolling window\n    this[BUCKETS] = options.rollingCountBuckets || 10;\n    this[TIMEOUT] = options.rollingCountTimeout || 10000;\n    this[WINDOW] = new Array(this[BUCKETS]);\n    this[PERCENTILES] = [0.0, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99, 0.995, 1];\n    this[ROTATE_EVENT_NAME] = 'rotate';\n\n    // Default this value to true\n    this.rollingPercentilesEnabled =\n    options.rollingPercentilesEnabled !== false;\n\n    // Default this value to true\n    this.enableSnapshots = options.enableSnapshots !== false;\n\n    // can be undefined\n    this.rotateBucketController = options.rotateBucketController;\n    this.rotateBucket = nextBucket(this[WINDOW]);\n\n    // prime the window with buckets\n    for (let i = 0; i < this[BUCKETS]; i++) this[WINDOW][i] = bucket();\n\n    const bucketInterval = Math.floor(this[TIMEOUT] / this[BUCKETS]);\n\n    if (this.rotateBucketController) {\n      // rotate the buckets based on an optional EventEmitter\n      this.startListeneningForRotateEvent();\n    } else {\n      // or rotate the buckets periodically\n      this[BUCKET_INTERVAL] = setInterval(this.rotateBucket, bucketInterval);\n      // No unref() in the browser\n      if (typeof this[BUCKET_INTERVAL].unref === 'function') {\n        this[BUCKET_INTERVAL].unref();\n      }\n    }\n\n    /**\n     * Emitted at each time-slice. Listeners for this\n     * event will receive a cumulative snapshot of the current status window.\n     * @event Status#snapshot\n     * @type {Object}\n     */\n    if (this.enableSnapshots) {\n      this[SNAPSHOT_INTERVAL] = setInterval(\n        _ => this.emit('snapshot', this.stats),\n        bucketInterval);\n      if (typeof this[SNAPSHOT_INTERVAL].unref === 'function') {\n        this[SNAPSHOT_INTERVAL].unref();\n      }\n    }\n\n    if (options.stats) {\n      this[WINDOW][0] = { ...bucket(), ...options.stats };\n    }\n  }\n\n  /**\n   * Get the cumulative stats for the current window\n   * @type {Object}\n   */\n  get stats () {\n    const totals = this[WINDOW].reduce((acc, val) => {\n      if (!val) { return acc; }\n      Object.keys(acc).forEach(key => {\n        if (key !== 'latencyTimes' && key !== 'percentiles') {\n          (acc[key] += val[key] || 0);\n        }\n      });\n\n      if (this.rollingPercentilesEnabled) {\n        if (val.latencyTimes) {\n          acc.latencyTimes = acc.latencyTimes.concat(val.latencyTimes);\n        }\n      }\n      return acc;\n    }, bucket());\n\n    if (this.rollingPercentilesEnabled) {\n      // Sort the latencyTimes\n      totals.latencyTimes.sort((a, b) => a - b);\n\n      // Get the mean latency\n      // Mean = sum of all values in the array/length of array\n      if (totals.latencyTimes.length) {\n        totals.latencyMean =\n          (totals\n            .latencyTimes\n            .reduce((a, b) => a + b, 0)) / totals.latencyTimes.length;\n      } else {\n        totals.latencyMean = 0;\n      }\n\n      // Calculate Percentiles\n      this[PERCENTILES].forEach(percentile => {\n        totals.percentiles[percentile] =\n          calculatePercentile(percentile, totals.latencyTimes);\n      });\n    } else {\n      totals.latencyMean = -1;\n      this[PERCENTILES].forEach(percentile => {\n        totals.percentiles[percentile] = -1;\n      });\n    }\n\n    return totals;\n  }\n\n  /**\n   * Gets the stats window as an array of time-sliced objects.\n   * @type {Array}\n   */\n  get window () {\n    return this[WINDOW].slice();\n  }\n\n  increment (property, latencyRunTime) {\n    this[WINDOW][0][property]++;\n    if (property === 'successes' ||\n        property === 'failures' ||\n        property === 'timeouts') {\n      this[WINDOW][0].latencyTimes.push(latencyRunTime || 0);\n    }\n  }\n\n  open () {\n    this[WINDOW][0].isCircuitBreakerOpen = true;\n  }\n\n  close () {\n    this[WINDOW][0].isCircuitBreakerOpen = false;\n  }\n\n  shutdown () {\n    this.removeAllListeners();\n    // interval is not set if rotateBucketController is provided\n    if (this.rotateBucketController === undefined) {\n      clearInterval(this[BUCKET_INTERVAL]);\n    } else {\n      this.removeRotateBucketControllerListener();\n    }\n    if (this.enableSnapshots) {\n      clearInterval(this[SNAPSHOT_INTERVAL]);\n    }\n  }\n\n  removeRotateBucketControllerListener () {\n    if (this.rotateBucketController) {\n      this.rotateBucketController.removeListener(this[ROTATE_EVENT_NAME],\n        this.rotateBucket);\n    }\n  }\n\n  startListeneningForRotateEvent () {\n    if (\n      this.rotateBucketController &&\n      this.rotateBucketController.listenerCount(this[ROTATE_EVENT_NAME],\n        this.rotateBucket) === 0\n    ) {\n      this.rotateBucketController.on(this[ROTATE_EVENT_NAME],\n        this.rotateBucket);\n    }\n  }\n}\n\nconst nextBucket = window => _ => {\n  window.pop();\n  window.unshift(bucket());\n};\n\nconst bucket = _ => ({\n  failures: 0,\n  fallbacks: 0,\n  successes: 0,\n  rejects: 0,\n  fires: 0,\n  timeouts: 0,\n  cacheHits: 0,\n  cacheMisses: 0,\n  coalesceCacheHits: 0,\n  coalesceCacheMisses: 0,\n  semaphoreRejections: 0,\n  percentiles: {},\n  latencyTimes: []\n});\n\nfunction calculatePercentile (percentile, arr) {\n  if (percentile === 0) {\n    return arr[0] || 0;\n  }\n  const idx = Math.ceil(percentile * arr.length);\n  return arr[idx - 1] || 0;\n}\n\nmodule.exports = exports = Status;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(524);\n"],"names":["root","factory","exports","module","define","amd","self","ReflectOwnKeys","R","Reflect","ReflectApply","apply","target","receiver","args","Function","prototype","call","ownKeys","Object","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","value","EventEmitter","init","this","once","emitter","name","Promise","resolve","reject","errorListener","err","removeListener","resolver","slice","arguments","eventTargetAgnosticAddListener","handler","flags","on","addErrorHandlerIfEventEmitter","_events","undefined","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","type","prepend","m","events","existing","warning","create","newListener","emit","unshift","push","length","warned","w","Error","String","count","console","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","arr","ret","Array","i","unwrapListeners","arrayClone","listenerCount","n","copy","addEventListener","wrapListener","arg","removeEventListener","defineProperty","enumerable","get","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","error","er","message","context","len","listeners","addListener","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","key","keys","rawListeners","eventNames","require","MemoryCache","maxEntries","_classCallCheck","cache","Map","Math","pow","cached","expiresAt","Date","now","ttl","size","next","clear","_toConsumableArray","r","isArray","_arrayLikeToArray","_arrayWithoutHoles","Symbol","iterator","from","_iterableToArray","a","t","toString","constructor","test","_unsupportedIterableToArray","_nonIterableSpread","e","_typeof","o","_defineProperties","configurable","writable","_toPropertyKey","toPrimitive","_toPrimitive","_setPrototypeOf","setPrototypeOf","__proto__","_createSuper","_isNativeReflectConstruct","_getPrototypeOf","s","construct","_assertThisInitialized","_possibleConstructorReturn","ReferenceError","Boolean","valueOf","Status","Semaphore","STATE","OPEN","CLOSED","HALF_OPEN","PENDING_CLOSE","SHUTDOWN","FALLBACK_FUNCTION","STATUS","NAME","GROUP","ENABLED","WARMING_UP","VOLUME_THRESHOLD","OUR_ERROR","RESET_TIMEOUT","WARMUP_TIMEOUT","LAST_TIMER_AT","CircuitBreaker","_EventEmitter","_inherits","_super","action","_options$timeout","_options$resetTimeout","_options$errorThresho","_options$rollingCount","_options$rollingCount2","_options$cacheTTL","_options$cacheGetKey","_options$coalesceTTL","_this","options","timeout","resetTimeout","errorThresholdPercentage","rollingCountTimeout","rollingCountBuckets","rollingPercentilesEnabled","capacity","isInteger","MAX_SAFE_INTEGER","errorFilter","_","cacheTTL","cacheGetKey","_len","_key","JSON","stringify","enableSnapshots","rotateBucketController","coalesce","coalesceTTL","cacheTransport","cacheSize","flush","coalesceCache","coalesceSize","semaphore","autoRenewAbortController","abortController","AbortController","abort","volumeThreshold","allowWarmUp","status","stats","enabled","warmUp","closed","halfOpen","shutdown","nextName","group","timer","setTimeout","unref","maxFailures","circuit","increment","property","result","runTime","_halfOpen","_renewAbortControllerIfNeeded","open","close","lastTimerAt","signal","aborted","clearTimeout","disable","clearCache","opened","isShutdown","func","fb","fire","_len2","_key2","_this2","buildError","_len3","rest","_key3","then","cacheKey","cachedCall","pendingClose","fallback","timeoutError","latencyStartTime","latency","release","handleError","promise","latencyEndTime","interval","_this3","check","setInterval","startListeneningForRotateEvent","removeRotateBucketControllerListener","_circuit$options","fires","failures","fail","msg","code","replace","c","random","resolvers","counter","sem","take","filter","getOwnPropertyDescriptor","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","WINDOW","BUCKETS","TIMEOUT","PERCENTILES","BUCKET_INTERVAL","SNAPSHOT_INTERVAL","ROTATE_EVENT_NAME","rotateBucket","nextBucket","bucket","bucketInterval","floor","totals","reduce","acc","val","latencyTimes","sort","b","latencyMean","percentile","percentiles","ceil","calculatePercentile","latencyRunTime","isCircuitBreakerOpen","clearInterval","window","fallbacks","successes","rejects","timeouts","cacheHits","cacheMisses","coalesceCacheHits","coalesceCacheMisses","semaphoreRejections","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}