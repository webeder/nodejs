import { Level } from './level';
import Context from './context';
export declare class Logger {
    private parent?;
    private context?;
    private registeredCustomFields;
    private customFields;
    private recordFactory;
    private recordWriter;
    protected loggingLevelThreshold: Level;
    constructor(parent?: Logger, context?: Context);
    createLogger(customFields?: Map<string, any> | Object, createNewContext?: boolean): Logger;
    setLoggingLevel(level: string | Level): void;
    getLoggingLevel(): string;
    isLoggingLevel(level: string | Level): boolean;
    logMessage(level: string | Level, ...args: any): void;
    error(...args: any): void;
    warn(...args: any): void;
    info(...args: any): void;
    verbose(...args: any): void;
    debug(...args: any): void;
    silly(...args: any): void;
    isError(): boolean;
    isWarn(): boolean;
    isInfo(): boolean;
    isVerbose(): boolean;
    isDebug(): boolean;
    isSilly(): boolean;
    registerCustomFields(fieldNames: Array<string>): void;
    setCustomFields(customFields: Map<string, any> | Object): void;
    getCustomFields(): Map<string, any>;
    getContextProperty(name: string): string | undefined;
    setContextProperty(name: string, value: string): boolean;
    getCorrelationId(): string | undefined;
    setCorrelationId(value: string): boolean;
    getTenantId(): string | undefined;
    setTenantId(value: string): boolean;
    getTenantSubdomain(): string | undefined;
    setTenantSubdomain(value: string): boolean;
    private getCustomFieldsFromLogger;
}
