/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { ConfigObject, CustomFieldsFormat, Framework } from '../config/interfaces';
import { Logger } from './logger';
export default class RootLogger extends Logger {
    private static instance;
    private config;
    private constructor();
    static getInstance(): RootLogger;
    getConfig(): ConfigObject;
    getConfigFields(...fieldNames: string[]): import("../config/interfaces").ConfigField[];
    addConfig(...configObject: ConfigObject[]): void;
    clearFieldsConfig(): void;
    setCustomFieldsFormat(format: CustomFieldsFormat): void;
    setStartupMessageEnabled(enabled: boolean): void;
    setSinkFunction(func: (level: string, payload: string) => any): void;
    enableTracing(input: string | string[]): void;
    logNetwork(req: any, res: any, next: any): void;
    getBoundServices(): any;
    createWinstonTransport(options?: any): {
        logger: Logger;
        log(info: any, callback: () => void): void;
        format?: import("logform").Format | undefined;
        level?: string | undefined;
        silent?: boolean | undefined;
        handleExceptions?: boolean | undefined;
        handleRejections?: boolean | undefined;
        logv?(info: any, next: () => void): any;
        close?(): void;
        readonly writable: boolean;
        readonly writableEnded: boolean;
        readonly writableFinished: boolean;
        readonly writableHighWaterMark: number;
        readonly writableLength: number;
        readonly writableObjectMode: boolean;
        readonly writableCorked: number;
        destroyed: boolean;
        _write(chunk: any, encoding: BufferEncoding, callback: (error?: Error | null | undefined) => void): void;
        _writev?(chunks: {
            chunk: any;
            encoding: BufferEncoding;
        }[], callback: (error?: Error | null | undefined) => void): void;
        _construct?(callback: (error?: Error | null | undefined) => void): void;
        _destroy(error: Error | null, callback: (error?: Error | null | undefined) => void): void;
        _final(callback: (error?: Error | null | undefined) => void): void;
        write(chunk: any, callback?: ((error: Error | null | undefined) => void) | undefined): boolean;
        write(chunk: any, encoding: BufferEncoding, callback?: ((error: Error | null | undefined) => void) | undefined): boolean;
        setDefaultEncoding(encoding: BufferEncoding): any;
        end(cb?: (() => void) | undefined): any;
        end(chunk: any, cb?: (() => void) | undefined): any;
        end(chunk: any, encoding: BufferEncoding, cb?: (() => void) | undefined): any;
        cork(): void;
        uncork(): void;
        destroy(error?: Error | undefined): any;
        addListener(event: "close", listener: () => void): any;
        addListener(event: "drain", listener: () => void): any;
        addListener(event: "error", listener: (err: Error) => void): any;
        addListener(event: "finish", listener: () => void): any;
        addListener(event: "pipe", listener: (src: import("stream").Readable) => void): any;
        addListener(event: "unpipe", listener: (src: import("stream").Readable) => void): any;
        addListener(event: string | symbol, listener: (...args: any[]) => void): any;
        emit(event: "close"): boolean;
        emit(event: "drain"): boolean;
        emit(event: "error", err: Error): boolean;
        emit(event: "finish"): boolean;
        emit(event: "pipe", src: import("stream").Readable): boolean;
        emit(event: "unpipe", src: import("stream").Readable): boolean;
        emit(event: string | symbol, ...args: any[]): boolean;
        on(event: "close", listener: () => void): any;
        on(event: "drain", listener: () => void): any;
        on(event: "error", listener: (err: Error) => void): any;
        on(event: "finish", listener: () => void): any;
        on(event: "pipe", listener: (src: import("stream").Readable) => void): any;
        on(event: "unpipe", listener: (src: import("stream").Readable) => void): any;
        on(event: string | symbol, listener: (...args: any[]) => void): any;
        once(event: "close", listener: () => void): any;
        once(event: "drain", listener: () => void): any;
        once(event: "error", listener: (err: Error) => void): any;
        once(event: "finish", listener: () => void): any;
        once(event: "pipe", listener: (src: import("stream").Readable) => void): any;
        once(event: "unpipe", listener: (src: import("stream").Readable) => void): any;
        once(event: string | symbol, listener: (...args: any[]) => void): any;
        prependListener(event: "close", listener: () => void): any;
        prependListener(event: "drain", listener: () => void): any;
        prependListener(event: "error", listener: (err: Error) => void): any;
        prependListener(event: "finish", listener: () => void): any;
        prependListener(event: "pipe", listener: (src: import("stream").Readable) => void): any;
        prependListener(event: "unpipe", listener: (src: import("stream").Readable) => void): any;
        prependListener(event: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(event: "close", listener: () => void): any;
        prependOnceListener(event: "drain", listener: () => void): any;
        prependOnceListener(event: "error", listener: (err: Error) => void): any;
        prependOnceListener(event: "finish", listener: () => void): any;
        prependOnceListener(event: "pipe", listener: (src: import("stream").Readable) => void): any;
        prependOnceListener(event: "unpipe", listener: (src: import("stream").Readable) => void): any;
        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(event: "close", listener: () => void): any;
        removeListener(event: "drain", listener: () => void): any;
        removeListener(event: "error", listener: (err: Error) => void): any;
        removeListener(event: "finish", listener: () => void): any;
        removeListener(event: "pipe", listener: (src: import("stream").Readable) => void): any;
        removeListener(event: "unpipe", listener: (src: import("stream").Readable) => void): any;
        removeListener(event: string | symbol, listener: (...args: any[]) => void): any;
        pipe<T extends NodeJS.WritableStream>(destination: T, options?: {
            end?: boolean | undefined;
        } | undefined): T;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        listenerCount(eventName: string | symbol): number;
        eventNames(): (string | symbol)[];
    };
    setFramework(framework: Framework): void;
    forceLogger(framework: Framework): void;
    overrideNetworkField(field: string, value: string): boolean;
    overrideCustomFieldFormat(format: CustomFieldsFormat): void;
    setLogPattern(): void;
}
