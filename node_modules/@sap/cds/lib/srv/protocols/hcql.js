const cds = require('../../index'), {inspect} = cds.utils
const express = require('express')
const LOG = cds.log('hcql')

class HCQLAdapter extends require('./http') {

  get router() {

    const srv = this.service
    const router = super.router
    .get ('/\\$csn', this.schema.bind(this))      //> return the CSN as schema
    .use (express.json(this.body_parser_options)) //> for application/json -> cqn
    .use (express.text(this.body_parser_options)) //> for text/plain -> cql -> cqn

    // Route for custom actions and functions ...
    const action = this.action.bind(this)
    router.param('action', (req,_,next,a) => { (req.action = a) in srv.actions ? next() : next('route') })
    router.route('/:action')
    .post (action)
    .get (action)
    .all ((req,res,next) => next(501))

    // Route for REST-style convenience shortcuts with queries in URL + body ...
    if (process.env.NODE_ENV !== 'production') {
      const $ = cb => (req,_,next) => { req.body = cb(req.params,req); next() }
      router.param('entity', (req,_,next,a) => { a in srv.entities ? next() : next(404) })
      router.route('/:entity/:id?(%20?:tail)?')
      .get ($(({entity,id,tail}, req) => {
        const body = typeof req.body === 'string' ? req.body : ''
        return tail || body ? {SELECT:{
          ...CQL(`SELECT from _ ${body} ${tail||''}`).SELECT,
          ...SELECT.from (entity,id).SELECT
        }} : SELECT.from (entity,id)
      }))
      .post   ($(({entity}, {query,body}) => INSERT.into (entity) .entries ({...query,...body})))
      .put    ($(({entity,id}, {query,body}) => UPDATE (entity,id) .with ({...query,...body})))
      .patch  ($(({entity,id}, {query,body}) => UPDATE (entity,id) .with ({...query,...body})))
      .delete ($(({entity,id}) => DELETE.from (entity, id)))
    }

    // The ultimate handler for CRUD requests
    router.use (this.crud.bind(this))
    return router
  }


  /**
   * Handle requests to custom actions and functions.
   */
  action (req, res, next) {
    return this.service.send (req.action, { ...req.query, ...req.body })
    .then (results => this.reply (results, res))
    .catch (next)
  }


  /**
   * The ultimate handler for all CRUD requests.
   */
  crud (req, res, next) {
    let query = this.query4 (req)
    return this.service.run (query)
    .then (results => this.reply (results, res))
    .catch (next)
  }


  /**
   * Constructs an instance of cds.ql.Query from an incoming request body,
   * which is expected to be a plain CQN object or a CQL string.
   */
  query4 (/** @type express.Request */ req) {
    let b = req.body; if (typeof b === 'string') b = cds.parse.cql(b)
    let q = req.body = cds.ql.query(b); if (!q) return this.error (400, 'Invalid query', { query: req.body })
    // assert valid target entity
    if (q.target?._unresolved && this.service.definition) {
      q.target = q._target = this.service.entities [q.target.name]
      || this.error (404, `'${q.target.name}' is not an entity served by '${this.service.name}'.`, { query:q })
    }
    // handle request headers
    if (q.SELECT) {
      if (req.get('Accept-Language')) q.SELECT.localized = true
      if (req.get('X-Total-Count')) q.SELECT.count = true
    }
    // got a valid query
    if (LOG._debug) LOG.debug (inspect(q))
    return q
  }

  /**
   * Serialize the results into response.
   */
  reply (results, /** @type express.Response */ res) {
    if (!results) return res.end()
    if (results.$count) res.set ('X-Total-Count', results.$count)
    if (typeof results === 'object') return res.json (results)
    else res.send (results)
  }

  /**
   * Throw an Error with given status and message.
   */
  error (status, message, details) {
    if (typeof status === 'string') [ message, details, status ] = [ status, message ]
    let err = Object.assign (new Error(message), details)
    if (status) err.status = status
    if (new.target) return err
    else throw err
  }

  /**
   * Return the CSN as schema in response to /<srv>/$csn requests
   */
  schema (_, res) {
    let csn = cds.minify (this.service.model, { service: this.service.name })
    return res.json (csn)
  }
}

module.exports = HCQLAdapter
