// Parser generated by redepage v0.1.16
'use strict;'
const { XsnSource, XsnArtifact, XsnName } = require( '../compiler/xsn-model' );
const AstBuildingParser = require('../parsers/AstBuildingParser');
const keywords = {
  abstract: true,
  action: true,
  actions: true,
  all: false,
  and: true,
  annotate: true,
  annotation: true,
  any: false,
  array: true,
  as: false,
  asc: true,
  aspect: true,
  association: true,
  between: true,
  by: false,
  case: false,
  cast: false,
  columns: true,
  composition: true,
  context: true,
  cross: true,
  current: true,
  default: true,
  define: true,
  definitions: true,
  desc: true,
  distinct: true,
  element: true,
  elements: true,
  else: true,
  end: true,
  entity: true,
  enum: true,
  escape: true,
  event: true,
  exact: true,
  except: true,
  excluding: true,
  exists: false,
  extend: true,
  false: false,
  first: true,
  floating: true,
  following: true,
  from: false,
  full: true,
  function: true,
  group: true,
  having: true,
  in: false,
  inner: true,
  intersect: true,
  into: true,
  is: true,
  join: true,
  key: false,
  last: true,
  left: true,
  like: true,
  limit: true,
  localized: true,
  many: true,
  masked: true,
  minus: true,
  mixin: true,
  namespace: true,
  new: true,
  not: false,
  null: false,
  nulls: true,
  of: false,
  offset: true,
  on: false,
  one: true,
  or: true,
  order: true,
  outer: true,
  over: true,
  parameters: true,
  partition: true,
  preceding: true,
  projection: true,
  redirected: true,
  returns: true,
  right: true,
  row: true,
  rows: true,
  select: false,
  service: true,
  some: false,
  stored: true,
  then: true,
  to: true,
  true: false,
  type: true,
  unbounded: true,
  union: true,
  up: true,
  using: true,
  variable: true,
  view: true,
  virtual: true,
  when: true,
  where: false,
  with: false,
};
const table = [
  'start',
  /* 1 */ {
    namespace: [2,16],
    using: [2,19],
    '@': [2,10], type: '@', view: '@', event: '@', action: '@', aspect: '@', define: '@', entity: '@', extend: '@', context: '@', service: '@', abstract: '@', annotate: '@', function: '@', annotation: '@',
    '': 3
  },
  /* 2 */ {
    ';': ['c',1],
    EOF: 3,
    Id: ['g',1], '@': 'Id',
  },
  /* 3 */ ['m',0,'EOF'],
  'artifactsBlock',
  /* 5 */ ['m',6,'{'],
  /* 6 */ { Id: [7,10], '@': 'Id', '': 8 },
  /* 7 */ {
    ';': ['c',6],
    '}': 8,
    Id: ['g',6], '@': 'Id',
  },
  /* 8 */ ['m',0,'}'],
  'artifactDefOrExtend',
  /* 10 */ { '@': [10,780], '': 11 },
  /* 11 */ {
    define: ['ck',12],
    type: 12, view: 12, event: 12, action: 12, aspect: 12, entity: 12, context: 12, service: 12, abstract: 12, function: 12, annotation: 12,
    extend: ['ck',13],
    annotate: ['ck',14],
  },
  /* 12 */ {
    service: [0,44],
    context: [0,49],
    annotation: [0,54],
    type: [0,59],
    aspect: [0,64], abstract: 'aspect',
    entity: [0,77],
    view: [0,91],
    event: [0,103],
    action: [0,115],
    function: [0,121],
  },
  /* 13 */ {
    Id: [0,231],
    service: [0,253,1],
    context: [0,260,1],
    type: [0,267,1],
    aspect: [0,279,1], entity: 'aspect',
    projection: [0,290,1],
  },
  /* 14 */ [0,218],
  'namespaceDeclaration',
  /* 16 */ ['mk',17,'namespace'],
  /* 17 */ [0,36],
  'usingDeclaration',
  /* 19 */ ['mk',20,'using'],
  /* 20 */ {
    from: ['ck',21],
    Id: [22,32],
    '{': 24,
  },
  /* 21 */ ['m',0,'String'],
  /* 22 */ { from: ['ck',23], '': 0 },
  /* 23 */ ['m',0,'String'],
  /* 24 */ ['m',25,'{'],
  /* 25 */ { Id: 26 },
  /* 26 */ { Id: [27,32], '': 28 },
  /* 27 */ {
    ',': ['c',26],
    '}': 28,
  },
  /* 28 */ ['m',29,'}'],
  /* 29 */ { from: ['ck',30], '': 0 },
  /* 30 */ ['m',0,'String'],
  'usingProxy',
  /* 32 */ [33,40],
  /* 33 */ { as: ['ck',34], '': 0 },
  /* 34 */ ['mi',0],
  'namePath',
  /* 36 */ ['mi',37],
  /* 37 */ { '.': ['c',38], '': 0 },
  /* 38 */ ['miA',37],
  'simplePath',
  /* 40 */ ['mi',41],
  /* 41 */ { '.': ['c',42], '': 0 },
  /* 42 */ ['miA',41],
  'serviceDef',
  /* 44 */ ['mk',45,'service'],
  /* 45 */ [46,36],
  /* 46 */ { '@': [46,786], '': 47 },
  /* 47 */ { '{': [0,5], '': 0 },
  'contextDef',
  /* 49 */ ['mk',50,'context'],
  /* 50 */ [51,36],
  /* 51 */ { '@': [51,786], '': 52 },
  /* 52 */ { '{': [0,5], '': 0 },
  'annotationDef',
  /* 54 */ ['mk',55,'annotation'],
  /* 55 */ [56,36],
  /* 56 */ { '@': [56,786], '': 57 },
  /* 57 */ [0,349],
  'typeDef',
  /* 59 */ ['mk',60,'type'],
  /* 60 */ [61,36],
  /* 61 */ { '@': [61,786], '': 62 },
  /* 62 */ [0,349],
  'aspectDef',
  /* 64 */ {
    aspect: ['ck',66],
    abstract: ['ck',65],
  },
  /* 65 */ ['mk',66,'entity'],
  /* 66 */ [67,36],
  /* 67 */ { '@': [67,786], '': 68 },
  /* 68 */ {
    '{': [69,160],
    ':': ['c',70],
    '': 0
  },
  /* 69 */ { actions: [0,127], '': 0 },
  /* 70 */ [0,72],
  'aspectColonSpec',
  /* 72 */ { Id: [73,40], '': 74 },
  /* 73 */ { ',': ['c',72], '': 74 },
  /* 74 */ { '{': [75,160], '': 0 },
  /* 75 */ { actions: [0,127], '': 0 },
  'entityDef',
  /* 77 */ ['mk',78,'entity'],
  /* 78 */ [79,36],
  /* 79 */ { '@': [79,786], '': 80 },
  /* 80 */ { '(': [81,144], '': 81 },
  /* 81 */ {
    ':': ['c',82],
    '{': 85,
    as: ['ck',86],
  },
  /* 82 */ { Id: 83 },
  /* 83 */ { Id: [84,40], '': 85 },
  /* 84 */ {
    ',': ['c',83],
    '{': 85,
  },
  /* 85 */ [89,160],
  /* 86 */ {
    '(': [89,463], select: '(',
    projection: [87,457],
  },
  /* 87 */ { group: [88,613], where: 'group', having: 'group', '': 88 },
  /* 88 */ { limit: [89,625], order: 'limit', '': 89 },
  /* 89 */ { actions: [0,127], '': 0 },
  'viewDef',
  /* 91 */ ['mk',92,'view'],
  /* 92 */ [93,36],
  /* 93 */ { '@': [93,786], '': 94 },
  /* 94 */ {
    '(': [100,144],
    with: ['ck',95],
    '': 100
  },
  /* 95 */ ['mk',96,'parameters'],
  /* 96 */ [97,149],
  /* 97 */ { ',': ['c',98], '': 99 },
  /* 98 */ [97,149],
  /* 99 */ ['g',100],
  /* 100 */ ['mk',101,'as'],
  /* 101 */ [0,463],
  'eventDef',
  /* 103 */ ['mk',104,'event'],
  /* 104 */ [105,36],
  /* 105 */ { '@': [105,786], '': 106 },
  /* 106 */ {
    '{': [0,160],
    ':': ['c',107],
  },
  /* 107 */ {
    '{': [0,160],
    Id: [108,40],
    projection: [0,457,1],
  },
  /* 108 */ { ',': 109, '{': 109, '': 113 },
  /* 109 */ { ',': ['c',110], '': 112 },
  /* 110 */ { Id: [111,40], '': 112 },
  /* 111 */ {
    ',': ['c',110],
    '{': 112,
  },
  /* 112 */ [0,160],
  /* 113 */ { '@': [113,780], '': 0 },
  'actionMainDef',
  /* 115 */ ['mk',116,'action'],
  /* 116 */ [117,36],
  /* 117 */ { '@': [117,786], '': 118 },
  /* 118 */ [119,144],
  /* 119 */ { returns: [0,156], '': 0 },
  'functionMainDef',
  /* 121 */ ['mk',122,'function'],
  /* 122 */ [123,36],
  /* 123 */ { '@': [123,786], '': 124 },
  /* 124 */ [125,144],
  /* 125 */ [0,156],
  'actionsBlock',
  /* 127 */ ['mk',128,'actions'],
  /* 128 */ ['m',129,'{'],
  /* 129 */ { Id: [130,133], '@': 'Id', '': 131 },
  /* 130 */ {
    ';': ['c',129],
    '}': 131,
    Id: ['g',129], '@': 'Id',
  },
  /* 131 */ ['m',0,'}'],
  'boundActionFunctionDef',
  /* 133 */ { '@': [133,780], '': 134 },
  /* 134 */ {
    action: ['ck',135],
    function: ['ck',139],
  },
  /* 135 */ ['mi',136],
  /* 136 */ { '@': [136,786], '': 137 },
  /* 137 */ [138,144],
  /* 138 */ { returns: [0,156], '': 0 },
  /* 139 */ ['mi',140],
  /* 140 */ { '@': [140,786], '': 141 },
  /* 141 */ [142,144],
  /* 142 */ [0,156],
  'paramsList',
  /* 144 */ ['m',145,'('],
  /* 145 */ { Id: [146,149], '@': 'Id', '': 147 },
  /* 146 */ {
    ',': ['c',145],
    ')': 147,
  },
  /* 147 */ ['m',0,')'],
  'paramDef',
  /* 149 */ { '@': [149,780], '': 150 },
  /* 150 */ ['miA',151],
  /* 151 */ { '@': [151,786], '': 152 },
  /* 152 */ {
    '{': [153,160],
    ':': ['c',154],
  },
  /* 153 */ { not: [0,450], null: 'not', '': 0 },
  /* 154 */ [0,360],
  'returnsSpec',
  /* 156 */ ['mk',157,'returns'],
  /* 157 */ { '@': [157,780], '': 158 },
  /* 158 */ [0,360],
  'elementsBlock',
  /* 160 */ ['m',161,'{'],
  /* 161 */ { Id: [162,165], '@': 'Id', '': 163 },
  /* 162 */ {
    ';': ['c',161],
    '}': 163,
    Id: ['g',161], '@': 'Id',
  },
  /* 163 */ ['m',0,'}'],
  'elementDef',
  /* 165 */ { '@': [165,780], '': 166 },
  /* 166 */ { virtual: ['ck',167,1], '': 167 },
  /* 167 */ { key: ['ck',168], '': 168 },
  /* 168 */ { masked: ['ck',169,1], '': 169 },
  /* 169 */ { element: ['ck',170,1], '': 170 },
  /* 170 */ ['mi',171],
  /* 171 */ { '@': [171,786], '': 172 },
  /* 172 */ {
    '{': [173,160],
    ':': ['c',174],
    '': 175
  },
  /* 173 */ { not: [175,450], null: 'not', '': 175 },
  /* 174 */ [175,360],
  /* 175 */ { '=': ['c',176], '': 0 },
  /* 176 */ [177,653],
  /* 177 */ { stored: ['ck',178], '': 178 },
  /* 178 */ ['g',179],
  /* 179 */ { '@': [179,780], '': 0 },
  'enumSymbolsBlock',
  /* 181 */ ['mk',182,'enum'],
  /* 182 */ ['m',183,'{'],
  /* 183 */ { Id: [184,187], '@': 'Id', '': 185 },
  /* 184 */ {
    ';': ['c',183],
    '}': 185,
  },
  /* 185 */ ['m',0,'}'],
  'enumSymbolDef',
  /* 187 */ { '@': [187,780], '': 188 },
  /* 188 */ ['mi',189],
  /* 189 */ { '@': [189,780], '': 190 },
  /* 190 */ { '=': ['c',191], '': 0 },
  /* 191 */ {
    String: ['c',193],
    Number: ['c',193],
    '+': ['c',192], '-': '+',
    Id: [193,777], '#': 'Id', QuotedLiteral: 'Id',
  },
  /* 192 */ ['m',193,'Number'],
  /* 193 */ ['g',194],
  /* 194 */ { '@': [194,780], '': 0 },
  'foreignKeysBlock',
  /* 196 */ ['m',197,'{'],
  /* 197 */ { Id: [198,201], '@': 'Id', '': 199 },
  /* 198 */ {
    ',': ['c',197],
    '}': 199,
  },
  /* 199 */ ['m',0,'}'],
  'foreignKeyDef',
  /* 201 */ { '@': [201,780], '': 202 },
  /* 202 */ [203,40],
  /* 203 */ { as: ['ck',204], '': 0 },
  /* 204 */ ['mi',0],
  'mixinElementDef',
  /* 206 */ ['mi',207],
  /* 207 */ ['m',208,':'],
  /* 208 */ {
    association: ['ck',209],
    composition: ['ck',211],
  },
  /* 209 */ { '[': [210,432], '': 210 },
  /* 210 */ ['mk',213,'to'],
  /* 211 */ { '[': [212,432], '': 212 },
  /* 212 */ ['mk',213,'of'],
  /* 213 */ { one: ['ck',214,1], many: 'one', '': 214 },
  /* 214 */ [215,40],
  /* 215 */ ['mk',216,'on'],
  /* 216 */ [0,645],
  'annotateArtifact',
  /* 218 */ [219,36],
  /* 219 */ {
    ':': ['c',220],
    with: ['ck',225],
    '': 225
  },
  /* 220 */ [221,36],
  /* 221 */ { with: ['ck',222], '': 222 },
  /* 222 */ ['g',223],
  /* 223 */ { '@': [223,780], '': 224 },
  /* 224 */ { '{': [0,323], '': 0 },
  /* 225 */ ['g',226],
  /* 226 */ { '@': [226,780], '': 227 },
  /* 227 */ { '(': [228,310], '': 228 },
  /* 228 */ {
    returns: [0,319],
    '{': [229,323],
    '': 229
  },
  /* 229 */ { actions: [0,298], '': 0 },
  'extendArtifact',
  /* 231 */ [232,36],
  /* 232 */ {
    ':': ['c',233],
    with: ['ck',242],
    '': 239
  },
  /* 233 */ [234,36],
  /* 234 */ { with: ['ck',235], '': 235 },
  /* 235 */ ['g',236],
  /* 236 */ { '@': [236,780], '': 237 },
  /* 237 */ {
    elements: ['ck',238],
    '{': 238,
    enum: [0,181],
    '(': [0,423],
    '': 0
  },
  /* 238 */ [0,333],
  /* 239 */ { '@': [239,780], '': 240 },
  /* 240 */ { '{': [241,333], '': 0 },
  /* 241 */ { actions: [0,127], '': 0 },
  /* 242 */ { '@': [242,780], '': 243 },
  /* 243 */ {
    Id: [244,40],
    elements: ['ck',248,1],
    '{': 248,
    actions: [0,127,1],
    enum: [0,181,1],
    '(': [0,423],
    columns: ['ck',250,1],
    definitions: ['ck',251,1],
    '': 0
  },
  /* 244 */ { ',': ['c',245], '': 246 },
  /* 245 */ [244,40],
  /* 246 */ { '{': [247,333], '': 247 },
  /* 247 */ { actions: [0,127], '': 0 },
  /* 248 */ [249,333],
  /* 249 */ { actions: [0,127], '': 0 },
  /* 250 */ [0,569],
  /* 251 */ [0,5],
  'extendService',
  /* 253 */ ['mk',254,'service'],
  /* 254 */ [255,36],
  /* 255 */ { with: ['ck',256], '': 256 },
  /* 256 */ ['g',257],
  /* 257 */ { '@': [257,780], '': 258 },
  /* 258 */ { '{': [0,5], '': 0 },
  'extendContext',
  /* 260 */ ['mk',261,'context'],
  /* 261 */ [262,36],
  /* 262 */ { with: ['ck',263], '': 263 },
  /* 263 */ ['g',264],
  /* 264 */ { '@': [264,780], '': 265 },
  /* 265 */ { '{': [0,5], '': 0 },
  'extendType',
  /* 267 */ ['mk',268,'type'],
  /* 268 */ [269,36],
  /* 269 */ { with: ['ck',272], '': 270 },
  /* 270 */ { '@': [270,780], '': 271 },
  /* 271 */ { '{': [0,333], '': 0 },
  /* 272 */ { '@': [272,780], '': 273 },
  /* 273 */ {
    Id: [274,40],
    elements: ['ck',277,1],
    '{': 277,
    enum: [0,181,1],
    '(': [0,423],
    '': 0
  },
  /* 274 */ { ',': ['c',275], '': 276 },
  /* 275 */ [274,40],
  /* 276 */ { '{': [0,333], '': 0 },
  /* 277 */ [0,333],
  'extendEntityOrAspect',
  /* 279 */ { aspect: ['ck',280], entity: 'aspect' },
  /* 280 */ [281,36],
  /* 281 */ { with: ['ck',283], '': 282 },
  /* 282 */ { '@': [282,780], '': 287 },
  /* 283 */ { '@': [283,780], '': 284 },
  /* 284 */ {
    Id: [285,40],
    actions: ['g',287,1],
    '': 287
  },
  /* 285 */ { ',': ['c',286], '': 287 },
  /* 286 */ [285,40],
  /* 287 */ { '{': [288,333], '': 288 },
  /* 288 */ { actions: [0,127], '': 0 },
  'extendProjection',
  /* 290 */ ['mk',291,'projection'],
  /* 291 */ [292,36],
  /* 292 */ { with: ['ck',293], '': 293 },
  /* 293 */ ['g',294],
  /* 294 */ { '@': [294,780], '': 295 },
  /* 295 */ { '{': [296,569], '': 296 },
  /* 296 */ { actions: [0,127], '': 0 },
  'annotateActionsBlock',
  /* 298 */ ['mk',299,'actions'],
  /* 299 */ ['m',300,'{'],
  /* 300 */ { Id: [301,304], '@': 'Id', '': 302 },
  /* 301 */ {
    ';': ['c',300],
    '}': 302,
    Id: ['g',300], '@': 'Id',
  },
  /* 302 */ ['m',0,'}'],
  'annotateBoundAction',
  /* 304 */ { '@': [304,780], '': 305 },
  /* 305 */ ['mi',306],
  /* 306 */ { '@': [306,780], '': 307 },
  /* 307 */ { '(': [308,310], '': 308 },
  /* 308 */ { returns: [0,319,1], '': 0 },
  'annotateParamsBlock',
  /* 310 */ ['m',311,'('],
  /* 311 */ { Id: [312,315], '@': 'Id', '': 313 },
  /* 312 */ {
    ',': ['c',311],
    ')': 313,
  },
  /* 313 */ ['m',0,')'],
  'annotateParam',
  /* 315 */ { '@': [315,780], '': 316 },
  /* 316 */ ['mi',317],
  /* 317 */ { '@': [317,780], '': 0 },
  'annotateReturns',
  /* 319 */ ['mk',320,'returns'],
  /* 320 */ { '@': [320,780], '': 321 },
  /* 321 */ { '{': [0,323], '': 0 },
  'annotateElementsBlock',
  /* 323 */ ['m',324,'{'],
  /* 324 */ { Id: [325,328], '@': 'Id', '': 326 },
  /* 325 */ {
    ';': ['c',324],
    '}': 326,
    Id: ['g',324], '@': 'Id',
  },
  /* 326 */ ['m',0,'}'],
  'annotateElement',
  /* 328 */ { '@': [328,780], '': 329 },
  /* 329 */ ['mi',330],
  /* 330 */ { '@': [330,780], '': 331 },
  /* 331 */ { '{': [0,323], '': 0 },
  'extendElementsBlock',
  /* 333 */ ['m',334,'{'],
  /* 334 */ { Id: [335,338], '@': 'Id', '': 336 },
  /* 335 */ {
    ';': ['c',334],
    '}': 336,
    Id: ['g',334], '@': 'Id',
  },
  /* 336 */ ['m',0,'}'],
  'elementDefOrExtend',
  /* 338 */ { '@': [338,780], '': 339 },
  /* 339 */ {
    Id: [0,165], '@': 'Id', key: 'Id',
    extend: ['ck',340,1],
  },
  /* 340 */ { element: ['ck',341,1], '': 341 },
  /* 341 */ ['mi',342],
  /* 342 */ { with: ['ck',345], '': 343 },
  /* 343 */ { '@': [343,780], '': 344 },
  /* 344 */ { '{': [0,333], '': 0 },
  /* 345 */ { '@': [345,780], '': 346 },
  /* 346 */ {
    elements: ['ck',347],
    '{': 347,
    enum: [0,181],
    '(': [0,423],
    '': 0
  },
  /* 347 */ [0,333],
  'typeOrIncludesSpec',
  /* 349 */ {
    '{': [350,160],
    ':': ['c',351],
  },
  /* 350 */ { not: [0,450], null: 'not', '': 0 },
  /* 351 */ {
    '{': [0,360,1], many: '{', type: '{', array: '{', localized: '{', association: '{', composition: '{',
    Id: [352,40],
  },
  /* 352 */ {
    '(': [353,411], ':': '(',
    '@': [0,362], not: '@', enum: '@', null: '@', default: '@',
    ',': 354, '{': 354,
    '': 0
  },
  /* 353 */ { '@': [0,362], not: '@', enum: '@', null: '@', default: '@', '': 0 },
  /* 354 */ { ',': ['c',355], '': 357 },
  /* 355 */ { Id: [356,40], '': 357 },
  /* 356 */ {
    ',': ['c',355],
    '{': 357,
  },
  /* 357 */ [358,160],
  /* 358 */ { not: [0,450], null: 'not', '': 0 },
  'typeExpression',
  /* 360 */ {
    '{': [361,160],
    Id: [362,410],
    type: [362,402,1],
    localized: ['ck',371,1],
    association: ['ck',375,1],
    composition: ['ck',384,1],
    array: ['ck',394,1],
    many: ['ck',395,1],
  },
  /* 361 */ { not: [0,450], null: 'not', '': 0 },
  /* 362 */ { not: [363,450], null: 'not', '': 363 },
  /* 363 */ {
    not: [364,444], null: 'not', default: 'not',
    '@': 366,
    enum: 369,
    '': 0
  },
  /* 364 */ { '@': 365, '': 0 },
  /* 365 */ { '@': [365,780], '': 0 },
  /* 366 */ { '@': [366,780], '': 367 },
  /* 367 */ { enum: [368,181], '': 0 },
  /* 368 */ { not: [0,444], null: 'not', default: 'not', '': 0 },
  /* 369 */ [370,181],
  /* 370 */ { not: [0,444], null: 'not', default: 'not', '': 0 },
  /* 371 */ [372,410],
  /* 372 */ { not: [373,444], null: 'not', default: 'not', '': 373 },
  /* 373 */ { '@': 374, '': 0 },
  /* 374 */ { '@': [374,780], '': 0 },
  /* 375 */ { '[': [376,432], '': 376 },
  /* 376 */ ['mk',377,'to'],
  /* 377 */ { one: ['ck',378,1], many: 'one', '': 378 },
  /* 378 */ [379,40],
  /* 379 */ {
    on: ['ck',380],
    '{': [381,196],
    '': 381
  },
  /* 380 */ [382,645],
  /* 381 */ { not: [382,444], null: 'not', default: 'not', '': 382 },
  /* 382 */ ['g',383],
  /* 383 */ { '@': [383,780], '': 0 },
  /* 384 */ { '[': [385,432], '': 385 },
  /* 385 */ ['mk',386,'of'],
  /* 386 */ { one: ['ck',387,1], many: 'one', '': 387 },
  /* 387 */ {
    Id: [388,40],
    '{': 393,
  },
  /* 388 */ {
    on: ['ck',389],
    '{': [390,196],
    '': 390
  },
  /* 389 */ [391,645],
  /* 390 */ { not: [391,444], null: 'not', default: 'not', '': 391 },
  /* 391 */ ['g',392],
  /* 392 */ { '@': [392,780], '': 0 },
  /* 393 */ [0,160],
  /* 394 */ ['mk',395,'of'],
  /* 395 */ {
    '{': [396,160],
    Id: [397,410],
    type: [397,402,1],
  },
  /* 396 */ { not: [0,450], null: 'not', '': 0 },
  /* 397 */ { not: [398,450], null: 'not', '': 398 },
  /* 398 */ {
    enum: [399,181],
    '@': 400,
    '': 0
  },
  /* 399 */ { not: [0,450], null: 'not', '': 0 },
  /* 400 */ { '@': [400,780], '': 0 },
  'typeTypeOf',
  /* 402 */ ['mk',403,'type'],
  /* 403 */ ['mk',404,'of'],
  /* 404 */ [405,40],
  /* 405 */ { ':': ['c',406], '': 0 },
  /* 406 */ ['miA',407],
  /* 407 */ { '.': ['c',408], '': 0 },
  /* 408 */ ['miA',407],
  'typeRefOptArgs',
  /* 410 */ [411,40],
  /* 411 */ {
    ':': ['c',412],
    '(': ['c',415],
    '': 0
  },
  /* 412 */ ['miA',413],
  /* 413 */ { '.': ['c',414], '': 0 },
  /* 414 */ ['miA',413],
  /* 415 */ {
    Number: ['c',416],
    Id: 419,
  },
  /* 416 */ { ',': ['c',417], '': 418 },
  /* 417 */ {
    Number: ['c',416],
    floating: ['ck',416], variable: 'floating',
    ')': 418,
  },
  /* 418 */ ['g',421],
  /* 419 */ { Id: [420,428], '': 421 },
  /* 420 */ {
    ',': ['c',419],
    ')': 421,
  },
  /* 421 */ ['m',0,')'],
  'typeNamedArgsList',
  /* 423 */ ['m',424,'('],
  /* 424 */ { Id: [425,428], '': 426 },
  /* 425 */ {
    ',': ['c',424],
    ')': 426,
  },
  /* 426 */ ['m',0,')'],
  'typeNamedArg',
  /* 428 */ ['mi',429],
  /* 429 */ ['m',430,':'],
  /* 430 */ {
    Number: ['c',0],
    floating: ['ck',0], variable: 'floating',
  },
  'cardinality',
  /* 432 */ ['m',433,'['],
  /* 433 */ {
    '*': ['c',434],
    Number: ['c',436],
    '': 438
  },
  /* 434 */ { ',': ['c',435], '': 438 },
  /* 435 */ [438,440],
  /* 436 */ {
    ',': ['c',437],
    '..': [438,441],
    '': 438
  },
  /* 437 */ [438,440],
  /* 438 */ ['m',0,']'],
  'targetCardinality',
  /* 440 */ {
    '*': ['c',0],
    Number: ['c',441],
  },
  /* 441 */ { '..': ['c',442], '': 0 },
  /* 442 */ {
    '*': ['c',0],
    Number: ['c',0],
  },
  'nullabilityAndDefault',
  /* 444 */ {
    not: [445,450], null: 'not',
    default: ['ck',447],
  },
  /* 445 */ { default: ['ck',446], '': 0 },
  /* 446 */ [0,653],
  /* 447 */ [448,653],
  /* 448 */ { not: [0,450], null: 'not', '': 0 },
  'nullability',
  /* 450 */ {
    null: ['ck',0],
    not: ['ck',451],
  },
  /* 451 */ ['mk',0,'null'],
  'queryEOF',
  /* 453 */ [454,463],
  /* 454 */ { ';': ['c',455], '': 455 },
  /* 455 */ ['m',0,'EOF'],
  'projectionSpec',
  /* 457 */ ['mk',458,'projection'],
  /* 458 */ ['mk',459,'on'],
  /* 459 */ [460,523],
  /* 460 */ { '{': [461,569], '': 461 },
  /* 461 */ { excluding: [0,562], '': 0 },
  'queryExpression',
  /* 463 */ {
    '(': ['c',464],
    Id: [466,473],
  },
  /* 464 */ [465,463],
  /* 465 */ ['m',466,')'],
  /* 466 */ {
    intersect: ['ck',467],
    minus: ['ck',467], except: 'minus',
    union: ['ck',468],
    '': 470
  },
  /* 467 */ { distinct: ['ck',469], '': 469 },
  /* 468 */ { all: ['ck',469], distinct: 'all', '': 469 },
  /* 469 */ [466,463],
  /* 470 */ { limit: ['g',471], order: 'limit', '': 0 },
  /* 471 */ [0,625],
  'selectQuery',
  /* 473 */ ['mk',474,'select'],
  /* 474 */ {
    from: ['ck',475],
    all: ['ck',485,1], distinct: 'all',
    Id: 485, '#': 485, '(': 485, '*': 485, '+': 485, '-': 485, ':': 485, '?': 485, '@': 485, '{': 485, key: 485, not: 485, case: 485, cast: 485, null: 485, true: 485, false: 485, Number: 485, String: 485, exists: 485, QuotedLiteral: 485,
  },
  /* 475 */ [476,492],
  /* 476 */ { mixin: ['ck',477], '': 482 },
  /* 477 */ ['m',478,'{'],
  /* 478 */ { Id: [479,206], '': 480 },
  /* 479 */ {
    ';': ['c',478],
    '}': 480,
  },
  /* 480 */ ['m',481,'}'],
  /* 481 */ ['mk',482,'into'],
  /* 482 */ { all: ['ck',483], distinct: 'all', '': 483 },
  /* 483 */ { '{': [484,569], '': 484 },
  /* 484 */ { excluding: [490,562], '': 490 },
  /* 485 */ {
    '*': ['c',486],
    Id: [486,579], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', '@': 'Id', '{': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
  },
  /* 486 */ { ',': ['c',487], '': 488 },
  /* 487 */ {
    '*': ['c',486],
    Id: [486,579], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', '@': 'Id', '{': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
  },
  /* 488 */ ['mk',489,'from'],
  /* 489 */ [490,492],
  /* 490 */ { group: [0,613], where: 'group', having: 'group', '': 0 },
  'querySource',
  /* 492 */ [493,497],
  /* 493 */ { ',': 494, '': 0 },
  /* 494 */ { ',': ['c',495], '': 0 },
  /* 495 */ [494,497],
  'tableExpression',
  /* 497 */ {
    '(': [498,510],
    Id: [499,523],
  },
  /* 498 */ ['g',499],
  /* 499 */ {
    cross: ['ck',500],
    inner: ['ck',503],
    full: ['ck',502], left: 'full', right: 'full',
    join: ['ck',505],
    '': 0
  },
  /* 500 */ ['mk',501,'join'],
  /* 501 */ {
    '(': [499,510],
    Id: [499,523],
  },
  /* 502 */ { outer: ['ck',503], '': 503 },
  /* 503 */ { one: [504,517], many: 'one', exact: 'one', '': 504 },
  /* 504 */ ['mk',505,'join'],
  /* 505 */ ['g',506],
  /* 506 */ [507,497],
  /* 507 */ ['mk',508,'on'],
  /* 508 */ [499,645],
  'tableOrQueryParens',
  /* 510 */ ['m',511,'('],
  /* 511 */ {
    '(': [512,510],
    Id: [513,497],
    select: [513,463],
  },
  /* 512 */ {
    full: [513,498], join: 'full', left: 'full', cross: 'full', inner: 'full', right: 'full',
    limit: [513,466], minus: 'limit', order: 'limit', union: 'limit', except: 'limit', intersect: 'limit',
    '': 513
  },
  /* 513 */ ['m',514,')'],
  /* 514 */ {
    as: ['ck',515],
    Id: ['ci',0],
    '': 0
  },
  /* 515 */ ['mi',0],
  'joinCardinality',
  /* 517 */ {
    exact: ['ck',518],
    one: 518,
    many: ['ck',519],
  },
  /* 518 */ ['mk',519,'one'],
  /* 519 */ ['mk',520,'to'],
  /* 520 */ {
    exact: ['ck',521],
    one: 521,
    many: ['ck',0],
  },
  /* 521 */ ['mk',0,'one'],
  'fromRefWithOptAlias',
  /* 523 */ [524,530],
  /* 524 */ { ':': ['c',525], '': 526 },
  /* 525 */ [526,530],
  /* 526 */ {
    as: ['ck',527],
    Id: ['ci',0],
    '': 528
  },
  /* 527 */ ['mi',0],
  /* 528 */ ['g',0,[]],
  'fromPath',
  /* 530 */ ['mi',531],
  /* 531 */ { '(': [532,536], '[': '(', '': 532 },
  /* 532 */ { '.': ['c',533], '': 0 },
  /* 533 */ ['miA',534],
  /* 534 */ { '(': [532,536], '[': '(', '': 532 },
  'fromArgumentsAndFilter',
  /* 536 */ { '(': ['c',537], '': 541 },
  /* 537 */ { Id: 538 },
  /* 538 */ { Id: [539,543], '': 540 },
  /* 539 */ {
    ',': ['c',538],
    ')': 540,
  },
  /* 540 */ ['m',541,')'],
  /* 541 */ { '[': [0,547], '': 0 },
  'fromNamedArgument',
  /* 543 */ ['mi',544],
  /* 544 */ ['m',545,':'],
  /* 545 */ [0,653],
  'cardinalityAndFilter',
  /* 547 */ ['m',548,'['],
  /* 548 */ { Number: ['c',549], '': 550 },
  /* 549 */ ['m',550,':'],
  /* 550 */ [551,553],
  /* 551 */ ['m',0,']'],
  'filterClauses',
  /* 553 */ {
    where: ['ck',554],
    Id: 554, '#': 554, '(': 554, '+': 554, '-': 554, ':': 554, '?': 554, not: 554, case: 554, cast: 554, null: 554, true: 554, false: 554, Number: 554, String: 554, exists: 554, QuotedLiteral: 554,
    group: ['g',555,1], limit: 'group', order: 'group', having: 'group',
    '': 555
  },
  /* 554 */ [555,645],
  /* 555 */ { group: 556, '': 557 },
  /* 556 */ [557,619],
  /* 557 */ { having: ['ck',558], '': 559 },
  /* 558 */ [559,645],
  /* 559 */ { limit: 560, order: 560, '': 0 },
  /* 560 */ [0,625],
  'excludingClause',
  /* 562 */ ['mk',563,'excluding'],
  /* 563 */ ['m',564,'{'],
  /* 564 */ { Id: 565 },
  /* 565 */ { Id: ['ciA',566], '': 567 },
  /* 566 */ {
    ',': ['c',565],
    '}': 567,
  },
  /* 567 */ ['m',0,'}'],
  'selectItemsList',
  /* 569 */ ['m',570,'{'],
  /* 570 */ {
    '*': ['c',571],
    Id: [571,579], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', '@': 'Id', '{': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
    '': 572
  },
  /* 571 */ {
    ',': ['c',570],
    '}': 572,
  },
  /* 572 */ ['m',0,'}'],
  'nestedSelectItemsList',
  /* 574 */ ['m',575,'{'],
  /* 575 */ {
    '*': ['c',576],
    Id: [576,579], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', '@': 'Id', '{': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
    '': 577
  },
  /* 576 */ {
    ',': ['c',575],
    '}': 577,
  },
  /* 577 */ ['m',0,'}'],
  'selectItemDef',
  /* 579 */ { '@': [579,783], '': 580 },
  /* 580 */ { virtual: ['ck',581,1], '': 581 },
  /* 581 */ { key: ['ck',582], '': 582 },
  /* 582 */ {
    Id: [583,653], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
    '{': [590,574],
  },
  /* 583 */ {
    as: ['ck',584],
    Id: ['ci',585],
    '': 585
  },
  /* 584 */ ['mi',585],
  /* 585 */ {
    '{': 586,
    '.': ['c',588],
    '': 593
  },
  /* 586 */ [587,574],
  /* 587 */ { excluding: [593,562], '': 593 },
  /* 588 */ {
    '{': [589,574],
    '*': ['c',593],
  },
  /* 589 */ { excluding: [593,562], '': 593 },
  /* 590 */ { excluding: [591,562], '': 591 },
  /* 591 */ ['mk',592,'as'],
  /* 592 */ ['mi',593],
  /* 593 */ ['g',594],
  /* 594 */ { '@': [594,786], '': 595 },
  /* 595 */ { ':': ['c',596], '': 0 },
  /* 596 */ {
    type: [610,402,1],
    localized: ['ck',597,1],
    Id: 597,
    redirected: ['ck',598,1],
    association: ['ck',602,1],
    composition: ['ck',604,1],
  },
  /* 597 */ [610,410],
  /* 598 */ ['mk',599,'to'],
  /* 599 */ [600,40],
  /* 600 */ {
    on: ['ck',601],
    '{': [610,196],
    '': 610
  },
  /* 601 */ [610,645],
  /* 602 */ { '[': [603,432], '': 603 },
  /* 603 */ ['mk',606,'to'],
  /* 604 */ { '[': [605,432], '': 605 },
  /* 605 */ ['mk',606,'of'],
  /* 606 */ { one: ['ck',607,1], many: 'one', '': 607 },
  /* 607 */ [608,40],
  /* 608 */ ['mk',609,'on'],
  /* 609 */ [610,645],
  /* 610 */ ['g',611],
  /* 611 */ { '@': [611,780], '': 0 },
  'whereGroupByHaving',
  /* 613 */ { where: ['ck',614], '': 615 },
  /* 614 */ [615,645],
  /* 615 */ { group: [616,619], '': 616 },
  /* 616 */ { having: ['ck',617], '': 0 },
  /* 617 */ [0,645],
  'groupByClause',
  /* 619 */ ['mk',620,'group'],
  /* 620 */ ['mk',621,'by'],
  /* 621 */ [622,653],
  /* 622 */ { ',': ['c',623], '': 0 },
  /* 623 */ [622,653],
  'orderByLimitOffset',
  /* 625 */ { order: [626,631], '': 626 },
  /* 626 */ { limit: ['ck',627], '': 0 },
  /* 627 */ [628,653],
  /* 628 */ { offset: ['ck',629], '': 0 },
  /* 629 */ [0,653],
  'orderByClause',
  /* 631 */ ['mk',632,'order'],
  /* 632 */ ['mk',633,'by'],
  /* 633 */ [634,637],
  /* 634 */ { ',': ['c',635], '': 0 },
  /* 635 */ [634,637],
  'orderByExpression',
  /* 637 */ [638,653],
  /* 638 */ { asc: ['ck',639], desc: 'asc', '': 639 },
  /* 639 */ { nulls: ['ck',640], '': 0 },
  /* 640 */ { last: ['ck',0], first: 'last' },
  'conditionEOF',
  /* 642 */ [643,653],
  /* 643 */ ['m',0,'EOF'],
  'condition',
  /* 645 */ [0,653],
  'valuePath',
  /* 647 */ ['mi',648],
  /* 648 */ { '(': [649,714], '[': '(', '': 649 },
  /* 649 */ { '.': ['c',650], '': 0 },
  /* 650 */ ['miA',651],
  /* 651 */ { '(': [649,714], '[': '(', '': 649 },
  'expression',
  /* 653 */ {
    '(': [654,681],
    '#': [664,777], null: '#', true: '#', false: '#', Number: '#', String: '#', QuotedLiteral: '#',
    ':': ['c',655],
    '?': ['c',664],
    Id: [657,647],
    new: [664,693,1],
    exists: ['ck',660],
    case: [664,696],
    cast: [664,707],
    '+': ['c',663], '-': '+',
    not: ['ck',663],
  },
  /* 654 */ ['g',664],
  /* 655 */ {
    Id: ['ciA',656],
    Number: ['c',664],
  },
  /* 656 */ { '.': [664,649], '': 664 },
  /* 657 */ { over: ['ck',658], '': 659 },
  /* 658 */ [659,741],
  /* 659 */ ['g',664],
  /* 660 */ {
    '(': ['c',661],
    Id: [664,647],
    '?': ['c',664],
  },
  /* 661 */ [662,463],
  /* 662 */ ['m',664,')'],
  /* 663 */ [664,653],
  /* 664 */ {
    '*': ['c',668], '/': '*',
    '+': ['c',668], '-': '+',
    '||': ['c',668],
    and: ['ck',668],
    or: ['ck',668],
    '?': ['c',665],
    '<': ['c',667], '=': '<', '>': '<', '!=': '<', '<=': '<', '<>': '<', '>=': '<',
    is: ['ck',669],
    not: ['ck',671],
    in: ['g',671], like: 'in', between: 'in',
    '': 0
  },
  /* 665 */ [666,653],
  /* 666 */ ['m',668,':'],
  /* 667 */ { all: ['ck',668], any: 'all', some: 'all', '': 668 },
  /* 668 */ [679,653],
  /* 669 */ { not: ['ck',670], '': 670 },
  /* 670 */ ['mk',679,'null'],
  /* 671 */ {
    between: ['ck',672],
    in: ['ck',675],
    like: ['ck',676],
  },
  /* 672 */ [673,653],
  /* 673 */ ['mk',674,'and'],
  /* 674 */ [679,653],
  /* 675 */ [679,653],
  /* 676 */ [677,653],
  /* 677 */ { escape: ['ck',678], '': 679 },
  /* 678 */ [679,653],
  /* 679 */ ['g',664],
  'expressionOrQueryParens',
  /* 681 */ ['m',682,'('],
  /* 682 */ {
    '(': [683,681],
    Id: [685,653], '#': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', not: 'Id', case: 'Id', cast: 'Id', null: 'Id', true: 'Id', false: 'Id', Number: 'Id', String: 'Id', exists: 'Id', QuotedLiteral: 'Id',
    select: [686,463],
  },
  /* 683 */ {
    '*': [684,654], '+': '*', '-': '*', '/': '*', '<': '*', '=': '*', '>': '*', '?': '*', '!=': '*', '<=': '*', '<>': '*', '>=': '*', in: '*', is: '*', or: '*', '||': '*', and: '*', not: '*', like: '*', between: '*',
    ',': [686,688],
    limit: [686,466], minus: 'limit', order: 'limit', union: 'limit', except: 'limit', intersect: 'limit',
    '': 686
  },
  /* 684 */ { ',': [686,688], '': 686 },
  /* 685 */ { ',': [686,688], '': 686 },
  /* 686 */ ['m',0,')'],
  'continueExpressionslist',
  /* 688 */ ['m',689,','],
  /* 689 */ { Id: 690, '#': 690, '(': 690, '+': 690, '-': 690, ':': 690, '?': 690, not: 690, case: 690, cast: 690, null: 690, true: 690, false: 690, Number: 690, String: 690, exists: 690, QuotedLiteral: 690 },
  /* 690 */ { Id: [691,653], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', not: 'Id', case: 'Id', cast: 'Id', null: 'Id', true: 'Id', false: 'Id', Number: 'Id', String: 'Id', exists: 'Id', QuotedLiteral: 'Id', '': 0 },
  /* 691 */ { ',': ['c',690], '': 0 },
  'newAndValuePath',
  /* 693 */ ['mk',694,'new'],
  /* 694 */ [0,647],
  'caseExpression',
  /* 696 */ ['mk',697,'case'],
  /* 697 */ {
    Id: [698,653], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', not: 'Id', case: 'Id', cast: 'Id', null: 'Id', true: 'Id', false: 'Id', Number: 'Id', String: 'Id', exists: 'Id', QuotedLiteral: 'Id',
    when: ['g',698,1],
    '': 698
  },
  /* 698 */ { when: 699 },
  /* 699 */ { when: ['ck',700], '': 703 },
  /* 700 */ [701,653],
  /* 701 */ ['mk',702,'then'],
  /* 702 */ [699,653],
  /* 703 */ { else: ['ck',704], '': 705 },
  /* 704 */ [705,653],
  /* 705 */ ['mk',0,'end'],
  'castFunction',
  /* 707 */ ['mk',708,'cast'],
  /* 708 */ ['m',709,'('],
  /* 709 */ [710,653],
  /* 710 */ ['mk',711,'as'],
  /* 711 */ [712,410],
  /* 712 */ ['m',0,')'],
  'argumentsAndFilter',
  /* 714 */ { '(': ['c',715], '': 734 },
  /* 715 */ { Id: ['ciA',722], '': 716 },
  /* 716 */ { Id: [717,736], '#': 'Id', '(': 'Id', '*': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', Id_all: 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id', '': 733 },
  /* 717 */ { ',': ['c',718], '': 719 },
  /* 718 */ {
    Id: [717,736], '#': 'Id', '(': 'Id', '*': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', not: 'Id', case: 'Id', cast: 'Id', null: 'Id', true: 'Id', false: 'Id', Id_all: 'Id', Number: 'Id', String: 'Id', exists: 'Id', QuotedLiteral: 'Id',
    ')': ['g',719,1], order: ')',
  },
  /* 719 */ { order: ['ck',720], '': 733 },
  /* 720 */ ['mk',721,'by'],
  /* 721 */ [733,756],
  /* 722 */ {
    ':': ['c',723],
    '=>': ['c',728],
  },
  /* 723 */ [724,653],
  /* 724 */ { ',': ['c',725], '': 733 },
  /* 725 */ {
    Id: ['ciA',726],
    ')': 733,
  },
  /* 726 */ ['m',727,':'],
  /* 727 */ [724,653],
  /* 728 */ [729,653],
  /* 729 */ { ',': ['c',730], '': 733 },
  /* 730 */ {
    Id: ['ciA',731],
    ')': 733,
  },
  /* 731 */ ['m',732,'=>'],
  /* 732 */ [729,653],
  /* 733 */ ['m',734,')'],
  /* 734 */ { '[': [0,547], '': 0 },
  'funcExpression',
  /* 736 */ {
    ' lookahead': 'lGenericIntroOrExpr',
    Id: [738,653], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
    GenericExpr: ['ckA',738],
    GenericIntro: ['ckA',737],
  },
  /* 737 */ [738,653],
  /* 738 */ {
    ' lookahead': 'lGenericSeparator',
    GenericSeparator: ['ckA',739],
    '': 0
  },
  /* 739 */ {
    ' lookahead': 'lGenericExpr',
    Id: [738,653], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', ':': 'Id', '?': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
    GenericExpr: ['ckA',738],
  },
  'overClause',
  /* 741 */ ['m',742,'('],
  /* 742 */ { partition: ['ck',743], '': 745 },
  /* 743 */ ['mk',744,'by'],
  /* 744 */ [745,752],
  /* 745 */ { order: ['ck',746], '': 748 },
  /* 746 */ ['mk',747,'by'],
  /* 747 */ [748,756],
  /* 748 */ { rows: ['ck',749], '': 750 },
  /* 749 */ [750,765],
  /* 750 */ ['m',0,')'],
  'expressionsAsXpr',
  /* 752 */ [753,653],
  /* 753 */ { ',': ['c',754], '': 0 },
  /* 754 */ [753,653],
  'orderByClauseAsXpr',
  /* 756 */ [757,760],
  /* 757 */ { ',': ['c',758], '': 0 },
  /* 758 */ [757,760],
  'orderBySpecAsXpr',
  /* 760 */ [761,653],
  /* 761 */ { asc: ['ck',762], desc: 'asc', '': 762 },
  /* 762 */ { nulls: ['ck',763], '': 0 },
  /* 763 */ { last: ['ck',0], first: 'last' },
  'windowFrameClause',
  /* 765 */ {
    unbounded: ['ck',766],
    Number: ['c',766],
    current: ['ck',767],
    between: ['ck',768],
  },
  /* 766 */ ['mk',0,'preceding'],
  /* 767 */ ['mk',0,'row'],
  /* 768 */ [769,772],
  /* 769 */ ['mk',770,'and'],
  /* 770 */ [0,772],
  'windowFrameBoundSpec',
  /* 772 */ {
    unbounded: ['ck',773],
    Number: ['c',773],
    current: ['ck',775],
  },
  /* 773 */ {
    following: ['ck',774],
    preceding: ['ck',774],
  },
  /* 774 */ ['g',0,[]],
  /* 775 */ ['mk',0,'row'],
  'literalValue',
  /* 777 */ {
    '#': ['c',778],
    null: ['ck',0],
    true: ['ck',0], false: 'true',
    Number: ['c',0],
    String: ['c',0],
    QuotedLiteral: ['c',0],
  },
  /* 778 */ ['mi',0],
  'annoAssignStd',
  /* 780 */ ['m',781,'@'],
  /* 781 */ {
    '(': [0,789],
    Id: [0,794],
  },
  'annoAssignCol',
  /* 783 */ ['m',784,'@'],
  /* 784 */ {
    '(': [0,789],
    Id: [0,794],
  },
  'annoAssignMid',
  /* 786 */ ['m',787,'@'],
  /* 787 */ {
    '(': [0,789],
    Id: [0,798],
  },
  'annoAssignParen',
  /* 789 */ ['m',790,'('],
  /* 790 */ { Id: [791,794], '': 792 },
  /* 791 */ {
    ',': ['c',790],
    ')': 792,
  },
  /* 792 */ ['m',0,')'],
  'annoAssignBase',
  /* 794 */ [795,798],
  /* 795 */ { ':': ['c',796], '': 0 },
  /* 796 */ [0,820],
  'annoNamePath',
  /* 798 */ ['miA',799],
  /* 799 */ { '.': ['c',800], '': 802 },
  /* 800 */ {
    Id: ['ciA',799],
    '@': ['c',801],
  },
  /* 801 */ ['miA',799],
  /* 802 */ { '#': [0,811], '': 0 },
  'annoPath',
  /* 804 */ {
    Id: ['ciA',806],
    '@': ['c',805],
  },
  /* 805 */ ['miA',806],
  /* 806 */ { '.': ['c',807], '': 809 },
  /* 807 */ {
    Id: ['ciA',806],
    '@': ['c',808],
  },
  /* 808 */ ['miA',806],
  /* 809 */ { '#': [0,811], '': 0 },
  'annoPathVariant',
  /* 811 */ ['m',812,'#'],
  /* 812 */ ['miA',813],
  /* 813 */ { '.': ['c',814], '': 0 },
  /* 814 */ ['miA',813],
  'annoStructValue',
  /* 816 */ [817,804],
  /* 817 */ { ':': ['c',818], '': 0 },
  /* 818 */ [0,820],
  'annoValue',
  /* 820 */ {
    '#': [0,777], null: '#', true: '#', false: '#', Number: '#', String: '#', QuotedLiteral: '#',
    '+': ['c',821], '-': '+',
    Id: [0,804], '@': 'Id',
    '{': ['c',822],
    '[': ['c',826],
    '(': ['c',833],
  },
  /* 821 */ ['m',0,'Number'],
  /* 822 */ { Id: [823,816], '@': 'Id', '': 824 },
  /* 823 */ {
    ',': ['c',822],
    '}': 824,
  },
  /* 824 */ ['g',825],
  /* 825 */ ['m',0,'}'],
  /* 826 */ {
    Id: [831,820], '#': 'Id', '(': 'Id', '+': 'Id', '-': 'Id', '@': 'Id', '[': 'Id', '{': 'Id', Number: 'Id', String: 'Id', QuotedLiteral: 'Id',
    '...': ['c',827],
    '': 832
  },
  /* 827 */ { up: ['ck',828], '': 830 },
  /* 828 */ ['mk',829,'to'],
  /* 829 */ [830,820],
  /* 830 */ ['g',831],
  /* 831 */ {
    ',': ['c',826],
    ']': 832,
  },
  /* 832 */ ['m',0,']'],
  /* 833 */ [834,645],
  /* 834 */ ['m',0,')'],
];
class CdlParser extends AstBuildingParser {
  constructor(lexer,...args) { super(lexer,keywords,table,...args) }
  start($,$next) {
    $.source??=new XsnSource( 'cdl' );
    this.rule_(1,$next);
    for(;;) switch(this.s) {
      case 1: switch(this.lk()) {
        case 'namespace': this.gc(3,'namespaceRestriction') && this.namespaceDeclaration({source:$.source},2); continue;
        case 'using': this.usingDeclaration({source:$.source},2); continue;
        case '@': case 'type': case 'view': case 'event': case 'action': case 'aspect': case 'define': case 'entity': case 'extend': case 'context': case 'service': case 'abstract': case 'annotate': case 'function': case 'annotation': if(this.artifactDefOrExtend({outer:$.source},2)) {this.namespaceRestriction();} continue;
        default: this.s=3; continue;
      }
      case 2: switch(this.l()) {
        case ';': this.c(1); continue;
        case 'EOF': this.s=3; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(1); continue;
        default: this.e(); continue;
      }
      case 3: if(this.m(0,'EOF')) { this.docComment( null ); } continue;
      default: return this.exit_();
    }
  }
  artifactsBlock($,$next) {
    this.rule_(5,$next);
    for(;;) switch(this.s) {
      case 5: if(this.m(6,'{')) {this.vocabularyRestriction(); $.art.artifacts = this.createDict( $.start ); $.art.extensions = []; } continue;
      case 6: switch(this.l()) {
        case 'Id': case '@': this.artifactDefOrExtend({outer:$.art},7); continue;
        default: this.s=8; continue;
      }
      case 7: switch(this.l()) {
        case ';': this.c(6); continue;
        case '}': this.s=8; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(6); continue;
        default: this.e(); continue;
      }
      case 8: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.art.artifacts ); } continue;
      default: return this.exit_();
    }
  }
  artifactDefOrExtend($,$next) {
    this.rule_(10,$next);
    let art=new XsnArtifact();
    { art.location = this.startLocation();
this.docComment( art ); }
    for(;;) switch(this.s) {
      case 10: switch(this.l()) {
        case '@': this.annoAssignStd({art},10); continue;
        default: this.s=11; continue;
      }
      case 11: switch(this.lk()) {
        case 'define': this.ck(12); continue;
        case 'type': case 'view': case 'event': case 'action': case 'aspect': case 'entity': case 'context': case 'service': case 'abstract': case 'function': case 'annotation': this.s=12; continue;
        case 'extend': if(this.ec('extensionRestriction') && this.ck(13)) { art.kind = 'extend'; } continue;
        case 'annotate': this.ec('extensionRestriction') && this.ck(14); continue;
        default: this.e(); continue;
      }
      case 12: switch(this.lk()) {
        case 'service': this.serviceDef({art,outer:$.outer},0); continue;
        case 'context': this.contextDef({art,outer:$.outer},0); continue;
        case 'annotation': this.ec('vocabularyRestriction') && this.annotationDef({art,outer:$.outer},0); continue;
        case 'type': this.typeDef({art,outer:$.outer},0); continue;
        case 'aspect': case 'abstract': this.aspectDef({art,outer:$.outer},0); continue;
        case 'entity': this.entityDef({art,outer:$.outer},0); continue;
        case 'view': this.viewDef({art,outer:$.outer},0); continue;
        case 'event': this.eventDef({art,outer:$.outer},0); continue;
        case 'action': this.actionMainDef({art,outer:$.outer},0); continue;
        case 'function': this.functionMainDef({art,outer:$.outer},0); continue;
        default: this.e(); continue;
      }
      case 13: switch(this.lk()) {
        case 'Id': this.extendArtifact({art,outer:$.outer},0); continue;
        case 'service': this.lP() && this.extendService({art,outer:$.outer},0); continue;
        case 'context': this.lP() && this.extendContext({art,outer:$.outer},0); continue;
        case 'type': this.lP() && this.extendType({art,outer:$.outer},0); continue;
        case 'aspect': case 'entity': this.lP() && this.extendEntityOrAspect({art,outer:$.outer},0); continue;
        case 'projection': this.lP() && this.extendProjection({art,outer:$.outer},0); continue;
        default: this.ei(); continue;
      }
      case 14: this.annotateArtifact({art,outer:$.outer},0); continue;
      default: return this.exit_();
    }
  }
  namespaceDeclaration($,$next) {
    this.rule_(16,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 16: this.mk(17,'namespace'); continue;
      case 17: if(this.namePath(_={category:'Namespace'},0)) {name=_.name; $.source.namespace ??= { kind: 'namespace', name: name }; } continue;
      default:
      this.attachLocation( $.source.namespace );
      return this.exit_();
    }
  }
  usingDeclaration($,$next) {
    this.rule_(19,$next);
    let decl={ kind: 'using' };
    for(;;) switch(this.s) {
      case 19: this.mk(20,'using'); continue;
      case 20: switch(this.lk()) {
        case 'from': this.ck(21); continue;
        case 'Id': this.usingProxy({outer:$.source,proxy:decl},22); continue;
        case '{': this.s=24;{ $.source.usings.push( decl ); } continue;
        default: this.ei(); continue;
      }
      case 21: if(this.m(0,'String')) { $.source.dependencies.push( this.quotedLiteral() ); } continue;
      case 22: switch(this.lk()) {
        case 'from': this.ck(23); continue;
        default: this.gr([';']); continue;
      }
      case 23: if(this.m(0,'String')) { $.source.dependencies.push( decl.fileDep = this.quotedLiteral() ); } continue;
      case 24: if(this.m(25,'{')) { decl.usings = this.createArray(); } continue;
      case 25: switch(this.lk()) {
        case 'Id': this.s=26; continue;
        default: this.ei(); continue;
      }
      case 26: switch(this.l()) {
        case 'Id': this.usingProxy({outer:decl,proxy:{ kind: 'using' }},27); continue;
        default: this.s=28; continue;
      }
      case 27: switch(this.l()) {
        case ',': this.c(26); continue;
        case '}': this.s=28; continue;
        default: this.e(); continue;
      }
      case 28: if(this.m(29,'}')) {this.afterBrace(); this.finalizeDictOrArray( decl.usings ); } continue;
      case 29: switch(this.lk()) {
        case 'from': this.ck(30); continue;
        default: this.gr([';']); continue;
      }
      case 30: if(this.m(0,'String')) { $.source.dependencies.push( decl.fileDep = this.quotedLiteral() ); } continue;
      default:
      this.attachLocation( decl );
      return this.exit_();
    }
  }
  usingProxy($,$next) {
    this.rule_(32,$next);
    let extern; let _;
    for(;;) switch(this.s) {
      case 32: if(this.simplePath(_={category:'global'},33)) {extern=_.ref; $.proxy.extern = extern; $.outer.usings.push( $.proxy ); } continue;
      case 33: switch(this.lk()) {
        case 'as': this.ck(34); continue;
        default: if(this.gr([])) { this.classifyImplicitName( 'Using' ); } continue;
      }
      case 34: if(this.mi(0,'UsingAlias')) { $.proxy.name = this.identAst(); } continue;
      default:
      this.attachLocation( $.proxy );
      return this.exit_();
    }
  }
  namePath($,$next) {
    $.name??=new XsnName();
    this.rule_(36,$next);
    for(;;) switch(this.s) {
      case 36: if(this.mi(37,$.category)) { $.name.path = [ this.identAst() ]; } continue;
      case 37: switch(this.l()) {
        case '.': this.c(38); continue;
        default: this.gr(['@']); continue;
      }
      case 38: if(this.miA(37,$.category)) { $.name.path.push( this.identAst() ); } continue;
      default:
      this.attachLocation( $.name );
      return this.exit_();
    }
  }
  simplePath($,$next) {
    $.ref??={};
    this.rule_(40,$next);
    for(;;) switch(this.s) {
      case 40: if(this.mi(41,$.category)) { $.ref.path = [ this.identAst() ]; } continue;
      case 41: switch(this.l()) {
        case '.': this.c(42); continue;
        default: this.gr([]); continue;
      }
      case 42: if(this.miA(41,$.category)) { $.ref.path.push( this.identAst() ); } continue;
      default:
      this.attachLocation( $.ref );
      return this.exit_();
    }
  }
  serviceDef($,$next) {
    this.rule_(44,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 44: this.mk(45,'service'); continue;
      case 45: if(this.namePath(_={category:'Service'},46)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'service', name );
this.docComment( $.art ); } continue;
      case 46: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},46); continue;
        default: this.s=47; continue;
      }
      case 47: switch(this.l()) {
        case '{': this.artifactsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  contextDef($,$next) {
    this.rule_(49,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 49: this.mk(50,'context'); continue;
      case 50: if(this.namePath(_={category:'Context'},51)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'context', name );
this.docComment( $.art ); } continue;
      case 51: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},51); continue;
        default: this.s=52; continue;
      }
      case 52: switch(this.l()) {
        case '{': this.artifactsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  annotationDef($,$next) {
    this.rule_(54,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 54: this.mk(55,'annotation'); continue;
      case 55: if(this.namePath(_={category:'AnnoDef'},56)) {name=_.name; this.addDef( $.art, $.outer, ($.outer.kind === 'source' ? 'vocabularies' : 'artifacts'), 'annotation', name );
this.docComment( $.art ); } continue;
      case 56: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},56); continue;
        default: this.s=57; continue;
      }
      case 57: this.typeOrIncludesSpec({art:$.art},0); continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  typeDef($,$next) {
    this.rule_(59,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 59: this.mk(60,'type'); continue;
      case 60: if(this.namePath(_={category:'Type'},61)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'type', name );
this.docComment( $.art ); } continue;
      case 61: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},61); continue;
        default: this.s=62; continue;
      }
      case 62: this.typeOrIncludesSpec({art:$.art},0); continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  aspectDef($,$next) {
    this.rule_(64,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 64: switch(this.lk()) {
        case 'aspect': this.ck(66); continue;
        case 'abstract': if(this.ck(65)) { this.warning( 'syntax-deprecated-abstract', this.lb().location ); } continue;
        default: this.e(); continue;
      }
      case 65: this.mk(66,'entity'); continue;
      case 66: if(this.namePath(_={category:'Type'},67)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'aspect', name );
this.docComment( $.art ); } continue;
      case 67: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},67); continue;
        default: this.s=68; continue;
      }
      case 68: switch(this.l()) {
        case '{': this.elementsBlock({art:$.art},69); continue;
        case ':': this.c(70); continue;
        default: this.gr([';']); continue;
      }
      case 69: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 70: this.aspectColonSpec({art:$.art},0); continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  aspectColonSpec($,$next) {
    this.rule_(72,$next);
    let incl; let _;
    for(;;) switch(this.s) {
      case 72: switch(this.l()) {
        case 'Id': if(this.simplePath(_={category:'artref'},73)) {incl=_.ref; $.art.includes ??= []; $.art.includes.push( incl ); } continue;
        default: this.s=74; continue;
      }
      case 73: switch(this.l()) {
        case ',': this.c(72); continue;
        default: this.s=74; continue;
      }
      case 74: switch(this.l()) {
        case '{': this.elementsBlock({art:$.art},75); continue;
        default: this.gr([';']); continue;
      }
      case 75: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default: return this.exit_();
    }
  }
  entityDef($,$next) {
    this.rule_(77,$next);
    let name; let incl; let query; let _;
    for(;;) switch(this.s) {
      case 77: this.mk(78,'entity'); continue;
      case 78: if(this.namePath(_={category:'Entity'},79)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'entity', name );
this.docComment( $.art ); } continue;
      case 79: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},79); continue;
        default: this.s=80; continue;
      }
      case 80: switch(this.l()) {
        case '(': this.paramsList({art:$.art},81); continue;
        default: this.s=81; continue;
      }
      case 81: switch(this.lk()) {
        case ':': if(this.c(82)) { $.art.includes ??= []; } continue;
        case '{': this.s=85; continue;
        case 'as': this.ck(86); continue;
        default: this.e(); continue;
      }
      case 82: switch(this.lk()) {
        case 'Id': this.s=83; continue;
        default: this.ei(); continue;
      }
      case 83: switch(this.l()) {
        case 'Id': if(this.simplePath(_={category:'artref'},84)) {incl=_.ref; $.art.includes.push( incl ); } continue;
        default: this.s=85; continue;
      }
      case 84: switch(this.l()) {
        case ',': this.c(83); continue;
        case '{': this.s=85; continue;
        default: this.e(); continue;
      }
      case 85: this.elementsBlock({art:$.art},89); continue;
      case 86: switch(this.lk()) {
        case '(': case 'select': if(this.queryExpression(_={},89)) {query=_.expr; $.art.query = query; $.art.$syntax = 'entity'; } continue;
        case 'projection': if(this.projectionSpec(_={},87)) {query=_.query; $.art.query = query; $.art.$syntax = 'projection'; } continue;
        default: this.e(); continue;
      }
      case 87: switch(this.lk()) {
        case 'group': case 'where': case 'having': this.whereGroupByHaving({query},88); continue;
        default: this.s=88; continue;
      }
      case 88: switch(this.lk()) {
        case 'limit': case 'order': this.orderByLimitOffset({query},89); continue;
        default: this.s=89; continue;
      }
      case 89: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  viewDef($,$next) {
    this.rule_(91,$next);
    let name; let query; let _;
    for(;;) switch(this.s) {
      case 91: this.mk(92,'view'); continue;
      case 92: if(this.namePath(_={category:'Entity'},93)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'entity', name );
this.docComment( $.art ); } continue;
      case 93: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},93); continue;
        default: this.s=94; continue;
      }
      case 94: switch(this.lk()) {
        case '(': this.paramsList({art:$.art},100); continue;
        case 'with': this.ck(95); continue;
        default: this.s=100; continue;
      }
      case 95: if(this.mk(96,'parameters')) { $.art.params = this.createDict(); } continue;
      case 96: this.paramDef({outer:$.art},97); continue;
      case 97: switch(this.l()) {
        case ',': this.c(98); continue;
        default: this.s=99; continue;
      }
      case 98: this.paramDef({outer:$.art},97); continue;
      case 99: this.s=100;{ this.finalizeDictOrArray( $.art.params ); } continue;
      case 100: this.mk(101,'as'); continue;
      case 101: if(this.queryExpression(_={},0)) {query=_.expr; $.art.query = query; $.art.$syntax = 'view'; } continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  eventDef($,$next) {
    this.rule_(103,$next);
    let name; let incl; let query; let _;
    for(;;) switch(this.s) {
      case 103: this.mk(104,'event'); continue;
      case 104: if(this.namePath(_={category:'Event'},105)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'event', name );
this.docComment( $.art ); } continue;
      case 105: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},105); continue;
        default: this.s=106; continue;
      }
      case 106: switch(this.l()) {
        case '{': this.elementsBlock({art:$.art},0); continue;
        case ':': this.c(107); continue;
        default: this.e(); continue;
      }
      case 107: switch(this.lk()) {
        case '{': this.elementsBlock({art:$.art},0); continue;
        case 'Id': if(this.simplePath(_={category:'artref'},108)) {incl=_.ref; $.art.type = incl; } continue;
        case 'projection': if(this.lP() && this.projectionSpec(_={},0)) {query=_.query; $.art.query = query; $.art.$syntax = 'projection'; } continue;
        default: this.ei(); continue;
      }
      case 108: switch(this.l()) {
        case ',': case '{': this.s=109;{ $.art.includes = [ $.art.type ]; delete $.art.type; } continue;
        default: this.s=113;{ this.docComment( $.art ); } continue;
      }
      case 109: switch(this.l()) {
        case ',': this.c(110); continue;
        default: this.s=112; continue;
      }
      case 110: switch(this.l()) {
        case 'Id': if(this.simplePath(_={category:'artref'},111)) {incl=_.ref; $.art.includes.push( incl ); } continue;
        default: this.s=112; continue;
      }
      case 111: switch(this.l()) {
        case ',': this.c(110); continue;
        case '{': this.s=112; continue;
        default: this.e(); continue;
      }
      case 112: this.elementsBlock({art:$.art},0); continue;
      case 113: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},113); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  actionMainDef($,$next) {
    this.rule_(115,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 115: this.mk(116,'action'); continue;
      case 116: if(this.namePath(_={category:'Action'},117)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'action', name );
this.docComment( $.art ); } continue;
      case 117: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},117); continue;
        default: this.s=118; continue;
      }
      case 118: this.paramsList({art:$.art},119); continue;
      case 119: switch(this.lk()) {
        case 'returns': this.returnsSpec({outer:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  functionMainDef($,$next) {
    this.rule_(121,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 121: this.mk(122,'function'); continue;
      case 122: if(this.namePath(_={category:'Action'},123)) {name=_.name; this.addDef( $.art, $.outer, 'artifacts', 'function', name );
this.docComment( $.art ); } continue;
      case 123: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},123); continue;
        default: this.s=124; continue;
      }
      case 124: this.paramsList({art:$.art},125); continue;
      case 125: this.returnsSpec({outer:$.art},0); continue;
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  actionsBlock($,$next) {
    this.rule_(127,$next);
    for(;;) switch(this.s) {
      case 127: if(this.mk(128,'actions')) { $.art.actions = this.createDict(); } continue;
      case 128: this.m(129,'{'); continue;
      case 129: switch(this.l()) {
        case 'Id': case '@': this.boundActionFunctionDef({outer:$.art},130); continue;
        default: this.s=131; continue;
      }
      case 130: switch(this.l()) {
        case ';': this.c(129); continue;
        case '}': this.s=131; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(129); continue;
        default: this.e(); continue;
      }
      case 131: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.art.actions ); } continue;
      default: return this.exit_();
    }
  }
  boundActionFunctionDef($,$next) {
    this.rule_(133,$next);
    let art=new XsnArtifact();
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 133: switch(this.l()) {
        case '@': this.annoAssignStd({art},133); continue;
        default: this.s=134; continue;
      }
      case 134: switch(this.lk()) {
        case 'action': this.ck(135); continue;
        case 'function': this.ck(139); continue;
        default: this.e(); continue;
      }
      case 135: if(this.mi(136,'BoundAction')) { this.addDef( art, $.outer, 'actions', 'action', this.identAst() );
this.docComment( art ); } continue;
      case 136: switch(this.l()) {
        case '@': this.annoAssignMid({art},136); continue;
        default: this.s=137; continue;
      }
      case 137: this.paramsList({art},138); continue;
      case 138: switch(this.lk()) {
        case 'returns': this.returnsSpec({outer:art},0); continue;
        default: this.gr([';','@','}','action','function']); continue;
      }
      case 139: if(this.mi(140,'BoundAction')) { this.addDef( art, $.outer, 'actions', 'function', this.identAst() );
this.docComment( art ); } continue;
      case 140: switch(this.l()) {
        case '@': this.annoAssignMid({art},140); continue;
        default: this.s=141; continue;
      }
      case 141: this.paramsList({art},142); continue;
      case 142: this.returnsSpec({outer:art},0); continue;
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  paramsList($,$next) {
    this.rule_(144,$next);
    for(;;) switch(this.s) {
      case 144: if(this.m(145,'(')) { $.art.params = this.createDict(); } continue;
      case 145: switch(this.l()) {
        case 'Id': case '@': this.paramDef({outer:$.art},146); continue;
        default: this.s=147; continue;
      }
      case 146: switch(this.l()) {
        case ',': this.c(145); continue;
        case ')': this.s=147; continue;
        default: this.e(); continue;
      }
      case 147: if(this.m(0,')')) { this.finalizeDictOrArray( $.art.params ); } continue;
      default: return this.exit_();
    }
  }
  paramDef($,$next) {
    this.rule_(149,$next);
    let art=new XsnArtifact();
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 149: switch(this.l()) {
        case '@': this.annoAssignStd({art},149); continue;
        default: this.s=150; continue;
      }
      case 150: if(this.miA(151,'Param')) { this.addDef( art, $.outer, 'params', 'param', this.identAst() );
this.docComment( art ); } continue;
      case 151: switch(this.l()) {
        case '@': this.annoAssignMid({art},151); continue;
        default: this.s=152; continue;
      }
      case 152: switch(this.l()) {
        case '{': this.elementsBlock({art},153); continue;
        case ':': this.c(154); continue;
        default: this.e(); continue;
      }
      case 153: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art},0); continue;
        default: this.gr([',']); continue;
      }
      case 154: this.typeExpression({art},0); continue;
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  returnsSpec($,$next) {
    this.rule_(156,$next);
    let art=new XsnArtifact();
    let ret;
    for(;;) switch(this.s) {
      case 156: if(this.mk(157,'returns')) {ret=this.lb();this.elementRestriction(0,'default'); art.kind = 'param'; $.outer.returns = art;
this.docComment( art ); } continue;
      case 157: switch(this.l()) {
        case '@': this.annoAssignStd({art},157); continue;
        default: this.s=158; continue;
      }
      case 158: this.typeExpression({art},0); continue;
      default:
      this.attachLocation( art ); if (ret) art.location.tokenIndex = ret.location.tokenIndex;
      return this.exit_();
    }
  }
  elementsBlock($,$next) {
    this.rule_(160,$next);
    for(;;) switch(this.s) {
      case 160: if(this.m(161,'{')) { $.art.elements = this.createDict(); } continue;
      case 161: switch(this.l()) {
        case 'Id': case '@': this.elementDef({outer:$.art,art:undefined},162); continue;
        default: this.s=163; continue;
      }
      case 162: switch(this.l()) {
        case ';': this.c(161); continue;
        case '}': this.s=163; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(161); continue;
        default: this.e(); continue;
      }
      case 163: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.art.elements ); } continue;
      default: return this.exit_();
    }
  }
  elementDef($,$next) {
    this.rule_(165,$next);
    let expr; let _;
    { $.art ??= new XsnArtifact();
this.docComment( $.art ); }
    for(;;) switch(this.s) {
      case 165: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},165); continue;
        default: this.s=166; continue;
      }
      case 166: switch(this.lk()) {
        case 'virtual': if(this.ckP(167,['Id','key'])) { $.art.virtual = this.valueWithLocation( true ); } continue;
        default: this.s=167; continue;
      }
      case 167: switch(this.lk()) {
        case 'key': if(this.ck(168)) { $.art.key = this.valueWithLocation( true ); } continue;
        default: this.s=168; continue;
      }
      case 168: switch(this.lk()) {
        case 'masked': if(this.ckP(169,['Id'])) { $.art.masked = this.valueWithLocation( true );
this.message( 'syntax-unsupported-masked', this.lb(), { keyword: 'masked' } ); } continue;
        default: this.s=169; continue;
      }
      case 169: switch(this.lk()) {
        case 'element': if(this.ckP(170,['Id'])) { $.art.$syntax = 'element'; } continue;
        default: this.s=170; continue;
      }
      case 170: if(this.mi(171,'Element')) {this.elementRestriction(0,'elem'); this.addDef( $.art, $.outer, 'elements', 'element', this.identAst() );
this.docComment( $.art ); } continue;
      case 171: switch(this.l()) {
        case '@': this.annoAssignMid({art:$.art},171); continue;
        default: this.s=172; continue;
      }
      case 172: switch(this.l()) {
        case '{': this.elementsBlock({art:$.art},173); continue;
        case ':': this.c(174); continue;
        default: this.s=175; continue;
      }
      case 173: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},175); continue;
        default: this.s=175; continue;
      }
      case 174: this.typeExpression({art:$.art},175); continue;
      case 175: switch(this.l()) {
        case '=': this.gc(0,'elementRestriction','calc') && this.c(176); continue;
        default: if(this.gr(['Id',';','@','}','key'])) { this.docComment( $.art, 'type' ); } continue;
      }
      case 176: if(this.expression(_={},177)) {expr=_.expr; $.art.value = expr; } continue;
      case 177: switch(this.lk()) {
        case 'stored': if(this.ck(178)) { $.art.value.stored = this.valueWithLocation( true ); } continue;
        default: this.s=178; continue;
      }
      case 178: this.s=179;{ if (this.elementRestriction( true, 'anno' )) this.docComment( $.art ); } continue;
      case 179: switch(this.l()) {
        case '@': this.gc(0,'elementRestriction','anno') && this.annoAssignStd({art:$.art},179); continue;
        default: this.gr(['Id',';','@','}','key']); continue;
      }
      default:
      this.attachLocation( $.art );
      return this.exit_();
    }
  }
  enumSymbolsBlock($,$next) {
    this.rule_(181,$next);
    for(;;) switch(this.s) {
      case 181: if(this.mk(182,'enum')) { $.art.enum = this.createDict(); } continue;
      case 182: this.m(183,'{'); continue;
      case 183: switch(this.l()) {
        case 'Id': case '@': this.enumSymbolDef({outer:$.art},184); continue;
        default: this.s=185; continue;
      }
      case 184: switch(this.l()) {
        case ';': this.c(183); continue;
        case '}': this.s=185; continue;
        default: this.e(); continue;
      }
      case 185: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.art.enum ); } continue;
      default: return this.exit_();
    }
  }
  enumSymbolDef($,$next) {
    this.rule_(187,$next);
    let art=new XsnArtifact();
    let sign; let value; let _;
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 187: switch(this.l()) {
        case '@': this.annoAssignStd({art},187); continue;
        default: this.s=188; continue;
      }
      case 188: if(this.mi(189,'Enum')) { this.addDef( art, $.outer, 'enum', 'enum', this.identAst() );
this.docComment( art ); } continue;
      case 189: switch(this.l()) {
        case '@': this.annoAssignStd({art},189); continue;
        default: this.s=190; continue;
      }
      case 190: switch(this.l()) {
        case '=': this.c(191); continue;
        default: this.gr([';','}']); continue;
      }
      case 191: switch(this.l()) {
        case 'String': if(this.c(193)) { art.value = this.quotedLiteral(); } continue;
        case 'Number': if(this.c(193)) { art.value = this.numberLiteral(); } continue;
        case '+': case '-': if(this.c(192)) sign=this.lb(); continue;
        case 'Id': case '#': case 'QuotedLiteral': if(this.literalValue(_={},193)) {value=_.expr; art.value = value; } continue;
        default: this.e(); continue;
      }
      case 192: if(this.m(193,'Number')) { art.value = this.numberLiteral( sign ); } continue;
      case 193: this.s=194;{ this.docComment( art ); } continue;
      case 194: switch(this.l()) {
        case '@': this.annoAssignStd({art},194); continue;
        default: this.gr([';','}']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  foreignKeysBlock($,$next) {
    this.rule_(196,$next);
    for(;;) switch(this.s) {
      case 196: if(this.m(197,'{')) { $.art.foreignKeys = this.createDict(); } continue;
      case 197: switch(this.l()) {
        case 'Id': case '@': this.foreignKeyDef({outer:$.art},198); continue;
        default: this.s=199; continue;
      }
      case 198: switch(this.l()) {
        case ',': this.c(197); continue;
        case '}': this.s=199; continue;
        default: this.e(); continue;
      }
      case 199: if(this.m(0,'}')) { this.finalizeDictOrArray( $.art.foreignKeys ); } continue;
      default: return this.exit_();
    }
  }
  foreignKeyDef($,$next) {
    this.rule_(201,$next);
    let art=new XsnArtifact(); let name;
    let ref; let _;
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 201: switch(this.l()) {
        case '@': this.annoAssignStd({art},201); continue;
        default: this.s=202; continue;
      }
      case 202: if(this.simplePath(_={category:'ref'},203)) {ref=_.ref; art.targetElement = ref; } continue;
      case 203: switch(this.lk()) {
        case 'as': this.ck(204); continue;
        default: if(this.gr([',','}'])) { this.classifyImplicitName( 'KeyImplicit', ref ); name = ref.path; } continue;
      }
      case 204: if(this.mi(0,'Key')) {name=this.lb(); name = this.identAst(); } continue;
      case 0: { this.addDef( art, $.outer, 'foreignKeys', 'key', name ); }
      default:
      this.attachLocation(art);
      return this.exit_();
    }
  }
  mixinElementDef($,$next) {
    this.rule_(206,$next);
    let art=new XsnArtifact();
    let assoc; let card; let target; let expr; let _;
    for(;;) switch(this.s) {
      case 206: if(this.mi(207,'Mixin')) { this.addDef( art, $.outer, 'mixin', 'mixin', this.identAst() ); } continue;
      case 207: this.m(208,':'); continue;
      case 208: switch(this.lk()) {
        case 'association': if(this.ck(209)) assoc=this.lb(); continue;
        case 'composition': if(this.ck(211)) assoc=this.lb(); continue;
        default: this.e(); continue;
      }
      case 209: switch(this.l()) {
        case '[': this.cardinality({art},210); continue;
        default: this.s=210; continue;
      }
      case 210: this.mk(213,'to'); continue;
      case 211: switch(this.l()) {
        case '[': this.cardinality({art},212); continue;
        default: this.s=212; continue;
      }
      case 212: this.mk(213,'of'); continue;
      case 213: switch(this.lk()) {
        case 'one': case 'many': if(this.ckP(214,['Id'])) card=this.lb(); continue;
        default: this.s=214; continue;
      }
      case 214: if(this.simplePath(_={category:'artref'},215)) {target=_.ref; this.setAssocAndComposition( art, assoc, card, target ); } continue;
      case 215: this.mk(216,'on'); continue;
      case 216: if(this.condition(_={},0)) {expr=_.expr; art.on = expr; } continue;
      default:
      this.attachLocation(art);
      return this.exit_();
    }
  }
  annotateArtifact($,$next) {
    this.rule_(218,$next);
    let name; let elemName; let keyword; let _;
    for(;;) switch(this.s) {
      case 218: if(this.namePath(_={category:'Ext'},219)) name=_.name; continue;
      case 219: switch(this.lk()) {
        case ':': this.c(220); continue;
        case 'with': if(this.ck(225)) keyword=this.lb(); continue;
        default: this.s=225; continue;
      }
      case 220: if(this.namePath(_={category:'ExtElement'},221)) {elemName=_.name; this.addExtension( $.art, $.outer, 'annotate', name, elemName.path ); } continue;
      case 221: switch(this.lk()) {
        case 'with': if(this.ck(222)) keyword=this.lb(); continue;
        default: this.s=222; continue;
      }
      case 222: this.s=223;{ this.docComment( $.art ); } continue;
      case 223: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},223); continue;
        default: this.s=224; continue;
      }
      case 224: switch(this.l()) {
        case '{': this.annotateElementsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 225: this.s=226;{ this.addExtension( $.art, $.outer, 'annotate', name );
this.docComment( $.art ); } continue;
      case 226: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},226); continue;
        default: this.s=227; continue;
      }
      case 227: switch(this.l()) {
        case '(': this.annotateParamsBlock({art:$.art},228); continue;
        default: this.s=228; continue;
      }
      case 228: switch(this.lk()) {
        case 'returns': this.annotateReturns({outer:$.art},0); continue;
        case '{': this.annotateElementsBlock({art:$.art},229); continue;
        default: this.s=229; continue;
      }
      case 229: switch(this.lk()) {
        case 'actions': this.annotateActionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.checkWith( keyword ); this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendArtifact($,$next) {
    this.rule_(231,$next);
    let name; let elemName; let keyword; let elements; let incl; let _;
    for(;;) switch(this.s) {
      case 231: if(this.namePath(_={category:'Ext'},232)) name=_.name; continue;
      case 232: switch(this.lk()) {
        case ':': this.c(233); continue;
        case 'with': if(this.ck(242)) {keyword=this.lb(); this.addExtension( $.art, $.outer, 'extend', name );
this.docComment( $.art ); } continue;
        default: this.s=239;{ this.addExtension( $.art, $.outer, 'extend', name );
this.docComment( $.art ); } continue;
      }
      case 233: if(this.namePath(_={category:'ExtElement'},234)) {elemName=_.name; this.addExtension( $.art, $.outer, 'extend', name, elemName.path ); } continue;
      case 234: switch(this.lk()) {
        case 'with': if(this.ck(235)) keyword=this.lb(); continue;
        default: this.s=235; continue;
      }
      case 235: this.s=236;{ this.docComment( $.art ); } continue;
      case 236: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},236); continue;
        default: this.s=237; continue;
      }
      case 237: switch(this.lk()) {
        case 'elements': if(this.ck(238)) elements=this.lb(); continue;
        case '{': this.s=238; continue;
        case 'enum': this.enumSymbolsBlock({art:$.art},0); continue;
        case '(': this.typeNamedArgsList({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 238: this.extendElementsBlock({art:$.art,start:elements},0); continue;
      case 239: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},239); continue;
        default: this.s=240; continue;
      }
      case 240: switch(this.l()) {
        case '{': this.extendElementsBlock({art:$.art,start:undefined},241); continue;
        default: this.gr([';']); continue;
      }
      case 241: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 242: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},242); continue;
        default: this.s=243; continue;
      }
      case 243: switch(this.lk()) {
        case 'Id': if(this.simplePath(_={category:'artref'},244)) {incl=_.ref; $.art.includes = [ incl ]; } continue;
        case 'elements': if(this.ckP(248,['{'])) elements=this.lb(); continue;
        case '{': this.s=248; continue;
        case 'actions': this.lP() && this.actionsBlock({art:$.art},0); continue;
        case 'enum': this.lP() && this.enumSymbolsBlock({art:$.art},0); continue;
        case '(': this.typeNamedArgsList({art:$.art},0); continue;
        case 'columns': this.ckP(250,['{']); continue;
        case 'definitions': this.ckP(251,['{']); continue;
        default: this.gi(0,[';']); continue;
      }
      case 244: switch(this.l()) {
        case ',': this.c(245); continue;
        default: this.s=246; continue;
      }
      case 245: if(this.simplePath(_={category:'artref'},244)) {incl=_.ref; $.art.includes.push( incl ); } continue;
      case 246: switch(this.l()) {
        case '{': this.extendElementsBlock({art:$.art,start:undefined},247); continue;
        default: this.s=247; continue;
      }
      case 247: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 248: this.extendElementsBlock({art:$.art,start:elements},249); continue;
      case 249: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 250: this.selectItemsList({query:$.art,start:this.lb()},0); continue;
      case 251: this.artifactsBlock({art:$.art,start:this.lb()},0); continue;
      default:
      this.checkWith( keyword ); this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendService($,$next) {
    this.rule_(253,$next);
    let name; let keyword; let _;
    for(;;) switch(this.s) {
      case 253: if(this.mk(254,'service')) { $.art.expectedKind = this.valueWithLocation(); } continue;
      case 254: if(this.namePath(_={category:'ExtService'},255)) {name=_.name; $.art.name = name; $.outer.extensions.push( $.art ); } continue;
      case 255: switch(this.lk()) {
        case 'with': if(this.ck(256)) keyword=this.lb(); continue;
        default: this.s=256; continue;
      }
      case 256: this.s=257;{ this.docComment( $.art ); } continue;
      case 257: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},257); continue;
        default: this.s=258; continue;
      }
      case 258: switch(this.l()) {
        case '{': this.artifactsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.checkWith( keyword ); this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendContext($,$next) {
    this.rule_(260,$next);
    let name; let keyword; let _;
    for(;;) switch(this.s) {
      case 260: if(this.mk(261,'context')) { $.art.expectedKind = this.valueWithLocation(); } continue;
      case 261: if(this.namePath(_={category:'ExtContext'},262)) {name=_.name; $.art.name = name; $.outer.extensions.push( $.art ); } continue;
      case 262: switch(this.lk()) {
        case 'with': if(this.ck(263)) keyword=this.lb(); continue;
        default: this.s=263; continue;
      }
      case 263: this.s=264;{ this.docComment( $.art ); } continue;
      case 264: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},264); continue;
        default: this.s=265; continue;
      }
      case 265: switch(this.l()) {
        case '{': this.artifactsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.checkWith( keyword ); this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendType($,$next) {
    this.rule_(267,$next);
    let name; let keyword; let incl; let elements; let _;
    for(;;) switch(this.s) {
      case 267: if(this.mk(268,'type')) { $.art.expectedKind = this.valueWithLocation(); } continue;
      case 268: if(this.namePath(_={category:'Ext'},269)) {name=_.name; $.art.name = name; $.outer.extensions.push( $.art ); } continue;
      case 269: switch(this.lk()) {
        case 'with': if(this.ck(272)) {keyword=this.lb(); this.docComment( $.art ); } continue;
        default: this.s=270;{ this.docComment( $.art ); } continue;
      }
      case 270: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},270); continue;
        default: this.s=271; continue;
      }
      case 271: switch(this.l()) {
        case '{': this.extendElementsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      case 272: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},272); continue;
        default: this.s=273; continue;
      }
      case 273: switch(this.lk()) {
        case 'Id': if(this.simplePath(_={category:'artref'},274)) {incl=_.ref; $.art.includes = [ incl ]; } continue;
        case 'elements': if(this.ckP(277,['{'])) elements=this.lb(); continue;
        case '{': this.s=277; continue;
        case 'enum': this.lP() && this.enumSymbolsBlock({art:$.art},0); continue;
        case '(': this.typeNamedArgsList({art:$.art},0); continue;
        default: this.gi(0,[';']); continue;
      }
      case 274: switch(this.l()) {
        case ',': this.c(275); continue;
        default: this.s=276; continue;
      }
      case 275: if(this.simplePath(_={category:'artref'},274)) {incl=_.ref; $.art.includes.push( incl ); } continue;
      case 276: switch(this.l()) {
        case '{': this.extendElementsBlock({art:$.art,start:undefined},0); continue;
        default: this.gr([';']); continue;
      }
      case 277: this.extendElementsBlock({art:$.art,start:elements},0); continue;
      default:
      this.checkWith( keyword ); this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendEntityOrAspect($,$next) {
    this.rule_(279,$next);
    let name; let keyword; let incl; let _;
    for(;;) switch(this.s) {
      case 279: switch(this.lk()) {
        case 'aspect': case 'entity': if(this.ck(280)) { $.art.expectedKind = this.valueWithLocation(); } continue;
        default: this.e(); continue;
      }
      case 280: if(this.namePath(_={category:'Ext'},281)) {name=_.name; $.art.name = name; $.outer.extensions.push( $.art ); } continue;
      case 281: switch(this.lk()) {
        case 'with': if(this.ck(283)) {keyword=this.lb(); this.docComment( $.art ); } continue;
        default: this.s=282;{ this.docComment( $.art ); } continue;
      }
      case 282: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},282); continue;
        default: this.s=287; continue;
      }
      case 283: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},283); continue;
        default: this.s=284; continue;
      }
      case 284: switch(this.lk()) {
        case 'Id': if(this.simplePath(_={category:'artref'},285)) {incl=_.ref; $.art.includes = [ incl ]; } continue;
        case 'actions': this.gP(287); continue;
        default: this.gi(287); continue;
      }
      case 285: switch(this.l()) {
        case ',': this.c(286); continue;
        default: this.s=287; continue;
      }
      case 286: if(this.simplePath(_={category:'artref'},285)) {incl=_.ref; $.art.includes.push( incl ); } continue;
      case 287: switch(this.l()) {
        case '{': this.extendElementsBlock({art:$.art,start:undefined},288); continue;
        default: this.s=288; continue;
      }
      case 288: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.checkWith( keyword ); this.attachLocation( $.art );
      return this.exit_();
    }
  }
  extendProjection($,$next) {
    this.rule_(290,$next);
    let name; let keyword; let _;
    for(;;) switch(this.s) {
      case 290: if(this.mk(291,'projection')) { $.art.expectedKind = this.valueWithLocation(); } continue;
      case 291: if(this.namePath(_={category:'Ext'},292)) {name=_.name; $.art.name = name; $.outer.extensions.push( $.art ); } continue;
      case 292: switch(this.lk()) {
        case 'with': if(this.ck(293)) keyword=this.lb(); continue;
        default: this.s=293; continue;
      }
      case 293: this.s=294;{ this.docComment( $.art ); } continue;
      case 294: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},294); continue;
        default: this.s=295; continue;
      }
      case 295: switch(this.l()) {
        case '{': this.selectItemsList({query:$.art,start:undefined},296); continue;
        default: this.s=296; continue;
      }
      case 296: switch(this.lk()) {
        case 'actions': this.actionsBlock({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.checkWith( keyword ); this.attachLocation( $.art );
      return this.exit_();
    }
  }
  annotateActionsBlock($,$next) {
    this.rule_(298,$next);
    for(;;) switch(this.s) {
      case 298: if(this.mk(299,'actions')) { $.art.actions = this.createDict(); } continue;
      case 299: this.m(300,'{'); continue;
      case 300: switch(this.l()) {
        case 'Id': case '@': this.annotateBoundAction({outer:$.art},301); continue;
        default: this.s=302; continue;
      }
      case 301: switch(this.l()) {
        case ';': this.c(300); continue;
        case '}': this.s=302; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(300); continue;
        default: this.e(); continue;
      }
      case 302: if(this.m(0,'}')) {this.afterBrace(); this.finalizeExtensionsDict( $.art.actions ); } continue;
      default: return this.exit_();
    }
  }
  annotateBoundAction($,$next) {
    this.rule_(304,$next);
    let art=new XsnArtifact();
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 304: switch(this.l()) {
        case '@': this.annoAssignStd({art},304); continue;
        default: this.s=305; continue;
      }
      case 305: if(this.mi(306,'ExtBoundAction')) { this.addDef( art, $.outer, 'actions', 'annotate', this.identAst() );
this.docComment( art ); } continue;
      case 306: switch(this.l()) {
        case '@': this.annoAssignStd({art},306); continue;
        default: this.s=307; continue;
      }
      case 307: switch(this.l()) {
        case '(': this.annotateParamsBlock({art},308); continue;
        default: this.s=308; continue;
      }
      case 308: switch(this.lk()) {
        case 'returns': this.lP() && this.annotateReturns({outer:art},0); continue;
        default: this.gr(['Id',';','@','}']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  annotateParamsBlock($,$next) {
    this.rule_(310,$next);
    for(;;) switch(this.s) {
      case 310: if(this.m(311,'(')) { $.art.params = this.createDict(); } continue;
      case 311: switch(this.l()) {
        case 'Id': case '@': this.annotateParam({outer:$.art},312); continue;
        default: this.s=313; continue;
      }
      case 312: switch(this.l()) {
        case ',': this.c(311); continue;
        case ')': this.s=313; continue;
        default: this.e(); continue;
      }
      case 313: if(this.m(0,')')) { this.finalizeExtensionsDict( $.art.params ); } continue;
      default: return this.exit_();
    }
  }
  annotateParam($,$next) {
    this.rule_(315,$next);
    let art=new XsnArtifact();
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 315: switch(this.l()) {
        case '@': this.annoAssignStd({art},315); continue;
        default: this.s=316; continue;
      }
      case 316: if(this.mi(317,'ExtParam')) { this.addDef( art, $.outer, 'params', 'annotate', this.identAst() );
this.docComment( art ); } continue;
      case 317: switch(this.l()) {
        case '@': this.annoAssignStd({art},317); continue;
        default: this.gr([')',',']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  annotateReturns($,$next) {
    this.rule_(319,$next);
    let art=new XsnArtifact();
    let ret;
    for(;;) switch(this.s) {
      case 319: if(this.mk(320,'returns')) {ret=this.lb(); $.outer.returns = art; art.kind = 'annotate';
this.docComment( art ); } continue;
      case 320: switch(this.l()) {
        case '@': this.annoAssignStd({art},320); continue;
        default: this.s=321; continue;
      }
      case 321: switch(this.l()) {
        case '{': this.annotateElementsBlock({art},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation( art ); if (ret) art.location.tokenIndex = ret.location.tokenIndex;
      return this.exit_();
    }
  }
  annotateElementsBlock($,$next) {
    this.rule_(323,$next);
    for(;;) switch(this.s) {
      case 323: if(this.m(324,'{')) { $.art.elements = this.createDict(); } continue;
      case 324: switch(this.l()) {
        case 'Id': case '@': this.annotateElement({outer:$.art},325); continue;
        default: this.s=326; continue;
      }
      case 325: switch(this.l()) {
        case ';': this.c(324); continue;
        case '}': this.s=326; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(324); continue;
        default: this.e(); continue;
      }
      case 326: if(this.m(0,'}')) {this.afterBrace(); this.finalizeExtensionsDict( $.art.elements ); } continue;
      default: return this.exit_();
    }
  }
  annotateElement($,$next) {
    this.rule_(328,$next);
    let art=new XsnArtifact();
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 328: switch(this.l()) {
        case '@': this.annoAssignStd({art},328); continue;
        default: this.s=329; continue;
      }
      case 329: if(this.mi(330,'ExtElement')) { this.addDef( art, $.outer, 'elements', 'annotate', this.identAst() );
this.docComment( art ); } continue;
      case 330: switch(this.l()) {
        case '@': this.annoAssignStd({art},330); continue;
        default: this.s=331; continue;
      }
      case 331: switch(this.l()) {
        case '{': this.annotateElementsBlock({art},0); continue;
        default: this.gr(['Id',';','@','}']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  extendElementsBlock($,$next) {
    this.rule_(333,$next);
    for(;;) switch(this.s) {
      case 333: if(this.m(334,'{')) { $.art.elements = this.createDict( $.start ); } continue;
      case 334: switch(this.l()) {
        case 'Id': case '@': this.elementDefOrExtend({outer:$.art},335); continue;
        default: this.s=336; continue;
      }
      case 335: switch(this.l()) {
        case ';': this.c(334); continue;
        case '}': this.s=336; continue;
        case 'Id': case '@': this.ec('afterBrace') && this.g(334); continue;
        default: this.e(); continue;
      }
      case 336: if(this.m(0,'}')) {this.afterBrace(); this.finalizeExtensionsDict( $.art.elements ); } continue;
      default: return this.exit_();
    }
  }
  elementDefOrExtend($,$next) {
    this.rule_(338,$next);
    let art=new XsnArtifact();
    let keyword; let elements;
    { this.docComment( art ); }
    for(;;) switch(this.s) {
      case 338: switch(this.l()) {
        case '@': this.annoAssignStd({art},338); continue;
        default: this.s=339; continue;
      }
      case 339: switch(this.lk()) {
        case 'Id': case '@': case 'key': this.elementDef({outer:$.outer,art},0); continue;
        case 'extend': this.ckP(340,['Id']); continue;
        default: this.ei(); continue;
      }
      case 340: switch(this.lk()) {
        case 'element': if(this.ckP(341,['Id'])) { art.expectedKind = this.valueWithLocation(); } continue;
        default: this.s=341; continue;
      }
      case 341: if(this.mi(342,'ExtElement')) { this.addDef( art, $.outer, 'elements', 'extend', this.identAst() ); } continue;
      case 342: switch(this.lk()) {
        case 'with': if(this.ck(345)) {keyword=this.lb(); this.docComment( art ); } continue;
        default: this.s=343;{ this.docComment( art ); } continue;
      }
      case 343: switch(this.l()) {
        case '@': this.annoAssignStd({art},343); continue;
        default: this.s=344; continue;
      }
      case 344: switch(this.l()) {
        case '{': this.extendElementsBlock({art,start:undefined},0); continue;
        default: this.gr(['Id',';','@','}','key']); continue;
      }
      case 345: switch(this.l()) {
        case '@': this.annoAssignStd({art},345); continue;
        default: this.s=346; continue;
      }
      case 346: switch(this.lk()) {
        case 'elements': if(this.ck(347)) elements=this.lb(); continue;
        case '{': this.s=347; continue;
        case 'enum': this.enumSymbolsBlock({art},0); continue;
        case '(': this.typeNamedArgsList({art},0); continue;
        default: this.gr(['Id',';','@','}','key']); continue;
      }
      case 347: this.extendElementsBlock({art,start:elements},0); continue;
      default:
      this.checkWith( keyword ); this.attachLocation( art );
      return this.exit_();
    }
  }
  typeOrIncludesSpec($,$next) {
    this.rule_(349,$next);
    let ref; let _;
    for(;;) switch(this.s) {
      case 349: switch(this.l()) {
        case '{': this.elementsBlock({art:$.art},350); continue;
        case ':': this.c(351); continue;
        default: this.e(); continue;
      }
      case 350: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      case 351: switch(this.lk()) {
        case '{': case 'many': case 'type': case 'array': case 'localized': case 'association': case 'composition': this.lP() && this.typeExpression({art:$.art},0); continue;
        case 'Id': if(this.simplePath(_={category:'artref'},352)) {ref=_.ref; $.art.type = ref; } continue;
        default: this.ei(); continue;
      }
      case 352: switch(this.lk()) {
        case '(': case ':': this.typeRefOptArgs({art:$.art},353,411); continue;
        case '@': case 'not': case 'enum': case 'null': case 'default': this.typeExpression({art:$.art},0,362); continue;
        case ',': case '{': this.s=354;{ $.art.includes = [ $.art.type ]; delete $.art.type; } continue;
        default: if(this.gr([';'])) { this.docComment( $.art ); } continue;
      }
      case 353: switch(this.lk()) {
        case '@': case 'not': case 'enum': case 'null': case 'default': this.typeExpression({art:$.art},0,362); continue;
        default: if(this.gr([';'])) { this.docComment( $.art ); } continue;
      }
      case 354: switch(this.l()) {
        case ',': this.c(355); continue;
        default: this.s=357; continue;
      }
      case 355: switch(this.l()) {
        case 'Id': if(this.simplePath(_={category:'artref'},356)) {ref=_.ref; $.art.includes.push( ref ); } continue;
        default: this.s=357; continue;
      }
      case 356: switch(this.l()) {
        case ',': this.c(355); continue;
        case '{': this.s=357; continue;
        default: this.e(); continue;
      }
      case 357: this.elementsBlock({art:$.art},358); continue;
      case 358: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},0); continue;
        default: this.gr([';']); continue;
      }
      default: return this.exit_();
    }
  }
  typeExpression($,$next,$startState) {
    this.rule_($startState??360,$next);
    let assoc; let card; let target; let cond; let _;
    for(;;) switch(this.s) {
      case 360: switch(this.lk()) {
        case '{': if(this.elementsBlock({art:$.art},361)) {this.elementRestriction(0,'calc');} continue;
        case 'Id': this.typeRefOptArgs({art:$.art},362); continue;
        case 'type': this.lP() && this.typeTypeOf({art:$.art},362); continue;
        case 'localized': if(this.ckP(371,['Id'])) { $.art.localized = this.valueWithLocation( true ); } continue;
        case 'association': if(this.ckP(375,['[','to'])) {assoc=this.lb();this.elementRestriction(0,'calc');} continue;
        case 'composition': if(this.ckP(384,['[','of'])) {assoc=this.lb();this.elementRestriction(0,'calc');} continue;
        case 'array': if(this.ckP(394,['of'])) {this.elementRestriction(0,'calc');} continue;
        case 'many': if(this.ckP(395,['Id','{'])) {this.elementRestriction(0,'calc'); $.art.items = { location: this.lb().location }; } continue;
        default: this.ei(); continue;
      }
      case 361: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},0); continue;
        default: this.gr([]); continue;
      }
      case 362: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},363); continue;
        default: this.s=363; continue;
      }
      case 363: switch(this.lk()) {
        case 'not': case 'null': case 'default': this.nullabilityAndDefault({art:$.art},364); continue;
        case '@': this.s=366;{ this.docComment( $.art ); } continue;
        case 'enum': this.s=369;{ this.docComment( $.art ); } continue;
        default: if(this.gr([])) { this.docComment( $.art, 'elem' ); } continue;
      }
      case 364: switch(this.l()) {
        case '@': this.s=365;{ this.elementRestriction( false, 'calc' );
this.docComment( $.art ); } continue;
        default: if(this.gr([])) { this.docComment( $.art, 'elem' ); } continue;
      }
      case 365: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},365); continue;
        default: this.gr([]); continue;
      }
      case 366: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},366); continue;
        default: this.s=367; continue;
      }
      case 367: switch(this.lk()) {
        case 'enum': if(this.enumSymbolsBlock({art:$.art},368)) {this.elementRestriction(0,'anno');} continue;
        default: this.gr([]); continue;
      }
      case 368: switch(this.lk()) {
        case 'not': case 'null': case 'default': this.nullabilityAndDefault({art:$.art},0); continue;
        default: this.gr([]); continue;
      }
      case 369: if(this.enumSymbolsBlock({art:$.art},370)) {this.elementRestriction(0,'anno');} continue;
      case 370: switch(this.lk()) {
        case 'not': case 'null': case 'default': this.nullabilityAndDefault({art:$.art},0); continue;
        default: this.gr([]); continue;
      }
      case 371: this.typeRefOptArgs({art:$.art},372); continue;
      case 372: switch(this.lk()) {
        case 'not': case 'null': case 'default': this.nullabilityAndDefault({art:$.art},373); continue;
        default: this.s=373; continue;
      }
      case 373: switch(this.l()) {
        case '@': this.s=374;{ this.elementRestriction( false, 'calc' );
this.docComment( $.art ); } continue;
        default: if(this.gr([])) { this.docComment( $.art, 'elem' ); } continue;
      }
      case 374: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},374); continue;
        default: this.gr([]); continue;
      }
      case 375: switch(this.l()) {
        case '[': this.cardinality({art:$.art},376); continue;
        default: this.s=376; continue;
      }
      case 376: this.mk(377,'to'); continue;
      case 377: switch(this.lk()) {
        case 'one': case 'many': if(this.ckP(378,['Id'])) card=this.lb(); continue;
        default: this.s=378; continue;
      }
      case 378: if(this.simplePath(_={category:'artref'},379)) {target=_.ref; this.setAssocAndComposition( $.art, assoc, card, target ); } continue;
      case 379: switch(this.lk()) {
        case 'on': this.ck(380); continue;
        case '{': this.foreignKeysBlock({art:$.art},381); continue;
        default: this.s=381; continue;
      }
      case 380: if(this.condition(_={},382)) {cond=_.expr; $.art.on = cond; } continue;
      case 381: switch(this.lk()) {
        case 'not': case 'null': case 'default': this.nullabilityAndDefault({art:$.art},382); continue;
        default: this.s=382; continue;
      }
      case 382: this.s=383;{ this.docComment( $.art ); } continue;
      case 383: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},383); continue;
        default: this.gr([]); continue;
      }
      case 384: switch(this.l()) {
        case '[': this.cardinality({art:$.art},385); continue;
        default: this.s=385; continue;
      }
      case 385: this.mk(386,'of'); continue;
      case 386: switch(this.lk()) {
        case 'one': case 'many': if(this.ckP(387,['Id','{'])) card=this.lb(); continue;
        default: this.s=387; continue;
      }
      case 387: switch(this.l()) {
        case 'Id': if(this.simplePath(_={category:'artref'},388)) {target=_.ref; this.setAssocAndComposition( $.art, assoc, card, target ); } continue;
        case '{': this.s=393;{ target = { location: this.startLocation( this.la() ) };
this.setAssocAndComposition( $.art, assoc, card, target ); } continue;
        default: this.e(); continue;
      }
      case 388: switch(this.lk()) {
        case 'on': this.ck(389); continue;
        case '{': this.foreignKeysBlock({art:$.art},390); continue;
        default: this.s=390; continue;
      }
      case 389: if(this.condition(_={},391)) {cond=_.expr; $.art.on = cond; } continue;
      case 390: switch(this.lk()) {
        case 'not': case 'null': case 'default': this.nullabilityAndDefault({art:$.art},391); continue;
        default: this.s=391; continue;
      }
      case 391: this.s=392;{ this.docComment( $.art ); } continue;
      case 392: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},392); continue;
        default: this.gr([]); continue;
      }
      case 393: if(this.elementsBlock({art:target},0)) { target.location = target.elements[Symbol.for('cds.$location')]; } continue;
      case 394: if(this.mk(395,'of')) { $.art.items = { location: this.locationOfPrevTokens( 2 ) }; } continue;
      case 395: switch(this.lk()) {
        case '{': this.elementsBlock({art:$.art.items},396); continue;
        case 'Id': this.typeRefOptArgs({art:$.art.items},397); continue;
        case 'type': this.lP() && this.typeTypeOf({art:$.art.items},397); continue;
        default: this.ei(); continue;
      }
      case 396: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art.items},0); continue;
        default: this.gr([]); continue;
      }
      case 397: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art.items},398); continue;
        default: this.s=398; continue;
      }
      case 398: switch(this.lk()) {
        case 'enum': this.enumSymbolsBlock({art:$.art.items},399); continue;
        case '@': this.s=400;{ this.elementRestriction( false, 'calc' );
this.docComment( $.art ); } continue;
        default: if(this.gr([])) { this.docComment( $.art, 'elem' ); } continue;
      }
      case 399: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art.items},0); continue;
        default: this.gr([]); continue;
      }
      case 400: switch(this.l()) {
        case '@': this.annoAssignStd({art:$.art},400); continue;
        default: this.gr([]); continue;
      }
      default: return this.exit_();
    }
  }
  typeTypeOf($,$next) {
    this.rule_(402,$next);
    let location;
    let type; let _;
    for(;;) switch(this.s) {
      case 402: this.mk(403,'type'); continue;
      case 403: if(this.mk(404,'of')) { location = this.locationOfPrevTokens( 2 ); } continue;
      case 404: if(this.simplePath(_={category:'ref'},405)) {type=_.ref; $.art.type = type; } continue;
      case 405: switch(this.l()) {
        case ':': if(this.c(406)) { type.scope = type.path.length; } continue;
        default: if(this.gr(['@'])) { type.scope = 'typeOf'; type.path.unshift( { id: 'type of', location } ); } continue;
      }
      case 406: if(this.miA(407,'ref')) { type.path.push( this.identAst() ); } continue;
      case 407: switch(this.l()) {
        case '.': this.c(408); continue;
        default: this.gr(['@']); continue;
      }
      case 408: if(this.miA(407,'ref')) { type.path.push( this.identAst() ); } continue;
      default: return this.exit_();
    }
  }
  typeRefOptArgs($,$next,$startState) {
    this.rule_($startState??410,$next);
    let type=$.art.type;
    let open; let tok; let _;
    for(;;) switch(this.s) {
      case 410: if(this.simplePath(_={category:'artref'},411)) {type=_.ref; $.art.type = type; } continue;
      case 411: switch(this.l()) {
        case ':': if(this.c(412)) { type.scope = type.path.length; } continue;
        case '(': if(this.c(415)) open=this.lb(); continue;
        default: this.gr([]); continue;
      }
      case 412: if(this.miA(413,'ref')) { type.path.push( this.identAst() ); } continue;
      case 413: switch(this.l()) {
        case '.': this.c(414); continue;
        default: this.gr([]); continue;
      }
      case 414: if(this.miA(413,'ref')) { type.path.push( this.identAst() ); } continue;
      case 415: switch(this.lk()) {
        case 'Number': if(this.c(416)) { $.art.$typeArgs = this.createArray( open );
$.art.$typeArgs.push( this.unsignedIntegerLiteral() ); } continue;
        case 'Id': this.s=419;{ $.art.$typeArgs = this.createDict( open ); } continue;
        default: this.ei(); continue;
      }
      case 416: switch(this.l()) {
        case ',': this.c(417); continue;
        default: this.s=418; continue;
      }
      case 417: switch(this.lk()) {
        case 'Number': if(this.c(416)) { $.art.$typeArgs.push( this.unsignedIntegerLiteral() ); } continue;
        case 'floating': case 'variable': if(this.ck(416)) {tok=this.lb(); $.art.$typeArgs.push( { literal: 'string', val: tok.keyword, location: tok.location } ); } continue;
        case ')': this.s=418; continue;
        default: this.e(); continue;
      }
      case 418: this.s=421;{ this.checkTypeArgs( $.art ); } continue;
      case 419: switch(this.l()) {
        case 'Id': this.typeNamedArg({art:$.art},420); continue;
        default: this.s=421; continue;
      }
      case 420: switch(this.l()) {
        case ',': this.c(419); continue;
        case ')': this.s=421; continue;
        default: this.e(); continue;
      }
      case 421: if(this.m(0,')')) { if ($.art.$typeArgs) this.finalizeDictOrArray( $.art.$typeArgs ); } continue;
      default: return this.exit_();
    }
  }
  typeNamedArgsList($,$next) {
    this.rule_(423,$next);
    for(;;) switch(this.s) {
      case 423: if(this.m(424,'(')) { $.art.$typeArgs = this.createDict(); } continue;
      case 424: switch(this.l()) {
        case 'Id': this.typeNamedArg({art:$.art},425); continue;
        default: this.s=426; continue;
      }
      case 425: switch(this.l()) {
        case ',': this.c(424); continue;
        case ')': this.s=426; continue;
        default: this.e(); continue;
      }
      case 426: if(this.m(0,')')) { this.finalizeDictOrArray( $.art.$typeArgs ); } continue;
      default: return this.exit_();
    }
  }
  typeNamedArg($,$next) {
    this.rule_(428,$next);
    let name; let tok;
    for(;;) switch(this.s) {
      case 428: if(this.mi(429,'typeparamname')) name=this.lb(); continue;
      case 429: this.m(430,':'); continue;
      case 430: switch(this.lk()) {
        case 'Number': if(this.c(0)) { this.setTypeFacet( $.art, name, this.unsignedIntegerLiteral() ); } continue;
        case 'floating': case 'variable': if(this.ck(0)) {tok=this.lb(); this.setTypeFacet( $.art, name, { literal: 'string', val: tok.keyword, location: tok.location } ); } continue;
        default: this.e(); continue;
      }
      default: return this.exit_();
    }
  }
  cardinality($,$next) {
    this.rule_(432,$next);
    let card={};
    for(;;) switch(this.s) {
      case 432: this.m(433,'['); continue;
      case 433: switch(this.l()) {
        case '*': if(this.c(434)) { card.targetMax = this.valueWithLocation(); } continue;
        case 'Number': if(this.c(436)) { card.targetMax = this.unsignedIntegerLiteral(); } continue;
        default: this.s=438;{ card.targetMax = this.valueWithLocation( '*' ); } continue;
      }
      case 434: switch(this.l()) {
        case ',': this.c(435); continue;
        default: this.s=438; continue;
      }
      case 435: this.targetCardinality({card,atAlt:false},438); continue;
      case 436: switch(this.l()) {
        case ',': this.c(437); continue;
        case '..': this.targetCardinality({card,atAlt:true},438,441); continue;
        default: this.s=438; continue;
      }
      case 437: this.targetCardinality({card,atAlt:false},438); continue;
      case 438: this.m(0,']'); continue;
      default:
      $.art.cardinality = this.attachLocation(card);
      return this.exit_();
    }
  }
  targetCardinality($,$next,$startState) {
    this.rule_($startState??440,$next);
    { if (!$.atAlt) $.card.sourceMax = $.card.targetMax; }
    for(;;) switch(this.s) {
      case 440: switch(this.l()) {
        case '*': if(this.c(0)) { $.card.targetMax = this.valueWithLocation(); } continue;
        case 'Number': if(this.c(441)) { $.card.targetMax = this.unsignedIntegerLiteral(); } continue;
        default: this.e(); continue;
      }
      case 441: switch(this.l()) {
        case '..': if(this.c(442)) { $.card.targetMin = $.card.targetMax; } continue;
        default: this.gr([']']); continue;
      }
      case 442: switch(this.l()) {
        case '*': if(this.c(0)) { $.card.targetMax = this.valueWithLocation(); } continue;
        case 'Number': if(this.c(0)) { $.card.targetMax = this.unsignedIntegerLiteral(); } continue;
        default: this.e(); continue;
      }
      default: return this.exit_();
    }
  }
  nullabilityAndDefault($,$next) {
    this.rule_(444,$next);
    let expr; let _;
    for(;;) switch(this.s) {
      case 444: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},445); continue;
        case 'default': this.ec('elementRestriction','default') && this.ck(447); continue;
        default: this.e(); continue;
      }
      case 445: switch(this.lk()) {
        case 'default': this.gc(0,'elementRestriction','default') && this.ck(446); continue;
        default: this.gr([]); continue;
      }
      case 446: if(this.expression(_={},0)) {expr=_.expr; $.art.default = expr; } continue;
      case 447: if(this.expression(_={},448)) {expr=_.expr; $.art.default = expr; } continue;
      case 448: switch(this.lk()) {
        case 'not': case 'null': this.nullability({art:$.art},0); continue;
        default: this.gr([]); continue;
      }
      default: return this.exit_();
    }
  }
  nullability($,$next) {
    this.rule_(450,$next);
    for(;;) switch(this.s) {
      case 450: switch(this.lk()) {
        case 'null': if(this.ck(0)) { this.setNullability( $.art, false ); } continue;
        case 'not': this.ck(451); continue;
        default: this.e(); continue;
      }
      case 451: if(this.mk(0,'null')) { this.setNullability( $.art, true, this.locationOfPrevTokens( 2 ) ); } continue;
      default: return this.exit_();
    }
  }
  queryEOF($,$next) {
    $.query??=undefined;
    this.rule_(453,$next);
    let _;
    for(;;) switch(this.s) {
      case 453: if(this.queryExpression(_={},454)) $.query=_.expr; continue;
      case 454: switch(this.l()) {
        case ';': this.c(455); continue;
        default: this.s=455; continue;
      }
      case 455: this.m(0,'EOF'); continue;
      default: return this.exit_();
    }
  }
  projectionSpec($,$next) {
    $.query??={};
    this.rule_(457,$next);
    let tab; let _;
    for(;;) switch(this.s) {
      case 457: if(this.mk(458,'projection')) { $.query = { op: this.valueWithLocation( 'SELECT' ) }; } continue;
      case 458: this.mk(459,'on'); continue;
      case 459: if(this.fromRefWithOptAlias(_={},460)) {tab=_.expr; this.afterBrace();
$.query.from = tab; } continue;
      case 460: switch(this.l()) {
        case '{': this.selectItemsList({query:$.query,start:undefined},461); continue;
        default: this.s=461; continue;
      }
      case 461: switch(this.lk()) {
        case 'excluding': this.excludingClause({query:$.query},0); continue;
        default: this.gr([';']); continue;
      }
      default:
      this.attachLocation($.query);
      return this.exit_();
    }
  }
  queryExpression($,$next,$startState) {
    $.expr??={};
    this.rule_($startState??463,$next);
    let op; let quantifier;
    let query; let _;
    for(;;) switch(this.s) {
      case 463: switch(this.l()) {
        case '(': this.c(464); continue;
        case 'Id': if(this.selectQuery(_={},466)) $.expr=_.query; continue;
        default: this.e(); continue;
      }
      case 464: this.queryExpression($,465); continue;
      case 465: if(this.m(466,')')) { this.surroundByParens( $.expr ); } continue;
      case 466: switch(this.lk()) {
        case 'intersect': if(this.gc(470,'precLeft_',4) && this.ck(467)) { op = this.valueWithLocation(); } continue;
        case 'minus': case 'except': if(this.gc(470,'precLeft_',2) && this.ck(467)) { op = this.valueWithLocation(); } continue;
        case 'union': if(this.gc(470,'precLeft_',2) && this.ck(468)) { op = this.valueWithLocation(); } continue;
        default: this.s=470; continue;
      }
      case 467: switch(this.lk()) {
        case 'distinct': if(this.ck(469)) { quantifier = this.valueWithLocation(); } continue;
        default: this.s=469; continue;
      }
      case 468: switch(this.lk()) {
        case 'all': case 'distinct': if(this.ck(469)) { quantifier = this.valueWithLocation(); } continue;
        default: this.s=469; continue;
      }
      case 469: if(this.queryExpression(_={},466)) {query=_.expr; if ($.expr.$parens || op.val !== $.expr.op.val || quantifier?.val !== $.expr.quantifier?.val) $.expr = { op, args: [$.expr], quantifier };
quantifier = undefined;
$.expr.args.push( query ); this.attachLocation( $.expr ); } continue;
      case 470: switch(this.lk()) {
        case 'limit': case 'order': if(this.gc(0,'precPost_',0) && this.g(471)) { if ($.expr.$parens) { this.attachLocation( $.expr ); $.expr = { op: this.valueWithLocation( '$query', this.la() ), args: [ $.expr ] }; } } continue;
        default: this.gr([]); continue;
      }
      case 471: this.orderByLimitOffset({query:$.expr},0); continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  selectQuery($,$next) {
    $.query??={};
    this.rule_(473,$next);
    for(;;) switch(this.s) {
      case 473: if(this.mk(474,'select')) { $.query = { op: this.valueWithLocation( 'SELECT' ) }; } continue;
      case 474: switch(this.lk()) {
        case 'from': this.ck(475); continue;
        case 'all': case 'distinct': if(this.ckP(485,['Id','#','(','*','+','-',':','?','@','{','key','not','case','cast','null','true','false','Number','String','exists','QuotedLiteral'])) { $.query.quantifier = this.valueWithLocation(); } continue;
        case 'Id': case '#': case '(': case '*': case '+': case '-': case ':': case '?': case '@': case '{': case 'key': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': this.s=485; continue;
        default: this.ei(); continue;
      }
      case 475: this.querySource({query:$.query},476); continue;
      case 476: switch(this.lk()) {
        case 'mixin': this.ck(477); continue;
        default: this.s=482; continue;
      }
      case 477: if(this.m(478,'{')) { $.query.mixin = this.createDict(); } continue;
      case 478: switch(this.l()) {
        case 'Id': this.mixinElementDef({outer:$.query},479); continue;
        default: this.s=480; continue;
      }
      case 479: switch(this.l()) {
        case ';': this.c(478); continue;
        case '}': this.s=480; continue;
        default: this.e(); continue;
      }
      case 480: if(this.m(481,'}')) { this.finalizeDictOrArray( $.query.mixin ); } continue;
      case 481: this.mk(482,'into'); continue;
      case 482: switch(this.lk()) {
        case 'all': case 'distinct': if(this.ck(483)) { $.query.quantifier = this.valueWithLocation(); } continue;
        default: this.s=483; continue;
      }
      case 483: switch(this.l()) {
        case '{': this.selectItemsList({query:$.query,start:undefined},484); continue;
        default: this.s=484; continue;
      }
      case 484: switch(this.lk()) {
        case 'excluding': this.excludingClause({query:$.query},490); continue;
        default: this.s=490; continue;
      }
      case 485: switch(this.l()) {
        case '*': if(this.c(486)) { $.query.columns = [ this.valueWithLocation() ]; } continue;
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case '@': case '{': case 'Number': case 'String': case 'QuotedLiteral': this.selectItemDef({columns:($.query.columns = [])},486); continue;
        default: this.e(); continue;
      }
      case 486: switch(this.l()) {
        case ',': this.c(487); continue;
        default: this.s=488; continue;
      }
      case 487: switch(this.l()) {
        case '*': if(this.c(486)) { $.query.columns.push( this.valueWithLocation() ); } continue;
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case '@': case '{': case 'Number': case 'String': case 'QuotedLiteral': this.selectItemDef({columns:$.query.columns},486); continue;
        default: this.e(); continue;
      }
      case 488: this.mk(489,'from'); continue;
      case 489: this.querySource({query:$.query},490); continue;
      case 490: switch(this.lk()) {
        case 'group': case 'where': case 'having': this.whereGroupByHaving({query:$.query},0); continue;
        default: this.gr(['limit','minus','order','union','except','intersect']); continue;
      }
      default:
      this.attachLocation($.query);
      return this.exit_();
    }
  }
  querySource($,$next) {
    this.rule_(492,$next);
    let tab; let _;
    for(;;) switch(this.s) {
      case 492: if(this.tableExpression(_={},493)) {tab=_.expr; $.query.from = tab; } continue;
      case 493: switch(this.l()) {
        case ',': this.s=494;{ const { location } = this.la();
$.query.from = { op: { val: 'join', location }, join: { val: 'cross', location }, args: [tab] }; } continue;
        default: this.gr(['group','limit','minus','order','union','where','except','having','intersect']); continue;
      }
      case 494: switch(this.l()) {
        case ',': this.c(495); continue;
        default: this.gr(['group','limit','minus','order','union','where','except','having','intersect']); continue;
      }
      case 495: if(this.tableExpression(_={},494)) {tab=_.expr; $.query.from.args.push( tab ); } continue;
      case 0:
      this.attachLocation($.query.from);
      default: return this.exit_();
    }
  }
  tableExpression($,$next,$startState) {
    $.expr??={};
    this.rule_($startState??497,$next);
    let join; let tab; let card; let cond; let _;
    for(;;) switch(this.s) {
      case 497: switch(this.l()) {
        case '(': this.tableOrQueryParens($,498); continue;
        case 'Id': this.fromRefWithOptAlias($,499); continue;
        default: this.e(); continue;
      }
      case 498: this.s=499;{ $.expr = this.taggedIfQuery( $.expr ); } continue;
      case 499: switch(this.lk()) {
        case 'cross': if(this.ck(500)) join=this.lb(); continue;
        case 'inner': if(this.ck(503)) join=this.lb(); continue;
        case 'full': case 'left': case 'right': if(this.ck(502)) join=this.lb(); continue;
        case 'join': if(this.ck(505)) { join = undefined; } continue;
        default: this.gr([]); continue;
      }
      case 500: if(this.mk(501,'join')) { if ($.expr?.join?.val !== 'cross' || $.expr.$parens) $.expr = { op: this.valueWithLocation(), join: this.valueWithLocation( undefined, join ), args: [ $.expr ] }; } continue;
      case 501: switch(this.l()) {
        case '(': if(this.tableOrQueryParens(_={},499)) {tab=_.expr; $.expr.args.push( this.taggedIfQuery( tab ) );
this.attachLocation( $.expr ); } continue;
        case 'Id': if(this.fromRefWithOptAlias(_={},499)) {tab=_.expr; $.expr.args.push( tab );
this.attachLocation( $.expr ); } continue;
        default: this.e(); continue;
      }
      case 502: switch(this.lk()) {
        case 'outer': this.ck(503); continue;
        default: this.s=503; continue;
      }
      case 503: switch(this.lk()) {
        case 'one': case 'many': case 'exact': this.joinCardinality(card={},504); continue;
        default: this.s=504; continue;
      }
      case 504: this.mk(505,'join'); continue;
      case 505: this.s=506;{ $.expr = { op: this.valueWithLocation(), join: this.valueWithLocation( join?.keyword || 'inner', join ), args: [ $.expr ] }; if (card) $.expr.cardinality = card; card = undefined; } continue;
      case 506: if(this.tableExpression(_={},507)) {tab=_.expr; $.expr.args.push( tab ); this.attachLocation( $.expr ); } continue;
      case 507: this.mk(508,'on'); continue;
      case 508: if(this.condition(_={},499)) {cond=_.expr; $.expr.on = cond;
this.attachLocation( $.expr ); } continue;
      default: return this.exit_();
    }
  }
  tableOrQueryParens($,$next) {
    $.expr??=undefined;
    this.rule_(510,$next);
    for(;;) switch(this.s) {
      case 510: if(this.m(511,'(')) {this.queryOnLeft();} continue;
      case 511: switch(this.lk()) {
        case '(': this.tableOrQueryParens($,512); continue;
        case 'Id': if(this.tableExpression($,513)) {this.queryOnLeft(0,'table');} continue;
        case 'select': this.queryExpression($,513); continue;
        default: this.ei(); continue;
      }
      case 512: switch(this.lk()) {
        case 'full': case 'join': case 'left': case 'cross': case 'inner': case 'right': if(this.tableExpression($,513,498)) {this.queryOnLeft(0,'table');} continue;
        case 'limit': case 'minus': case 'order': case 'union': case 'except': case 'intersect': this.gc(513,'queryOnLeft') && this.queryExpression($,513,466); continue;
        default: this.s=513; continue;
      }
      case 513: if(this.m(514,')')) { this.surroundByParens( $.expr ); } continue;
      case 514: switch(this.lk()) {
        case 'as': this.gc(0,'queryOnLeft','table') && this.ck(515); continue;
        case 'Id': if(this.gc(0,'queryOnLeft','tableWithoutAs') && this.ci(0,'FromAlias')) { $.expr = this.taggedIfQuery( $.expr ); $.expr.name = this.fragileAlias(); } continue;
        default: this.gi(0,['full','join','left','cross','inner','right']); continue;
      }
      case 515: if(this.mi(0,'FromAlias')) { $.expr = this.taggedIfQuery( $.expr ); $.expr.name = this.identAst(); } continue;
      default: return this.exit_();
    }
  }
  joinCardinality($,$next) {
    $.sourceMax??=undefined; $.targetMax??=undefined;
    this.rule_(517,$next);
    for(;;) switch(this.s) {
      case 517: switch(this.lk()) {
        case 'exact': if(this.ck(518)) { $.sourceMin = this.valueWithLocation( 1 ); } continue;
        case 'one': this.s=518; continue;
        case 'many': if(this.ck(519)) { $.sourceMax = this.valueWithLocation( '*' ); } continue;
        default: this.e(); continue;
      }
      case 518: if(this.mk(519,'one')) { $.sourceMax = this.valueWithLocation( 1 ); } continue;
      case 519: this.mk(520,'to'); continue;
      case 520: switch(this.lk()) {
        case 'exact': if(this.ck(521)) { $.targetMin = this.valueWithLocation( 1 ); } continue;
        case 'one': this.s=521; continue;
        case 'many': if(this.ck(0)) { $.targetMax = this.valueWithLocation( '*' ); } continue;
        default: this.e(); continue;
      }
      case 521: if(this.mk(0,'one')) { $.targetMax = this.valueWithLocation( 1 ); } continue;
      default:
      this.attachLocation( $ );
      return this.exit_();
    }
  }
  fromRefWithOptAlias($,$next) {
    $.expr??={};
    this.rule_(523,$next);
    { $.expr.path = []; }
    for(;;) switch(this.s) {
      case 523: this.fromPath({table:$.expr,category:'artref'},524); continue;
      case 524: switch(this.l()) {
        case ':': if(this.c(525)) { if (!$.expr.scope) $.expr.scope = $.expr.path.length; else {
this.warning( 'syntax-invalid-path-separator', this.lb(),
{ '#': 'colon', code: ':', newcode: '.' } );
} } continue;
        default: this.s=526; continue;
      }
      case 525: this.fromPath({table:$.expr,category:'ref'},526); continue;
      case 526: switch(this.lk()) {
        case 'as': this.ck(527); continue;
        case 'Id': if(this.gc(528,'tableWithoutAs') && this.ci(0,'FromAlias')) { $.expr.name = this.fragileAlias(); } continue;
        default: this.giR(528); continue;
      }
      case 527: if(this.mi(0,'FromAlias')) { $.expr.name = this.identAst(); } continue;
      case 528: if(this.gr([])) { this.classifyImplicitName( $.expr.scope ? 'FromElemImplicit' : 'FromImplicit', $.expr ); } continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  fromPath($,$next) {
    this.rule_(530,$next);
    let pathItem;
    for(;;) switch(this.s) {
      case 530: if(this.mi(531,$.category)) { $.table.path.push( pathItem = this.identAst() ); } continue;
      case 531: switch(this.l()) {
        case '(': case '[': if(this.fromArgumentsAndFilter({pathStep:pathItem},532)) { pathItem = null; } continue;
        default: this.s=532; continue;
      }
      case 532: switch(this.l()) {
        case '.': if(this.c(533)) { if (!pathItem && !$.table.scope) {
$.table.scope = $.table.path.length; $.category = 'ref';
this.warning( 'syntax-invalid-path-separator', this.lb(),
{ '#': 'dot', code: '.', newcode: ':' } );
} } continue;
        default: this.gr(['Id','as']); continue;
      }
      case 533: if(this.miA(534,$.category)) { $.table.path.push( pathItem = this.identAst() ); } continue;
      case 534: switch(this.l()) {
        case '(': case '[': if(this.fromArgumentsAndFilter({pathStep:pathItem},532)) { pathItem = null; } continue;
        default: this.s=532; continue;
      }
      default:
      this.attachLocation( $.table.path );
      return this.exit_();
    }
  }
  fromArgumentsAndFilter($,$next) {
    this.rule_(536,$next);
    for(;;) switch(this.s) {
      case 536: switch(this.l()) {
        case '(': if(this.c(537)) { $.pathStep.args = this.createDict(); $.pathStep.$syntax = ':'; } continue;
        default: this.s=541; continue;
      }
      case 537: switch(this.lk()) {
        case 'Id': this.s=538; continue;
        default: this.ei(); continue;
      }
      case 538: switch(this.l()) {
        case 'Id': this.fromNamedArgument($,539); continue;
        default: this.s=540; continue;
      }
      case 539: switch(this.l()) {
        case ',': this.c(538); continue;
        case ')': this.s=540; continue;
        default: this.e(); continue;
      }
      case 540: this.m(541,')'); continue;
      case 541: switch(this.l()) {
        case '[': this.cardinalityAndFilter($,0); continue;
        default: this.gr(['Id','.','as']); continue;
      }
      default: return this.exit_();
    }
  }
  fromNamedArgument($,$next) {
    this.rule_(543,$next);
    let name; let expr; let _;
    for(;;) switch(this.s) {
      case 543: if(this.mi(544,'paramname')) name=this.lb(); continue;
      case 544: this.m(545,':'); continue;
      case 545: if(this.expression(_={},0)) {expr=_.expr; this.addDef( expr, $.pathStep, 'args', 0, this.identAst( name ) ); } continue;
      default: return this.exit_();
    }
  }
  cardinalityAndFilter($,$next) {
    this.rule_(547,$next);
    for(;;) switch(this.s) {
      case 547: this.m(548,'['); continue;
      case 548: switch(this.l()) {
        case 'Number': if(this.gc(550,'beforeColon') && this.c(549)) { $.pathStep.cardinality = { targetMax: this.unsignedIntegerLiteral(), location: this.lb().location }; } continue;
        default: this.s=550; continue;
      }
      case 549: this.m(550,':'); continue;
      case 550: this.filterClauses({pathStep:$.pathStep},551); continue;
      case 551: this.m(0,']'); continue;
      default: return this.exit_();
    }
  }
  filterClauses($,$next) {
    this.rule_(553,$next);
    let cond; let _;
    for(;;) switch(this.s) {
      case 553: switch(this.lk()) {
        case 'where': this.ck(554); continue;
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': this.s=554; continue;
        case 'group': case 'limit': case 'order': case 'having': this.gP(555); continue;
        default: this.gi(555); continue;
      }
      case 554: if(this.condition(_={},555)) {cond=_.expr; $.pathStep.where = cond; } continue;
      case 555: switch(this.lk()) {
        case 'group': this.s=556;{ this.csnParseOnly('syntax-unexpected-sql-clause', 1, { keyword: 'group by' }); } continue;
        default: this.s=557; continue;
      }
      case 556: this.groupByClause({query:$.pathStep},557); continue;
      case 557: switch(this.lk()) {
        case 'having': if(this.ck(558)) { this.csnParseOnly('syntax-unexpected-sql-clause', -1, { keyword: 'having' }); } continue;
        default: this.s=559; continue;
      }
      case 558: if(this.condition(_={},559)) {cond=_.expr; $.pathStep.having = cond; } continue;
      case 559: switch(this.lk()) {
        case 'limit': case 'order': this.s=560;{ if (this.lk() === 'limit') this.csnParseOnly('syntax-unexpected-sql-clause', 0, { keyword: 'limit' } ); else this.csnParseOnly('syntax-unexpected-sql-clause', 1, { keyword: 'order by' } ); } continue;
        default: this.gr([']']); continue;
      }
      case 560: this.orderByLimitOffset({query:$.pathStep},0); continue;
      default: return this.exit_();
    }
  }
  excludingClause($,$next) {
    this.rule_(562,$next);
    for(;;) switch(this.s) {
      case 562: this.mk(563,'excluding'); continue;
      case 563: if(this.m(564,'{')) { $.query.excludingDict = this.createDict(); } continue;
      case 564: switch(this.l()) {
        case 'Id': this.s=565; continue;
        default: this.e(); continue;
      }
      case 565: switch(this.l()) {
        case 'Id': if(this.ciA(566,'ref')) { this.addDef( { location: this.lb().location }, $.query, 'excludingDict', '', this.identAst() ); } continue;
        default: this.s=567; continue;
      }
      case 566: switch(this.l()) {
        case ',': this.c(565); continue;
        case '}': this.s=567; continue;
        default: this.e(); continue;
      }
      case 567: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.query.excludingDict ); } continue;
      default: return this.exit_();
    }
  }
  selectItemsList($,$next) {
    this.rule_(569,$next);
    for(;;) switch(this.s) {
      case 569: if(this.m(570,'{')) {this.inSelectItem(0,'top'); $.query.columns = this.createArray( $.start ); } continue;
      case 570: switch(this.l()) {
        case '*': if(this.c(571)) { $.query.columns.push( this.valueWithLocation() ); } continue;
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case '@': case '{': case 'Number': case 'String': case 'QuotedLiteral': this.selectItemDef({columns:$.query.columns},571); continue;
        default: this.s=572; continue;
      }
      case 571: switch(this.l()) {
        case ',': this.c(570); continue;
        case '}': this.s=572; continue;
        default: this.e(); continue;
      }
      case 572: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.query.columns ); } continue;
      default: return this.exit_();
    }
  }
  nestedSelectItemsList($,$next) {
    this.rule_(574,$next);
    for(;;) switch(this.s) {
      case 574: if(this.m(575,'{')) {this.inSelectItem(0,'nested'); $.query[$.clause] = this.createArray(); } continue;
      case 575: switch(this.l()) {
        case '*': if(this.c(576)) { $.query[$.clause].push( this.valueWithLocation() ); } continue;
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case '@': case '{': case 'Number': case 'String': case 'QuotedLiteral': this.selectItemDef({columns:$.query[$.clause]},576); continue;
        default: this.s=577; continue;
      }
      case 576: switch(this.l()) {
        case ',': this.c(575); continue;
        case '}': this.s=577; continue;
        default: this.e(); continue;
      }
      case 577: if(this.m(0,'}')) {this.afterBrace(); this.finalizeDictOrArray( $.query[$.clause] ); } continue;
      default: return this.exit_();
    }
  }
  selectItemDef($,$next) {
    this.rule_(579,$next);
    let art=new XsnArtifact(); let alias;
    let expr; let as; let target; let cond; let assoc; let card; let _;
    { $.columns.push( art );
this.docComment( art ); }
    for(;;) switch(this.s) {
      case 579: switch(this.l()) {
        case '@': this.annoAssignCol({art},579); continue;
        default: this.s=580; continue;
      }
      case 580: switch(this.lk()) {
        case 'virtual': if(this.lP(['Id','#','(','+','-',':','?','{','key','not','case','cast','null','true','false','Number','String','exists','QuotedLiteral']) && this.gc(581,'modifierRestriction') && this.ck(581)) { art.virtual = this.valueWithLocation( true ); } continue;
        default: this.s=581; continue;
      }
      case 581: switch(this.lk()) {
        case 'key': if(this.gc(582,'modifierRestriction') && this.ck(582)) { art.key = this.valueWithLocation( true ); } continue;
        default: this.s=582; continue;
      }
      case 582: switch(this.l()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'Number': case 'String': case 'QuotedLiteral': if(this.expression(_={},583)) {expr=_.expr; art.value = expr; } continue;
        case '{': this.nestedSelectItemsList({query:art,clause:'expand'},590); continue;
        default: this.e(); continue;
      }
      case 583: switch(this.lk()) {
        case 'as': if(this.ck(584)) as=this.lb(); continue;
        case 'Id': if(this.ci(585,'ItemAlias')) { art.name = this.fragileAlias( true ); } continue;
        default: if(this.gi(585)) { alias = this.classifyImplicitName( 'ItemImplicit', expr ); } continue;
      }
      case 584: if(this.mi(585,'ItemAlias')) { art.name = this.identAst(); } continue;
      case 585: switch(this.l()) {
        case '{': this.s=586;{ this.reportExpandInline( art, false ); } continue;
        case '.': if(this.c(588)) { this.reportUnexpectedSpace( this.lb(), this.la().location, true );
this.reportExpandInline( art, as || true );
if (alias) alias.token.parsedAs = alias.parsedAs; } continue;
        default: this.s=593; continue;
      }
      case 586: this.nestedSelectItemsList({query:art,clause:'expand'},587); continue;
      case 587: switch(this.lk()) {
        case 'excluding': this.excludingClause({query:art},593); continue;
        default: this.s=593; continue;
      }
      case 588: switch(this.l()) {
        case '{': this.nestedSelectItemsList({query:art,clause:'inline'},589); continue;
        case '*': if(this.c(593)) { art.inline = [ this.valueWithLocation() ]; } continue;
        default: this.e(); continue;
      }
      case 589: switch(this.lk()) {
        case 'excluding': this.excludingClause({query:art},593); continue;
        default: this.s=593; continue;
      }
      case 590: switch(this.lk()) {
        case 'excluding': this.excludingClause({query:art},591); continue;
        default: this.s=591; continue;
      }
      case 591: this.mk(592,'as'); continue;
      case 592: if(this.mi(593,'ItemAlias')) { art.name = this.identAst(); } continue;
      case 593: this.s=594;{ this.docComment( art ); } continue;
      case 594: switch(this.l()) {
        case '@': this.annoAssignMid({art},594); continue;
        default: this.s=595; continue;
      }
      case 595: switch(this.l()) {
        case ':': this.c(596); continue;
        default: this.gr([',']); continue;
      }
      case 596: switch(this.lk()) {
        case 'type': this.lP() && this.typeTypeOf({art},610); continue;
        case 'localized': if(this.ckP(597,['Id'])) { art.localized = this.valueWithLocation( true ); } continue;
        case 'Id': this.s=597; continue;
        case 'redirected': this.ckP(598,['to']); continue;
        case 'association': if(this.ckP(602,['[','to'])) {assoc=this.lb(); this.associationInSelectItem( art ); } continue;
        case 'composition': if(this.ckP(604,['[','of'])) {assoc=this.lb(); this.associationInSelectItem( art ); } continue;
        default: this.ei(); continue;
      }
      case 597: this.typeRefOptArgs({art},610); continue;
      case 598: this.mk(599,'to'); continue;
      case 599: if(this.simplePath(_={category:'artref'},600)) {target=_.ref; art.target = target; } continue;
      case 600: switch(this.lk()) {
        case 'on': this.ck(601); continue;
        case '{': this.foreignKeysBlock({art},610); continue;
        default: this.s=610; continue;
      }
      case 601: if(this.condition(_={},610)) {cond=_.expr; art.on = cond; } continue;
      case 602: switch(this.l()) {
        case '[': this.cardinality({art},603); continue;
        default: this.s=603; continue;
      }
      case 603: this.mk(606,'to'); continue;
      case 604: switch(this.l()) {
        case '[': this.cardinality({art},605); continue;
        default: this.s=605; continue;
      }
      case 605: this.mk(606,'of'); continue;
      case 606: switch(this.lk()) {
        case 'one': case 'many': if(this.ckP(607,['Id'])) card=this.lb(); continue;
        default: this.s=607; continue;
      }
      case 607: if(this.simplePath(_={category:'artref'},608)) {target=_.ref; this.setAssocAndComposition( art, assoc, card, target ); } continue;
      case 608: this.mk(609,'on'); continue;
      case 609: if(this.condition(_={},610)) {expr=_.expr; art.on = expr; } continue;
      case 610: this.s=611;{ this.docComment( art ); } continue;
      case 611: switch(this.l()) {
        case '@': this.annoAssignStd({art},611); continue;
        default: this.gr([',']); continue;
      }
      default:
      this.attachLocation( art );
      return this.exit_();
    }
  }
  whereGroupByHaving($,$next) {
    this.rule_(613,$next);
    let cond; let _;
    for(;;) switch(this.s) {
      case 613: switch(this.lk()) {
        case 'where': this.ck(614); continue;
        default: this.s=615; continue;
      }
      case 614: if(this.condition(_={},615)) {cond=_.expr; $.query.where = cond; } continue;
      case 615: switch(this.lk()) {
        case 'group': this.groupByClause($,616); continue;
        default: this.s=616; continue;
      }
      case 616: switch(this.lk()) {
        case 'having': this.ck(617); continue;
        default: this.gr(['limit','order']); continue;
      }
      case 617: if(this.condition(_={},0)) {cond=_.expr; $.query.having = cond; } continue;
      default: return this.exit_();
    }
  }
  groupByClause($,$next) {
    this.rule_(619,$next);
    let expr; let _;
    for(;;) switch(this.s) {
      case 619: this.mk(620,'group'); continue;
      case 620: this.mk(621,'by'); continue;
      case 621: if(this.expression(_={},622)) {expr=_.expr; $.query.groupBy = [ expr ]; } continue;
      case 622: switch(this.l()) {
        case ',': this.c(623); continue;
        default: this.gr(['limit','order','having']); continue;
      }
      case 623: if(this.expression(_={},622)) {expr=_.expr; $.query.groupBy.push( expr ); } continue;
      default: return this.exit_();
    }
  }
  orderByLimitOffset($,$next) {
    this.rule_(625,$next);
    let expr; let _;
    for(;;) switch(this.s) {
      case 625: switch(this.lk()) {
        case 'order': this.orderByClause($,626); continue;
        default: this.s=626; continue;
      }
      case 626: switch(this.lk()) {
        case 'limit': this.ck(627); continue;
        default: this.gr([]); continue;
      }
      case 627: if(this.expression(_={},628)) {expr=_.expr; $.query.limit = { rows: expr }; } continue;
      case 628: switch(this.lk()) {
        case 'offset': this.ck(629); continue;
        default: this.gr([]); continue;
      }
      case 629: if(this.expression(_={},0)) {expr=_.expr; $.query.limit.offset = expr; } continue;
      default: return this.exit_();
    }
  }
  orderByClause($,$next) {
    this.rule_(631,$next);
    let expr; let _;
    for(;;) switch(this.s) {
      case 631: this.mk(632,'order'); continue;
      case 632: this.mk(633,'by'); continue;
      case 633: if(this.orderByExpression(_={},634)) {expr=_.expr; $.query.orderBy = [ expr ]; } continue;
      case 634: switch(this.l()) {
        case ',': this.c(635); continue;
        default: this.gr(['limit']); continue;
      }
      case 635: if(this.orderByExpression(_={},634)) {expr=_.expr; $.query.orderBy.push( expr ); } continue;
      default: return this.exit_();
    }
  }
  orderByExpression($,$next) {
    $.expr??=undefined;
    this.rule_(637,$next);
    for(;;) switch(this.s) {
      case 637: this.expression($,638); continue;
      case 638: switch(this.lk()) {
        case 'asc': case 'desc': if(this.ck(639)) { $.expr.sort = this.valueWithLocation(); } continue;
        default: this.s=639; continue;
      }
      case 639: switch(this.lk()) {
        case 'nulls': this.ck(640); continue;
        default: this.gr([',','limit']); continue;
      }
      case 640: switch(this.lk()) {
        case 'last': case 'first': if(this.ck(0)) { $.expr.nulls = this.valueWithLocation(); } continue;
        default: this.e(); continue;
      }
      default: return this.exit_();
    }
  }
  conditionEOF($,$next) {
    $.cond??=undefined;
    this.rule_(642,$next);
    let _;
    for(;;) switch(this.s) {
      case 642: if(this.expression(_={},643)) $.cond=_.expr; continue;
      case 643: this.m(0,'EOF'); continue;
      default: return this.exit_();
    }
  }
  condition($,$next) {
    $.expr??=undefined;
    this.rule_(645,$next);
    for(;;) switch(this.s) {
      case 645: this.expression($,0); continue;
      default: return this.exit_();
    }
  }
  valuePath($,$next,$startState) {
    $.expr??={ path: [] };
    this.rule_($startState??647,$next);
    let pathItem;
    for(;;) switch(this.s) {
      case 647: if(this.mi(648,'ref')) { $.expr.path.push( pathItem = this.identAst() ); } continue;
      case 648: switch(this.l()) {
        case '(': case '[': this.argumentsAndFilter({pathStep:pathItem},649); continue;
        default: this.s=649; continue;
      }
      case 649: switch(this.l()) {
        case '.': this.gc(0,'isDotForPath') && this.c(650); continue;
        default: this.gr(['*','+','-','/','<','=','>','?','!=','<=','<>','>=','in','is','or','||','and','not','like','between']); continue;
      }
      case 650: if(this.miA(651,'ref')) { $.expr.path.push( pathItem = this.identAst() ); } continue;
      case 651: switch(this.l()) {
        case '(': case '[': if(this.argumentsAndFilter({pathStep:pathItem},649)) { pathItem = null; } continue;
        default: this.s=649; continue;
      }
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  expression($,$next,$startState) {
    $.expr??={};
    this.rule_($startState??653,$next);
    let e; let open; let _;
    for(;;) switch(this.s) {
      case 653: switch(this.lk()) {
        case '(': this.expressionOrQueryParens($,654); continue;
        case '#': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'QuotedLiteral': this.literalValue($,664); continue;
        case ':': if(this.c(655)) { this.reportUnexpectedSpace(); } continue;
        case '?': if(this.c(664)) { this.csnParseOnly( 'syntax-unsupported-param', -1, { '#': 'dynamic', code: '?' } );
$.expr = this.attachLocation({ param: this.valueWithLocation(), scope: 'param' }); } continue;
        case 'Id': if(this.valuePath(_={},657)) {e=_.expr; $.expr = this.valuePathAst( e ); } continue;
        case 'new': this.lP() && this.newAndValuePath($,664); continue;
        case 'exists': if(this.ck(660)) { $.expr = this.applyOpToken(); } continue;
        case 'case': this.caseExpression($,664); continue;
        case 'cast': this.castFunction($,664); continue;
        case '+': case '-': if(this.ec('precRight_',30) && this.c(663)) { $.expr = this.applyOpToken(); } continue;
        case 'not': if(this.ec('precRight_',8) && this.ck(663)) { $.expr = this.applyOpToken(); } continue;
        default: this.ei(); continue;
      }
      case 654: this.s=664;{ $.expr = this.taggedIfQuery( $.expr ); } continue;
      case 655: switch(this.l()) {
        case 'Id': if(this.ciA(656,'paramref')) { $.expr = { path: [ this.identAst() ], location: this.startLocation(), scope: 'param' }; } continue;
        case 'Number': if(this.c(664)) { this.csnParseOnly( 'syntax-unsupported-param', -1, { '#': 'positional', code: ':' + this.lb().text } );
$.expr = this.attachLocation({ param: this.unsignedIntegerLiteral(), scope: 'param' }); } continue;
        default: this.e(); continue;
      }
      case 656: switch(this.l()) {
        case '.': if(this.valuePath($,664,649)) { $.expr = this.valuePathAst( $.expr ); } continue;
        default: this.s=664;{ this.attachLocation( $.expr ); } continue;
      }
      case 657: switch(this.lk()) {
        case 'over': if(this.ck(658)) { this.pushXprToken( $.expr.suffix = [] ); } continue;
        default: this.s=659; continue;
      }
      case 658: this.overClause(e={outer:$.expr.suffix},659); continue;
      case 659: this.s=664;{ this.attachLocation( $.expr ); } continue;
      case 660: switch(this.l()) {
        case '(': if(this.c(661)) open=this.lb(); continue;
        case 'Id': if(this.valuePath(_={},664)) {e=_.expr; e = this.valuePathAst( e ); e.$expected = 'exists';
$.expr.args.push( e ); this.attachLocation( $.expr ); } continue;
        case '?': if(this.c(664)) { this.csnParseOnly( 'syntax-unsupported-param', -1, { '#': 'dynamic', code: '?' } );
$.expr.args.push( { param: this.valueWithLocation(), scope: 'param' } ); this.attachLocation( $.expr ); } continue;
        default: this.e(); continue;
      }
      case 661: if(this.queryExpression(_={},662)) e=_.expr; continue;
      case 662: if(this.m(664,')')) { $.expr.args.push( this.taggedIfQuery( this.surroundByParens( e, open ) ) );
this.attachLocation( $.expr ); } continue;
      case 663: if(this.expression(_={},664)) {e=_.expr; $.expr = this.signedExpression( $.expr, e ); } continue;
      case 664: switch(this.lk()) {
        case '*': case '/': if(this.gc(0,'precLeft_',24) && this.c(668)) { $.expr = this.applyOpToken( $.expr, 'nary' ); } continue;
        case '+': case '-': if(this.gc(0,'precLeft_',22) && this.c(668)) { $.expr = this.applyOpToken( $.expr, 'nary' ); } continue;
        case '||': if(this.gc(0,'precLeft_',20) && this.c(668)) { $.expr = this.applyOpToken( $.expr, 'nary' ); } continue;
        case 'and': if(this.gc(0,'precLeft_',4) && this.ck(668)) { $.expr = this.applyOpToken( $.expr, 'nary' ); } continue;
        case 'or': if(this.gc(0,'precLeft_',2) && this.ck(668)) { $.expr = this.applyOpToken( $.expr, 'nary' ); } continue;
        case '?': if(this.gc(0,'precLeft_',0) && this.c(665)) { $.expr = this.applyOpToken( $.expr, '?:' ); } continue;
        case '<': case '=': case '>': case '!=': case '<=': case '<>': case '>=': if(this.gc(0,'precNone_',10) && this.c(667)) { $.expr = this.applyOpToken( $.expr ); } continue;
        case 'is': if(this.gc(0,'precNone_',10) && this.ck(669)) { $.expr = this.applyOpToken( $.expr ); } continue;
        case 'not': if(this.gc(0,'isNegatedRelation','10') && this.ck(671)) { $.expr = this.applyOpToken( $.expr ); } continue;
        case 'in': case 'like': case 'between': if(this.gc(0,'precNone_',10) && this.g(671)) { $.expr = { op: { val: 'ixpr', location: this.la().location }, args: [ $.expr ] }; } continue;
        default: this.gr([]); continue;
      }
      case 665: if(this.expression(_={},666)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 666: if(this.m(668,':')) { this.pushXprToken( $.expr ); } continue;
      case 667: switch(this.lk()) {
        case 'all': case 'any': case 'some': if(this.ck(668)) { this.pushXprToken( $.expr ); } continue;
        default: this.s=668; continue;
      }
      case 668: if(this.expression(_={},679)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 669: switch(this.lk()) {
        case 'not': if(this.ck(670)) { this.pushXprToken( $.expr ); } continue;
        default: this.s=670; continue;
      }
      case 670: if(this.mk(679,'null')) { this.pushXprToken( $.expr ); } continue;
      case 671: switch(this.lk()) {
        case 'between': if(this.ck(672)) { this.pushXprToken( $.expr ); } continue;
        case 'in': if(this.ck(675)) { this.pushXprToken( $.expr ); } continue;
        case 'like': if(this.ck(676)) { this.pushXprToken( $.expr ); } continue;
        default: this.e(); continue;
      }
      case 672: if(this.expression(_={},673)) {e=_.expr; $.expr.args?.push( e ); } continue;
      case 673: if(this.mk(674,'and')) { this.pushXprToken( $.expr ); } continue;
      case 674: if(this.expression(_={},679)) {e=_.expr; $.expr.args?.push( e ); } continue;
      case 675: if(this.expression(_={},679)) {e=_.expr; $.expr.args?.push( this.secureParens( e ) ); } continue;
      case 676: if(this.expression(_={},677)) {e=_.expr; $.expr.args?.push( e ); } continue;
      case 677: switch(this.lk()) {
        case 'escape': if(this.ck(678)) { this.pushXprToken( $.expr ); } continue;
        default: this.s=679; continue;
      }
      case 678: if(this.expression(_={},679)) {e=_.expr; $.expr.args?.push( e ); } continue;
      case 679: this.s=664;{ this.attachLocation( $.expr ); } continue;
      default: return this.exit_();
    }
  }
  expressionOrQueryParens($,$next) {
    $.expr??=undefined;
    this.rule_(681,$next);
    for(;;) switch(this.s) {
      case 681: if(this.m(682,'(')) {this.queryOnLeft();} continue;
      case 682: switch(this.lk()) {
        case '(': this.expressionOrQueryParens($,683); continue;
        case 'Id': case '#': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': if(this.expression($,685)) {this.queryOnLeft(0,'expr');} continue;
        case 'select': this.queryExpression($,686); continue;
        default: this.ei(); continue;
      }
      case 683: switch(this.lk()) {
        case '*': case '+': case '-': case '/': case '<': case '=': case '>': case '?': case '!=': case '<=': case '<>': case '>=': case 'in': case 'is': case 'or': case '||': case 'and': case 'not': case 'like': case 'between': if(this.expression($,684,654)) {this.queryOnLeft(0,'expr');} continue;
        case ',': if(this.continueExpressionslist($,686)) {this.queryOnLeft(0,'expr');} continue;
        case 'limit': case 'minus': case 'order': case 'union': case 'except': case 'intersect': this.gc(686,'queryOnLeft') && this.queryExpression($,686,466); continue;
        default: this.s=686; continue;
      }
      case 684: switch(this.l()) {
        case ',': this.continueExpressionslist($,686); continue;
        default: this.s=686; continue;
      }
      case 685: switch(this.l()) {
        case ',': this.continueExpressionslist($,686); continue;
        default: this.s=686; continue;
      }
      case 686: if(this.m(0,')')) { this.surroundByParens( $.expr ); } continue;
      default: return this.exit_();
    }
  }
  continueExpressionslist($,$next) {
    this.rule_(688,$next);
    let e; let _;
    for(;;) switch(this.s) {
      case 688: if(this.m(689,',')) { $.expr = { op: this.valueWithLocation( 'list' ), args: [ $.expr ], location: { ... $.expr.$parens?.at( -1 ) ?? $.expr.location } }; } continue;
      case 689: switch(this.lk()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': this.s=690; continue;
        default: this.ei(); continue;
      }
      case 690: switch(this.lk()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': if(this.expression(_={},691)) {e=_.expr; $.expr.args.push( e ); } continue;
        default: this.gi(0,[')']); continue;
      }
      case 691: switch(this.l()) {
        case ',': this.c(690); continue;
        default: this.gr([')']); continue;
      }
      case 0: { this.attachLocation( $.expr ); }
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  newAndValuePath($,$next) {
    $.expr??=undefined;
    this.rule_(693,$next);
    let e; let _;
    for(;;) switch(this.s) {
      case 693: if(this.mk(694,'new')) { $.expr = this.applyOpToken(); } continue;
      case 694: if(this.valuePath(_={},0)) {e=_.expr; e = this.valuePathAst( e );
if (e.op?.val !== 'ixpr') $.expr.args.push( e ); else $.expr.args.push( ...e.args ); } continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  caseExpression($,$next) {
    $.expr??=undefined;
    this.rule_(696,$next);
    let e; let _;
    for(;;) switch(this.s) {
      case 696: if(this.mk(697,'case')) { $.expr.op = { val: 'ixpr', location: this.lb().location }; $.expr.args = []; this.pushXprToken( $.expr ); } continue;
      case 697: switch(this.lk()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': if(this.expression(_={},698)) {e=_.expr; $.expr.args.push( e ); } continue;
        case 'when': this.gP(698); continue;
        default: this.gi(698); continue;
      }
      case 698: switch(this.lk()) {
        case 'when': this.s=699; continue;
        default: this.e(); continue;
      }
      case 699: switch(this.lk()) {
        case 'when': if(this.ck(700)) { this.pushXprToken( $.expr ); } continue;
        default: this.s=703; continue;
      }
      case 700: if(this.expression(_={},701)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 701: if(this.mk(702,'then')) { this.pushXprToken( $.expr ); } continue;
      case 702: if(this.expression(_={},699)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 703: switch(this.lk()) {
        case 'else': if(this.ck(704)) { this.pushXprToken( $.expr ); } continue;
        default: this.s=705; continue;
      }
      case 704: if(this.expression(_={},705)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 705: if(this.mk(0,'end')) { this.pushXprToken( $.expr ); } continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  castFunction($,$next) {
    $.expr??=undefined;
    this.rule_(707,$next);
    let arg; let _;
    for(;;) switch(this.s) {
      case 707: if(this.mk(708,'cast')) { $.expr.op = this.valueWithLocation(); } continue;
      case 708: if(this.m(709,'(')) { $.expr.args = this.createArray(); } continue;
      case 709: if(this.expression(_={},710)) {arg=_.expr; $.expr.args?.push( arg ); } continue;
      case 710: this.mk(711,'as'); continue;
      case 711: this.typeRefOptArgs({art:$.expr},712); continue;
      case 712: if(this.m(0,')')) { this.finalizeDictOrArray( $.expr.args ); } continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  argumentsAndFilter($,$next) {
    this.rule_(714,$next);
    let open; let expr; let id; let _;
    for(;;) switch(this.s) {
      case 714: switch(this.l()) {
        case '(': if(this.c(715)) {open=this.lb();this.prepareSpecialFunction(); $.pathStep.args = this.createArray(); } continue;
        default: this.s=734; continue;
      }
      case 715: switch(this.l()) {
        case 'Id': if(this.gc(716,'isNamedArg') && this.ciA(722,'paramname')) id=this.lb(); continue;
        default: this.s=716; continue;
      }
      case 716: switch(this.l()) {
        case 'Id': case '#': case '(': case '*': case '+': case '-': case ':': case '?': case 'Id_all': case 'Number': case 'String': case 'QuotedLiteral': if(this.funcExpression(_={},717)) {expr=_.expr; $.pathStep.args.push( expr ); } continue;
        default: this.s=733; continue;
      }
      case 717: switch(this.l()) {
        case ',': if(this.c(718)) {this.nextFunctionArgument();} continue;
        default: this.s=719; continue;
      }
      case 718: switch(this.lk()) {
        case 'Id': case '#': case '(': case '*': case '+': case '-': case ':': case '?': case 'not': case 'case': case 'cast': case 'null': case 'true': case 'false': case 'Id_all': case 'Number': case 'String': case 'exists': case 'QuotedLiteral': if(this.funcExpression(_={},717)) {expr=_.expr; $.pathStep.args.push( expr ); } continue;
        case ')': case 'order': this.gP(719); continue;
        default: this.ei(); continue;
      }
      case 719: switch(this.lk()) {
        case 'order': if(this.ck(720)) { expr = $.pathStep.args[$.pathStep.args.length - 1] = this.applyOpToken( expr ); } continue;
        default: this.s=733; continue;
      }
      case 720: if(this.mk(721,'by')) { this.pushXprToken( expr ); } continue;
      case 721: if(this.orderByClauseAsXpr({outer:expr.args},733)) { this.attachLocation( expr ); } continue;
      case 722: switch(this.l()) {
        case ':': if(this.c(723)) { $.pathStep.args = this.createDict( open ); $.pathStep.$syntax = ':'; } continue;
        case '=>': if(this.c(728)) { $.pathStep.args = this.createDict(); } continue;
        default: this.e(); continue;
      }
      case 723: if(this.expression(_={},724)) {expr=_.expr; this.addNamedArg( $.pathStep, id, expr ); } continue;
      case 724: switch(this.l()) {
        case ',': this.c(725); continue;
        default: this.s=733; continue;
      }
      case 725: switch(this.l()) {
        case 'Id': if(this.ciA(726,'paramname')) id=this.lb(); continue;
        case ')': this.s=733; continue;
        default: this.e(); continue;
      }
      case 726: this.m(727,':'); continue;
      case 727: if(this.expression(_={},724)) {expr=_.expr; this.addNamedArg( $.pathStep, id, expr ); } continue;
      case 728: if(this.expression(_={},729)) {expr=_.expr; this.addNamedArg( $.pathStep, id, expr ); } continue;
      case 729: switch(this.l()) {
        case ',': this.c(730); continue;
        default: this.s=733; continue;
      }
      case 730: switch(this.l()) {
        case 'Id': if(this.ciA(731,'paramname')) id=this.lb(); continue;
        case ')': this.s=733; continue;
        default: this.e(); continue;
      }
      case 731: this.m(732,'=>'); continue;
      case 732: if(this.expression(_={},729)) {expr=_.expr; this.addNamedArg( $.pathStep, id, expr ); } continue;
      case 733: this.m(734,')'); continue;
      case 734: switch(this.l()) {
        case '[': this.cardinalityAndFilter($,0); continue;
        default: this.gr(['*','+','-','.','/','<','=','>','?','!=','<=','<>','>=','in','is','or','||','and','not','like','between']); continue;
      }
      default: return this.exit_();
    }
  }
  funcExpression($,$next) {
    $.expr??=undefined;
    this.rule_(736,$next);
    let args;
    let tok; let e; let _;
    for(;;) switch(this.s) {
      case 736: switch(this.lGenericIntroOrExpr()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'Number': case 'String': case 'QuotedLiteral': if(this.expression(_={},738)) $.expr=_.expr; continue;
        case 'GenericExpr': if(this.ckA(738)) {tok=this.lb(); $.expr = { val: tok.keyword ?? tok.type, location: tok.location, literal: 'token' }; } continue;
        case 'GenericIntro': if(this.ckA(737)) { $.expr = this.applyOpToken(); args = $.expr.args; } continue;
        default: this.e(); continue;
      }
      case 737: if(this.expression(_={},738)) {e=_.expr; $.expr.args.push( e ); } continue;
      case 738: switch(this.lGenericSeparator()) {
        case 'GenericSeparator': if(this.ckA(739)) { if (args) this.pushXprToken( args ); else { $.expr= this.applyOpToken( $.expr ); args = $.expr.args; } } continue;
        default: this.gr([')',',','order']); continue;
      }
      case 739: switch(this.lGenericExpr()) {
        case 'Id': case '#': case '(': case '+': case '-': case ':': case '?': case 'Number': case 'String': case 'QuotedLiteral': if(this.expression(_={},738)) {e=_.expr; args.push( e ); } continue;
        case 'GenericExpr': if(this.ckA(738)) { this.pushXprToken( args ); } continue;
        default: this.e(); continue;
      }
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  overClause($,$next) {
    this.rule_(741,$next);
    let over=[];
    for(;;) switch(this.s) {
      case 741: this.m(742,'('); continue;
      case 742: switch(this.lk()) {
        case 'partition': if(this.ck(743)) { this.pushXprToken( over ); } continue;
        default: this.s=745; continue;
      }
      case 743: if(this.mk(744,'by')) { this.pushXprToken( over ); } continue;
      case 744: this.expressionsAsXpr({outer:over},745); continue;
      case 745: switch(this.lk()) {
        case 'order': if(this.ck(746)) { this.pushXprToken( over ); } continue;
        default: this.s=748; continue;
      }
      case 746: if(this.mk(747,'by')) { this.pushXprToken( over ); } continue;
      case 747: this.orderByClauseAsXpr({outer:over},748); continue;
      case 748: switch(this.lk()) {
        case 'rows': if(this.ck(749)) { this.pushXprToken( over ); } continue;
        default: this.s=750; continue;
      }
      case 749: this.windowFrameClause({outer:over},750); continue;
      case 750: this.m(0,')'); continue;
      default:
      $.outer.push( this.surroundByParens( this.ixprAst( over ) ) );
      return this.exit_();
    }
  }
  expressionsAsXpr($,$next) {
    this.rule_(752,$next);
    let args=[];
    let expr; let _;
    for(;;) switch(this.s) {
      case 752: if(this.expression(_={},753)) {expr=_.expr; args.push( expr ); } continue;
      case 753: switch(this.l()) {
        case ',': if(this.c(754)) { this.pushXprToken( args ); } continue;
        default: this.gr([')','rows','order']); continue;
      }
      case 754: if(this.expression(_={},753)) {expr=_.expr; args.push( expr ); } continue;
      default:
      $.outer.push( this.ixprAst( args ) );
      return this.exit_();
    }
  }
  orderByClauseAsXpr($,$next) {
    this.rule_(756,$next);
    let args=[];
    for(;;) switch(this.s) {
      case 756: this.orderBySpecAsXpr({args},757); continue;
      case 757: switch(this.l()) {
        case ',': if(this.c(758)) { this.pushXprToken( args ); } continue;
        default: this.gr([')']); continue;
      }
      case 758: this.orderBySpecAsXpr({args},757); continue;
      default:
      $.outer.push( this.ixprAst( args ) );
      return this.exit_();
    }
  }
  orderBySpecAsXpr($,$next) {
    this.rule_(760,$next);
    let expr; let _;
    for(;;) switch(this.s) {
      case 760: if(this.expression(_={},761)) {expr=_.expr; $.args.push( expr ); } continue;
      case 761: switch(this.lk()) {
        case 'asc': case 'desc': if(this.ck(762)) { this.pushXprToken( $.args ); } continue;
        default: this.s=762; continue;
      }
      case 762: switch(this.lk()) {
        case 'nulls': if(this.ck(763)) { this.pushXprToken( $.args ); } continue;
        default: this.gr([')',',']); continue;
      }
      case 763: switch(this.lk()) {
        case 'last': case 'first': if(this.ck(0)) { this.pushXprToken( $.args ); } continue;
        default: this.e(); continue;
      }
      default: return this.exit_();
    }
  }
  windowFrameClause($,$next) {
    this.rule_(765,$next);
    let args=[];
    for(;;) switch(this.s) {
      case 765: switch(this.lk()) {
        case 'unbounded': if(this.ck(766)) { this.pushXprToken( args ); } continue;
        case 'Number': if(this.c(766)) { args.push( this.unsignedIntegerLiteral() ); } continue;
        case 'current': if(this.ck(767)) { this.pushXprToken( args ); } continue;
        case 'between': if(this.ck(768)) { this.pushXprToken( args ); } continue;
        default: this.e(); continue;
      }
      case 766: if(this.mk(0,'preceding')) { this.pushXprToken( args ); } continue;
      case 767: if(this.mk(0,'row')) { this.pushXprToken( args ); } continue;
      case 768: this.windowFrameBoundSpec({args},769); continue;
      case 769: if(this.mk(770,'and')) { this.pushXprToken( args ); } continue;
      case 770: this.windowFrameBoundSpec({args},0); continue;
      default:
      $.outer.push( this.ixprAst( args ) );
      return this.exit_();
    }
  }
  windowFrameBoundSpec($,$next) {
    this.rule_(772,$next);
    for(;;) switch(this.s) {
      case 772: switch(this.lk()) {
        case 'unbounded': if(this.ck(773)) { this.pushXprToken( $.args ); } continue;
        case 'Number': if(this.c(773)) { $.args.push( this.unsignedIntegerLiteral() ); } continue;
        case 'current': if(this.ck(775)) { this.pushXprToken( $.args ); } continue;
        default: this.e(); continue;
      }
      case 773: switch(this.lk()) {
        case 'following': this.ck(774); continue;
        case 'preceding': this.ck(774); continue;
        default: this.e(); continue;
      }
      case 774: if(this.gr([])) { this.pushXprToken( $.args ); } continue;
      case 775: if(this.mk(0,'row')) { this.pushXprToken( $.args ); } continue;
      default: return this.exit_();
    }
  }
  literalValue($,$next) {
    $.expr??={};
    this.rule_(777,$next);
    for(;;) switch(this.s) {
      case 777: switch(this.lk()) {
        case '#': if(this.c(778)) { this.reportUnexpectedSpace(); } continue;
        case 'null': if(this.ck(0)) { $.expr = { literal: 'null', val: null }; } continue;
        case 'true': case 'false': if(this.ck(0)) { $.expr = { literal: 'boolean', val: this.lb().keyword === 'true' }; } continue;
        case 'Number': if(this.c(0)) { $.expr = this.numberLiteral(); } continue;
        case 'String': if(this.c(0)) { $.expr = this.quotedLiteral(); } continue;
        case 'QuotedLiteral': if(this.c(0)) { $.expr = this.quotedLiteral(); } continue;
        default: this.e(); continue;
      }
      case 778: if(this.mi(0,'enumref')) { $.expr = { literal: 'enum', sym: this.identAst() } } continue;
      default:
      this.attachLocation( $.expr );
      return this.exit_();
    }
  }
  annoAssignStd($,$next) {
    this.rule_(780,$next);
    for(;;) switch(this.s) {
      case 780: if(this.m(781,'@')) {this.annoInSameLine(); this.reportUnexpectedSpace(); } continue;
      case 781: switch(this.l()) {
        case '(': this.annoAssignParen($,0); continue;
        case 'Id': this.annoAssignBase($,0); continue;
        default: this.e(); continue;
      }
      default:
      this.docComment( $.art );
      return this.exit_();
    }
  }
  annoAssignCol($,$next) {
    this.rule_(783,$next);
    for(;;) switch(this.s) {
      case 783: if(this.m(784,'@')) { this.reportUnexpectedSpace(); } continue;
      case 784: switch(this.l()) {
        case '(': this.annoAssignParen($,0); continue;
        case 'Id': this.annoAssignBase($,0); continue;
        default: this.e(); continue;
      }
      default:
      this.docComment( $.art );
      return this.exit_();
    }
  }
  annoAssignMid($,$next) {
    this.rule_(786,$next);
    let name; let _;
    for(;;) switch(this.s) {
      case 786: if(this.m(787,'@')) {this.annoInSameLine(); this.reportUnexpectedSpace(); } continue;
      case 787: switch(this.l()) {
        case '(': this.annoAssignParen($,0); continue;
        case 'Id': if(this.annoNamePath(_={category:'anno'},0)) {name=_.name; this.assignAnnotation( $.art, {}, name ); this.warnIfColonFollows( name ); } continue;
        default: this.e(); continue;
      }
      default:
      this.docComment( $.art );
      return this.exit_();
    }
  }
  annoAssignParen($,$next) {
    this.rule_(789,$next);
    for(;;) switch(this.s) {
      case 789: if(this.m(790,'(')) {this.annoInSameLine();} continue;
      case 790: switch(this.l()) {
        case 'Id': this.annoAssignBase({art:$.art},791); continue;
        default: this.s=792; continue;
      }
      case 791: switch(this.l()) {
        case ',': this.c(790); continue;
        case ')': this.s=792; continue;
        default: this.e(); continue;
      }
      case 792: this.m(0,')'); continue;
      default: return this.exit_();
    }
  }
  annoAssignBase($,$next) {
    this.rule_(794,$next);
    let value={};
    let name; let _;
    for(;;) switch(this.s) {
      case 794: if(this.annoNamePath(_={category:'anno'},795)) name=_.name; continue;
      case 795: switch(this.l()) {
        case ':': this.gc(0,'annoInSameLine') && this.c(796); continue;
        default: this.gr([]); continue;
      }
      case 796: if(this.annoValue(_={},0)) value=_.value; continue;
      default:
      this.assignAnnotation( $.art, value, name || {} );
      return this.exit_();
    }
  }
  annoNamePath($,$next) {
    $.name??=new XsnName();
    this.rule_(798,$next);
    let at;
    for(;;) switch(this.s) {
      case 798: if(this.miA(799,$.category)) { $.name.path = [ this.identAst() ]; } continue;
      case 799: switch(this.l()) {
        case '.': this.c(800); continue;
        default: this.s=802; continue;
      }
      case 800: switch(this.l()) {
        case 'Id': if(this.ciA(799,$.category)) { $.name.path.push( this.identAst() ); } continue;
        case '@': if(this.c(801)) at=this.lb(); continue;
        default: this.e(); continue;
      }
      case 801: if(this.miA(799,$.category)) { $.name.path.push( this.identAstWithPrefix( at ) ); } continue;
      case 802: switch(this.l()) {
        case '#': this.gc(0,'annoInSameLine') && this.annoPathVariant({nameOrRef:$.name},0); continue;
        default: this.gr([]); continue;
      }
      default:
      this.attachLocation( $.name );
      return this.exit_();
    }
  }
  annoPath($,$next) {
    this.rule_(804,$next);
    let at;
    for(;;) switch(this.s) {
      case 804: switch(this.l()) {
        case 'Id': if(this.ciA(806,$.category)) { $.nameOrRef.path = [ this.identAst() ]; } continue;
        case '@': if(this.c(805)) at=this.lb(); continue;
        default: this.e(); continue;
      }
      case 805: if(this.miA(806,$.category)) { $.nameOrRef.path = [ this.identAstWithPrefix( at ) ]; } continue;
      case 806: switch(this.l()) {
        case '.': this.c(807); continue;
        default: this.s=809; continue;
      }
      case 807: switch(this.l()) {
        case 'Id': if(this.ciA(806,$.category)) { $.nameOrRef.path.push( this.identAst() ); } continue;
        case '@': if(this.c(808)) at=this.lb(); continue;
        default: this.e(); continue;
      }
      case 808: if(this.miA(806,$.category)) { $.nameOrRef.path.push( this.identAstWithPrefix( at ) ); } continue;
      case 809: switch(this.l()) {
        case '#': this.annoPathVariant({nameOrRef:$.nameOrRef},0); continue;
        default: this.gr([]); continue;
      }
      default:
      this.attachLocation( $.nameOrRef );
      return this.exit_();
    }
  }
  annoPathVariant($,$next) {
    this.rule_(811,$next);
    for(;;) switch(this.s) {
      case 811: if(this.m(812,'#')) { this.reportUnexpectedSpace(); } continue;
      case 812: if(this.miA(813,'variant')) { $.nameOrRef.variant = { path: [ this.identAst() ] }; } continue;
      case 813: switch(this.l()) {
        case '.': this.c(814); continue;
        default: this.gr([]); continue;
      }
      case 814: if(this.miA(813,'variant')) { $.nameOrRef.variant.path.push( this.identAst() ); } continue;
      default:
      this.attachLocation( $.nameOrRef.variant );
      return this.exit_();
    }
  }
  annoStructValue($,$next) {
    $.value??={};
    this.rule_(816,$next);
    let name=new XsnName();
    let _;
    for(;;) switch(this.s) {
      case 816: if(this.annoPath({nameOrRef:name,category:'name'},817)) { this.attachLocation( name ); } continue;
      case 817: switch(this.l()) {
        case ':': this.c(818); continue;
        default: if(this.gr([',','}'])) { this.attachLocation( $.value ); } continue;
      }
      case 818: if(this.annoValue(_={},0)) $.value=_.value; continue;
      default:
      $.value.name = name;
      return this.exit_();
    }
  }
  annoValue($,$next) {
    $.value??={};
    this.rule_(820,$next);
    let sign; let sub; let ellipsis; let upTo; let _;
    for(;;) switch(this.s) {
      case 820: switch(this.lk()) {
        case '#': case 'null': case 'true': case 'false': case 'Number': case 'String': case 'QuotedLiteral': if(this.literalValue(_={},0)) {$.value=_.expr; this.adjustAnnoNumber( $.value ); } continue;
        case '+': case '-': if(this.c(821)) sign=this.lb(); continue;
        case 'Id': case '@': this.annoPath({nameOrRef:$.value,category:'annoref'},0); continue;
        case '{': if(this.c(822)) { if (!this.dynamic_.arrayAnno) $.value.$flatten = [];
else { $.value.struct = Object.create(null); $.value.literal = 'struct'; } } continue;
        case '[': if(this.c(826)) {this.arrayAnno(); $.value.val = []; $.value.literal = 'array' } continue;
        case '(': this.c(833); continue;
        default: this.ei(); continue;
      }
      case 821: if(this.m(0,'Number')) { this.adjustAnnoNumber( $.value = this.numberLiteral( sign ) ); } continue;
      case 822: switch(this.l()) {
        case 'Id': case '@': if(this.annoStructValue(_={},823)) {sub=_.value; if ($.value.$flatten) $.value.$flatten.push( sub );
else this.addDef( sub, $.value, 'struct', null, sub.name ); } continue;
        default: this.s=824; continue;
      }
      case 823: switch(this.l()) {
        case ',': this.c(822); continue;
        case '}': this.s=824; continue;
        default: this.e(); continue;
      }
      case 824: this.s=825;{ this.ec( 'arrayAnno', 'orNotEmpty' ); } continue;
      case 825: this.m(0,'}'); continue;
      case 826: switch(this.l()) {
        case 'Id': case '#': case '(': case '+': case '-': case '@': case '[': case '{': case 'Number': case 'String': case 'QuotedLiteral': if(this.annoValue(_={},831)) {sub=_.value; $.value.val.push( sub ) } continue;
        case '...': if(this.gc(832,'arrayAnno','ellipsis') && this.c(827)) ellipsis=this.lb(); continue;
        default: this.s=832; continue;
      }
      case 827: switch(this.lk()) {
        case 'up': this.ck(828); continue;
        default: this.s=830;{ upTo = undefined; } continue;
      }
      case 828: this.mk(829,'to'); continue;
      case 829: if(this.annoValue(_={},830)) upTo=_.value; continue;
      case 830: this.s=831;{ $.value.val.push( { literal: 'token', val: '...', location: ellipsis.location, upTo: upTo } ); } continue;
      case 831: switch(this.l()) {
        case ',': this.c(826); continue;
        case ']': this.s=832; continue;
        default: this.e(); continue;
      }
      case 832: this.m(0,']'); continue;
      case 833: if(this.condition(_={},834)) $.value=_.expr; continue;
      case 834: if(this.m(0,')')) { $.value.$tokenTexts = this.ruleTokensText(); } continue;
      default:
      this.attachLocation( $.value );
      return this.exit_();
    }
  }
}
module.exports = CdlParser;
